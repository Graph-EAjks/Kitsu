{"version":3,"file":"AssetLibrary-DdJKYwXT.js","sources":["../../src/components/sides/ManageLibrary.vue","../../src/components/pages/AssetLibrary.vue"],"sourcesContent":["<template>\n  <div class=\"side-wrapper\">\n    <div\n      class=\"extend-bar\"\n      @mousedown.prevent=\"/* onExtendDown */\"\n      @touchstart.prevent=\"/* onExtendDown */\"\n      v-if=\"extendable\"\n    ></div>\n    <div class=\"side manage-library\">\n      <div class=\"flexrowcolumn\" v-if=\"selectedEntities.length\">\n        <delete-entities\n          :error-text=\"$t('assets.multiple_delete_error')\"\n          :is-loading=\"loading\"\n          :is-error=\"error\"\n          :text=\"\n            $tc('library.remove_selected_assets', selectedEntities.length, {\n              nbSelectedEntities: selectedEntities.length\n            })\n          \"\n          @confirm=\"removeSharedEntities(selectedEntities)\"\n        />\n        <div class=\"has-text-centered pa1\">\n          <a @click=\"clearSelectedAssets()\">{{ $t('main.clear_selection') }}</a>\n        </div>\n        <!--h1 class=\"title mt05\">{{ $tc('tasks.selected_entities') }}</h1>\n        <div class=\"pa2 mt1\">\n          <div\n            class=\"entity-line\"\n            :key=\"entity.id\"\n            v-for=\"entity in selectedEntities\"\n          >\n            {{ entity.full_name }}\n          </div>\n        </div-->\n      </div>\n\n      <hr v-if=\"selectedEntities.length\" />\n\n      <h2 class=\"mt0\">{{ $t('library.manage') }}</h2>\n      <div class=\"has-text-centered mt2\" v-if=\"!openProductions.length\">\n        {{ $t('library.no_open_productions') }}\n      </div>\n\n      <template v-else>\n        <div class=\"flexcolumn mt2\">\n          <combobox-production\n            class=\"flexrow-item\"\n            :label=\"$t('library.select_production')\"\n            :production-list=\"openProductions\"\n            :with-margin=\"false\"\n            v-model=\"productionId\"\n          />\n          <combobox\n            class=\"flexrow-item mt2\"\n            :disabled=\"!productionId\"\n            :label=\"$t('library.select_asset_type')\"\n            :options=\"productionEntityTypes\"\n            :with-margin=\"false\"\n            v-model=\"entityTypeId\"\n          />\n        </div>\n        <div class=\"flexcolumn mt2\">\n          <button-simple\n            class=\"flexrow-item\"\n            :disabled=\"!productionId\"\n            :is-loading=\"loading\"\n            :text=\"$t('library.import_from_asset_type')\"\n            @click=\"importFromAssetType(productionId, entityTypeId)\"\n          />\n          <hr class=\"mt1\" />\n\n          <button-simple\n            class=\"flexrow-item\"\n            :disabled=\"!entityIds.length\"\n            :is-loading=\"loading\"\n            text=\"$t('library.import_from_list')\"\n            @click=\"importFromEntityIds(entityIds)\"\n          />\n        </div>\n        <div class=\"flexcolumn\">\n          <div class=\"mt1\" v-if=\"!productionUnsharedEntities.length\">\n            {{ $t('library.no_entities') }}\n          </div>\n          <div class=\"unshared-entities mt1\" v-else>\n            <table class=\"datatable\">\n              <tr\n                class=\"datatable-row\"\n                :key=\"entity.id\"\n                v-for=\"entity in productionUnsharedEntities\"\n              >\n                <td\n                  class=\"datatable-row-header pointer\"\n                  @click=\"toggleEntity(entity)\"\n                >\n                  <div class=\"flexrow\">\n                    <input\n                      type=\"checkbox\"\n                      class=\"flexrow-item\"\n                      :checked=\"isSelected(entity)\"\n                    />\n                    <entity-thumbnail\n                      class=\"entity-thumbnail flexrow-item\"\n                      :entity=\"entity\"\n                      :width=\"50\"\n                      :height=\"30\"\n                      :empty-width=\"50\"\n                      :empty-height=\"32\"\n                    />\n                    <span class=\"entity-name ml05\">\n                      {{ entity.name }}\n                    </span>\n                  </div>\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple.vue'\nimport Combobox from '@/components/widgets/Combobox.vue'\nimport ComboboxProduction from '@/components/widgets/ComboboxProduction.vue'\nimport DeleteEntities from '@/components/tops/actions/DeleteEntities.vue'\nimport EntityThumbnail from '@/components/widgets/EntityThumbnail.vue'\n\nexport default {\n  name: 'manage-library',\n\n  components: {\n    ButtonSimple,\n    Combobox,\n    ComboboxProduction,\n    DeleteEntities,\n    EntityThumbnail\n  },\n\n  props: {\n    extendable: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      productionId: null,\n      entityTypeId: null,\n      entityIds: [],\n      loading: false,\n      error: false\n    }\n  },\n\n  async mounted() {\n    this.productionId = this.openProductions[0]?.id\n    this.$nextTick(() => {\n      this.entityTypeId = this.productionEntityTypes[0]?.value\n    })\n    await this.refresh()\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetTypes',\n      'assetTypeMap',\n      'openProductions',\n      'productionMap',\n      'selectedAssets',\n      'unsharedAssets',\n      'unsharedAssetsByType'\n    ]),\n\n    productionEntityTypes() {\n      const production = this.productionMap.get(this.productionId)\n      if (!production) return []\n\n      const types = !production.asset_types?.length\n        ? this.assetTypes\n        : this.assetTypes.filter(type =>\n            production.asset_types.includes(type.id)\n          )\n\n      return types.map(type => ({ label: type.name, value: type.id }))\n    },\n\n    productionUnsharedEntities() {\n      return this.unsharedAssets.filter(\n        entity =>\n          entity.project_id === this.productionId &&\n          entity.entity_type_id === this.entityTypeId\n      )\n    },\n\n    productionUnsharedEntitiesByType() {\n      return this.unsharedAssetsByType.map(type =>\n        type.filter(entity => entity.project_id === this.productionId)\n      )\n    },\n\n    selectedEntities() {\n      return [...this.selectedAssets.values()]\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'clearSelectedAssets',\n      'loadUnsharedAssets',\n      'shareAssets',\n      'unshareAssets'\n    ]),\n\n    async refresh() {\n      this.loading = true\n      this.entityIds = []\n      const production = this.productionMap.get(this.productionId)\n      try {\n        await this.loadUnsharedAssets({ production })\n      } catch (error) {\n        console.error(error)\n      }\n      this.loading = false\n    },\n\n    toggleEntities(entities) {\n      const allSelected = entities.every(entity => this.isSelected(entity))\n      entities.forEach(entity => this.toggleEntity(entity, !allSelected))\n    },\n\n    toggleEntity(entity, force = false) {\n      if (force || !this.isSelected(entity)) {\n        this.entityIds.push(entity.id)\n      } else {\n        this.entityIds = this.entityIds.filter(id => id !== entity.id)\n      }\n    },\n\n    isSelected(entity) {\n      return this.entityIds.includes(entity.id)\n    },\n\n    async importFromProduction(productionId) {\n      this.loading = true\n      const production = this.productionMap.get(productionId)\n      try {\n        await this.shareAssets({ production })\n        this.$emit('library-updated')\n      } catch (error) {\n        console.error(error)\n      }\n      this.loading = false\n      await this.refresh()\n    },\n\n    async importFromAssetType(productionId, assetTypeId) {\n      this.loading = true\n      const production = this.productionMap.get(productionId)\n      const assetType = this.assetTypeMap.get(assetTypeId)\n      try {\n        await this.shareAssets({ production, assetType })\n        this.$emit('library-updated')\n      } catch (error) {\n        console.error(error)\n      }\n      this.loading = false\n      await this.refresh()\n    },\n\n    async importFromEntityIds(entityIds) {\n      this.loading = true\n      try {\n        await this.shareAssets({ assetIds: entityIds })\n        this.$emit('library-updated')\n      } catch (error) {\n        console.error(error)\n      }\n      this.loading = false\n      await this.refresh()\n    },\n\n    async removeSharedEntities(entities) {\n      this.loading = true\n      const entityIds = entities.map(entitie => entitie.id)\n      try {\n        await this.unshareAssets({ assetIds: entityIds })\n        this.$emit('library-updated')\n        this.clearSelectedAssets()\n      } catch (error) {\n        console.error(error)\n      }\n      this.loading = false\n      await this.refresh()\n    }\n  },\n\n  watch: {\n    productionId() {\n      this.refresh()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .extend-bar {\n    background: #46494f;\n  }\n\n  .side {\n    background: #36393f;\n    color: $white;\n  }\n}\n\n.extend-bar {\n  width: 3px;\n  margin-left: 3px;\n  background: #ccc;\n}\n\n.side-wrapper {\n  display: flex;\n  align-items: stretch;\n  min-height: 100%;\n}\n\n.side {\n  flex: 1;\n  overflow: auto;\n  background: #f8f8f8;\n  min-height: 100%;\n}\n\n.manage-library {\n  padding: 1em;\n}\n\n.mt0 {\n  margin-top: 0;\n}\n\n.unshared-entities {\n  min-height: 200px;\n  max-height: calc(100vh - 530px);\n  overflow: hidden auto;\n\n  .entity-name {\n    font-weight: bold;\n  }\n}\n</style>\n","<template>\n  <page-layout>\n    <template #main>\n      <div class=\"asset-library\">\n        <header class=\"flexrow\">\n          <page-title class=\"mt1 filler\" :text=\"$t('library.asset_library')\" />\n        </header>\n\n        <div class=\"filters flexrow\">\n          <search-field\n            ref=\"search-field\"\n            class=\"flexrow-item\"\n            @change=\"onSearchChange\"\n            :can-save=\"false\"\n            v-focus\n          />\n          <combobox-production\n            class=\"flexrow-item\"\n            :label=\"$t('main.production')\"\n            :production-list=\"productionList\"\n            v-model=\"filters.productionId\"\n          />\n          <span class=\"filler\"></span>\n          <combobox\n            class=\"flexrow-item\"\n            :label=\"$t('main.sorted_by')\"\n            :options=\"sorting.options\"\n            locale-key-prefix=\"library.fields.\"\n            v-model=\"sorting.current\"\n          />\n        </div>\n\n        <div class=\"entities mb2\">\n          <table-info\n            :is-loading=\"loading.sharedAssets\"\n            :is-error=\"errors.sharedAssets\"\n            v-if=\"loading.sharedAssets || errors.sharedAssets\"\n          />\n          <div\n            class=\"has-text-centered\"\n            v-else-if=\"!displayedSharedAssets.length\"\n          >\n            {{ $t('library.no_shared_assets') }}\n          </div>\n          <template v-else>\n            <div\n              class=\"pb1\"\n              v-for=\"(group, index) in sortedSharedAssetsByType\"\n              :key=\"index\"\n            >\n              <h2 class=\"mt0\">\n                {{ group[0].asset_type_name }} ({{ group.length }})\n              </h2>\n              <ul class=\"items\">\n                <li\n                  class=\"item flexcolumn\"\n                  :class=\"{\n                    'selected-item': isSelected(entity)\n                  }\"\n                  :key=\"entity.id\"\n                  v-for=\"entity in group\"\n                  @click=\"toggleEntity(entity)\"\n                >\n                  <div class=\"card\">\n                    <entity-preview\n                      :empty-height=\"200\"\n                      :empty-width=\"300\"\n                      :height=\"200\"\n                      :width=\"300\"\n                      :entity=\"entity\"\n                      is-rounded-top-border\n                    />\n                    <div class=\"item-description flexrow\">\n                      <production-name\n                        class=\"flexrow-item\"\n                        :production=\"entity.production\"\n                        :size=\"30\"\n                        only-avatar\n                      />\n                      <div class=\"entity-name ml1 flexrow-item\">\n                        {{ entity.full_name }}\n                      </div>\n                    </div>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </template>\n        </div>\n      </div>\n    </template>\n    <template #side>\n      <manage-library @library-updated=\"refresh(true)\" />\n    </template>\n  </page-layout>\n</template>\n\n<script>\nimport firstBy from 'thenby'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport Combobox from '@/components/widgets/Combobox.vue'\nimport ComboboxProduction from '@/components/widgets/ComboboxProduction.vue'\nimport EntityPreview from '@/components/widgets/EntityPreview.vue'\nimport ManageLibrary from '@/components/sides/ManageLibrary.vue'\nimport PageLayout from '@/components/layouts/PageLayout.vue'\nimport PageTitle from '@/components/widgets/PageTitle.vue'\nimport ProductionName from '@/components/widgets/ProductionName.vue'\nimport SearchField from '@/components/widgets/SearchField.vue'\nimport TableInfo from '@/components/widgets/TableInfo.vue'\n\nexport default {\n  name: 'asset-library',\n\n  components: {\n    Combobox,\n    ComboboxProduction,\n    EntityPreview,\n    ManageLibrary,\n    PageLayout,\n    PageTitle,\n    ProductionName,\n    SearchField,\n    TableInfo\n  },\n\n  data() {\n    return {\n      errors: {\n        sharedAssets: false\n      },\n      filters: {\n        productionId: null\n      },\n      loading: {\n        sharedAssets: false\n      },\n      sorting: {\n        current: 'name',\n        options: ['name', 'production', 'created_at', 'updated_at'].map(\n          name => ({\n            label: name,\n            value: name\n          })\n        )\n      }\n    }\n  },\n\n  mounted() {\n    this.filters.productionId = this.$route.query.production || undefined\n    this.searchField.setValue(this.$route.query.search || undefined)\n  },\n\n  computed: {\n    ...mapGetters([\n      'displayedSharedAssets',\n      'displayedSharedAssetsByType',\n      'openProductions',\n      'productionMap',\n      'selectedAssets'\n    ]),\n\n    searchField() {\n      return this.$refs['search-field']\n    },\n\n    productionList() {\n      return [{ name: this.$t('main.all') }, ...this.openProductions]\n    },\n\n    sortedSharedAssetsByType() {\n      const nameFilter = (a, b) =>\n        a.name.localeCompare(b.name, undefined, { numeric: true })\n      const productionFilter = (a, b) =>\n        a.production.name.localeCompare(b.production.name, undefined, {\n          numeric: true\n        })\n      return this.displayedSharedAssetsByType.map(type => {\n        if (this.sorting.current === 'production') {\n          return type.sort(firstBy(productionFilter).thenBy(nameFilter))\n        }\n        if (this.sorting.current === 'created_at') {\n          return type.sort(firstBy('created_at'))\n        }\n        if (this.sorting.current === 'updated_at') {\n          return type.sort(firstBy('updated_at', -1))\n        }\n        return type.sort(firstBy(nameFilter).thenBy(productionFilter))\n      })\n    },\n\n    hasSelectedAssets() {\n      return this.selectedAssets.size > 0\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'loadSharedAssets',\n      'setAssetSelection',\n      'setSharedAssetSearch'\n    ]),\n\n    async refresh(silent = false) {\n      this.loading.sharedAssets = !silent\n      const production = this.productionMap.get(this.filters.productionId)\n      try {\n        await this.loadSharedAssets({ production })\n      } catch (error) {\n        console.error(error)\n        this.errors.sharedAssets = true\n      }\n      this.loading.sharedAssets = false\n    },\n\n    toggleEntity(entity) {\n      const selected = this.isSelected(entity)\n      this.setAssetSelection({ asset: entity, selected: !selected })\n    },\n\n    isSelected(entity) {\n      return this.selectedAssets.has(entity.id)\n    },\n\n    onSearchChange() {\n      const searchQuery = this.searchField.getValue() || ''\n      this.setSharedAssetSearch(searchQuery)\n      this.updateRoute({ search: searchQuery })\n    },\n\n    updateRoute({ production, search }) {\n      const query = {\n        ...this.$route.query,\n        production: production || undefined,\n        search: search || undefined\n      }\n\n      if (JSON.stringify(query) !== JSON.stringify(this.$route.query)) {\n        this.$router.push({ query })\n      }\n    }\n  },\n\n  watch: {\n    'filters.productionId'(value) {\n      this.updateRoute({ production: value })\n      this.refresh()\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('library.asset_library')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.asset-library {\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n  padding: 4em 2em 1em 2em;\n  color: var(--text);\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.entities {\n  .items {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n  }\n\n  .item {\n    background-color: var(--background);\n    border: 5px solid transparent;\n    border-radius: 1em;\n    transition: border-color 0.2s ease-in-out;\n    cursor: pointer;\n\n    &:hover {\n      border-color: var(--background-selectable);\n    }\n\n    &.selected-item {\n      border-color: var(--background-selected);\n    }\n\n    .card {\n      border-radius: inherit;\n      box-shadow: 4px 4px 4px rgba(0, 0, 0, 0.1);\n\n      .dark & {\n        background-color: var(--background-alt);\n      }\n    }\n\n    .item-description {\n      max-width: 300px;\n      color: var(--text-strong);\n      font-weight: bold;\n      padding: 0.3em 1em;\n    }\n  }\n}\n</style>\n"],"names":["_sfc_main","ButtonSimple","Combobox","ComboboxProduction","DeleteEntities","EntityThumbnail","_a","mapGetters","production","type","entity","mapActions","error","entities","allSelected","force","id","productionId","assetTypeId","assetType","entityIds","entitie","EntityPreview","ManageLibrary","PageLayout","PageTitle","ProductionName","SearchField","TableInfo","name","nameFilter","a","b","productionFilter","firstBy","silent","selected","searchQuery","search","query","value"],"mappings":"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"}