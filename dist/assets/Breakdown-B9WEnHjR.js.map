{"version":3,"file":"Breakdown-B9WEnHjR.js","sources":["../../src/components/pages/breakdown/AvailableAssetBlock.vue","../../src/components/modals/EditLabelModal.vue","../../src/components/pages/breakdown/AssetBlock.vue","../../src/components/pages/breakdown/ShotLine.vue","../../src/components/pages/Breakdown.vue"],"sourcesContent":["<template>\n  <div\n    :id=\"`casting-${asset.id}`\"\n    class=\"asset\"\n    :class=\"{\n      active,\n      'big-asset': bigMode,\n      shared: asset.shared\n    }\"\n    :title=\"asset.name\"\n    v-if=\"!textMode\"\n  >\n    <div class=\"asset-add\" @click=\"addOneAsset\">+ 1</div>\n    <div class=\"asset-add-10\" @click=\"addTenAssets\">+ 10</div>\n    <div class=\"asset-picture\" v-if=\"asset.preview_file_id\">\n      <img\n        loading=\"lazy\"\n        alt=\"\"\n        :src=\"`/api/pictures/thumbnails-square/preview-files/${asset.preview_file_id}.png`\"\n      />\n    </div>\n    <div class=\"asset-picture\" v-else>\n      <span class=\"empty-picture\">\n        {{ asset.name }}\n      </span>\n    </div>\n  </div>\n  <div\n    class=\"asset-text flexrow-item flexrow\"\n    :class=\"{\n      shared: asset.shared\n    }\"\n    v-else\n  >\n    <span class=\"asset-text-name flexrow-item\">\n      {{ asset.name }}\n    </span>\n    <span class=\"modify-asset flexrow-item\" @click=\"addOneAsset\"> + 1 </span>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'available-asset-block',\n\n  props: {\n    asset: {\n      default: () => ({\n        id: '',\n        name: ''\n      }),\n      type: Object\n    },\n    active: {\n      default: false,\n      type: Boolean\n    },\n    textMode: {\n      default: false,\n      type: Boolean\n    },\n    bigMode: {\n      default: true,\n      type: Boolean\n    }\n  },\n\n  methods: {\n    addOneAsset(event) {\n      if (this.active) {\n        this.$emit('add-one', this.asset.id)\n      }\n    },\n    addTenAssets(event) {\n      if (this.active) {\n        this.$emit('add-ten', this.asset.id)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark .asset {\n  background-color: $dark-grey-lightest;\n}\n\n.dark .asset.casted,\n.dark .asset .asset-add,\n.dark .asset .asset-add-10 {\n  background-color: #8f91eb;\n}\n\n.asset-add {\n  position: relative;\n  top: 0;\n  left: 0;\n  width: 60px;\n  height: 30px;\n  background: #f1e4ff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  font-size: 1.2em;\n  opacity: 0;\n  z-index: 3;\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n}\n\n.asset-add-10 {\n  position: relative;\n  top: 0;\n  left: 0;\n  margin-top: 0;\n  width: 60px;\n  height: 30px;\n  background: #e1d4f9;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  font-size: 1.2em;\n  opacity: 0;\n  z-index: 3;\n  border-bottom-left-radius: 8px;\n  border-bottom-right-radius: 8px;\n}\n\n.asset.active:hover .asset-add,\n.asset.active:hover .asset-add-10 {\n  opacity: 1;\n}\n\n.asset {\n  width: 60px;\n  height: 60px;\n  margin-right: 1em;\n  margin-bottom: 1em;\n  font-size: 0.8em;\n  cursor: default;\n  background: $white-grey;\n  border-radius: 8px;\n\n  &.big-asset {\n    width: 100px;\n    height: 100px;\n\n    .asset-picture {\n      top: -110px;\n      left: -10px;\n      width: 120px;\n      height: 120px;\n    }\n\n    .asset-add-10,\n    .asset-add {\n      width: 100px;\n      height: 50px;\n    }\n  }\n\n  &.shared {\n    box-shadow: 0 0 0 2px var(--shared-color);\n  }\n}\n\n.asset-picture {\n  position: relative;\n  top: -60px;\n  left: 0;\n  display: flex;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  z-index: 2;\n  width: 60px;\n  height: 60px;\n  word-break: break-all;\n  font-size: 0.8em;\n\n  img {\n    border-radius: 8px;\n  }\n}\n\n.asset-name {\n  text-align: center;\n  position: relative;\n  word-break: break-all;\n  top: -55px;\n}\n\n.asset.casted {\n  background: $purple;\n}\n\n.active {\n  cursor: pointer;\n}\n\n.asset-text {\n  font-size: 0.9em;\n  margin-bottom: 0.5em;\n\n  &.shared {\n    box-shadow: 0 0 0 2px var(--shared-color);\n  }\n}\n</style>\n","<template>\n  <div\n    :class=\"{\n      modal: true,\n      'is-active': active\n    }\"\n  >\n    <div class=\"modal-background\" @click=\"$emit('cancel')\"></div>\n\n    <div class=\"modal-content\">\n      <div class=\"box content\">\n        <h1 class=\"title\">\n          {{ $t('breakdown.edit_label') }}\n        </h1>\n\n        <form @submit.prevent>\n          <combobox\n            ref=\"typeField\"\n            :label=\"$t('breakdown.label')\"\n            :options=\"typeOptions\"\n            @enter=\"confirm\"\n            v-model=\"form.label\"\n            v-focus\n          />\n\n          <modal-footer\n            :is-error=\"isError\"\n            :is-loading=\"isLoading\"\n            @confirm=\"confirm\"\n            @cancel=\"$emit('cancel')\"\n          />\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { modalMixin } from '@/components/modals/base_modal'\n\nimport Combobox from '@/components/widgets/Combobox.vue'\nimport ModalFooter from '@/components/modals/ModalFooter.vue'\n\nexport default {\n  name: 'edit-label-modal',\n\n  mixins: [modalMixin],\n\n  components: {\n    Combobox,\n    ModalFooter\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String\n    }\n  },\n\n  mounted() {\n    this.form.label = this.label\n  },\n\n  data() {\n    return {\n      form: {\n        label: 'animate'\n      },\n      typeOptions: [\n        {\n          label: this.$t('breakdown.options.animate'),\n          value: 'animate'\n        },\n        {\n          label: this.$t('breakdown.options.fixed'),\n          value: 'fixed'\n        }\n      ]\n    }\n  },\n\n  methods: {\n    confirm() {\n      return this.$emit('confirm', this.form)\n    }\n  },\n\n  watch: {\n    label() {\n      this.form.label = this.label\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.error {\n  margin-top: 1em;\n}\n</style>\n","<template>\n  <div\n    class=\"asset big casted labelled\"\n    :class=\"{\n      active,\n      'big-asset': bigMode,\n      shared: asset.shared\n    }\"\n    :title=\"`${asset.name} (${nbOccurences})`\"\n    v-if=\"!textMode\"\n  >\n    <div class=\"asset-wrapper\">\n      <div class=\"asset-add-1\" @click=\"addOneAsset\" v-if=\"!readOnly\">+ 1</div>\n      <div class=\"asset-add\" @click=\"removeOneAsset\" v-if=\"!readOnly\">- 1</div>\n      <div class=\"asset-picture\" v-if=\"asset.preview_file_id\">\n        <img\n          loading=\"lazy\"\n          alt=\"\"\n          :src=\"`/api/pictures/thumbnails-square/preview-files/${asset.preview_file_id}.png`\"\n        />\n        <span class=\"nb-occurences\" v-if=\"nbOccurences > 1\">\n          {{ nbOccurences }}\n        </span>\n      </div>\n      <div class=\"asset-picture\" v-else>\n        <span class=\"empty-picture\">\n          {{ shortenName(asset.name) }} ({{ nbOccurences }})\n        </span>\n      </div>\n    </div>\n    <div class=\"asset-label\" :label=\"asset.label\" @click=\"onEditLabelClicked\">\n      {{ asset.label || $t('breakdown.options.animate') }}\n    </div>\n  </div>\n  <div\n    class=\"asset-text flexrow-item flexrow\"\n    :class=\"{\n      shared: asset.shared\n    }\"\n    v-else\n  >\n    <span class=\"asset-text-name flexrow-item\">\n      {{ asset.name }} ({{ nbOccurences }})\n    </span>\n    <span class=\"filler\"></span>\n    <span\n      class=\"modify-asset flexrow-item\"\n      @click=\"removeOneAsset\"\n      v-if=\"!readOnly\"\n    >\n      - 1\n    </span>\n  </div>\n</template>\n\n<script>\nimport stringHelpers from '@/lib/string'\nimport { domMixin } from '@/components/mixins/dom'\n\nexport default {\n  name: 'asset-block',\n\n  mixins: [domMixin],\n\n  props: {\n    asset: {\n      default: () => ({\n        id: '',\n        name: ''\n      }),\n      type: Object\n    },\n    nbOccurences: {\n      default: 1,\n      type: Number\n    },\n    active: {\n      default: true,\n      type: Boolean\n    },\n    readOnly: {\n      default: false,\n      type: Boolean\n    },\n    textMode: {\n      default: false,\n      type: Boolean\n    },\n    bigMode: {\n      default: false,\n      type: Boolean\n    }\n  },\n\n  methods: {\n    removeOneAsset(event) {\n      this.pauseEvent(event)\n      this.$emit('remove-one', this.asset.asset_id, this.nbOccurences)\n    },\n\n    addOneAsset(event) {\n      this.pauseEvent(event)\n      this.$emit('add-one', this.asset.asset_id, this.nbOccurences)\n    },\n\n    shortenName(name) {\n      return stringHelpers.shortenText(name, 13)\n    },\n\n    onEditLabelClicked() {\n      if (!this.readOnly) {\n        this.$emit('edit-label', this.asset, this.asset.label)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark .asset-picture {\n  background-color: $dark-grey-lightest;\n}\n\n.dark .asset.casted .asset-picture,\n.dark .asset .asset-add,\n.dark .asset .asset-add-10 {\n  background-color: $purple-strong;\n}\n\n.asset {\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  margin: 0 1em 0.5em 0;\n  font-size: 0.8em;\n  word-wrap: break-word;\n  border-radius: 5px;\n  height: 40px;\n\n  .asset-wrapper {\n    width: 40px;\n  }\n\n  &.big-asset {\n    width: 100px;\n    height: 100px;\n\n    .asset-picture {\n      top: -10px;\n      left: -10px;\n      width: 120px;\n      height: 120px;\n    }\n\n    .asset-wrapper {\n      width: 100px;\n    }\n\n    .nb-occurences {\n      font-size: 1.2em;\n      padding: 2px;\n      right: 15px;\n      bottom: 15px;\n    }\n  }\n\n  &.shared {\n    box-shadow: 0 0 0 2px var(--shared-color);\n  }\n}\n\n.labelled {\n  margin-right: 2em;\n}\n\n.casted {\n  background: $purple;\n}\n\n.asset-wrapper {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  width: 60px;\n  border-radius: 5px;\n  overflow: hidden;\n}\n\n.active {\n  cursor: pointer;\n}\n\n.asset-add,\n.asset-add-1 {\n  flex: 0 0 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: $light-purple;\n  font-weight: bold;\n  font-size: 0.9em;\n  opacity: 0;\n  z-index: 2;\n}\n\n.asset-add-1 {\n  background: $purple;\n}\n\n.asset.active:hover .asset-add,\n.asset.active:hover .asset-add-1 {\n  opacity: 1;\n}\n\n.asset-picture {\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  width: 100%;\n  height: 100%;\n  background: $white-grey;\n  word-break: break-all;\n  font-size: 0.8em;\n\n  img {\n    border-radius: 5px;\n  }\n}\n\n.asset-name {\n  text-align: center;\n  position: relative;\n  word-break: break-all;\n  top: -75px;\n}\n\n.asset-label {\n  background: $dark-green;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  color: $white;\n  font-size: 0.7em;\n  height: 20px;\n  left: 100%;\n  padding-top: 5px;\n  position: absolute;\n  text-align: center;\n  top: 0;\n  transform: rotate(-90deg) translateX(-25%) translateY(calc(-50% - 5px));\n  width: 40px;\n}\n\n.asset-label[label='fixed'] {\n  background: $orange-carrot;\n}\n\n.nb-occurences {\n  background: rgba(160, 160, 180, 0.8);\n  font-size: 0.8em;\n  border-radius: 2px;\n  color: white;\n  position: absolute;\n  padding: 2px;\n  right: 2px;\n  bottom: 2px;\n}\n\n.asset-text {\n  width: 120px;\n  margin-right: 0;\n\n  &.shared {\n    box-shadow: 0 0 0 2px var(--shared-color);\n  }\n}\n\n.modify-asset {\n  min-width: 20px;\n}\n\n.asset-text-name {\n  word-wrap: anywhere;\n}\n</style>\n","<template>\n  <div\n    :id=\"entity.id\"\n    :class=\"{\n      shot: true,\n      selected: selected,\n      unselectable: true,\n      stdby: entity ? entity.is_casting_standby : false,\n      'text-mode': textMode\n    }\"\n    @click=\"onClicked($event)\"\n  >\n    <div\n      class=\"flexrow-item sticky\"\n      :style=\"{\n        'max-width': columnWidth.name ? columnWidth.name + 'px' : '250px'\n      }\"\n    >\n      <p class=\"error has-text-left info-message\" v-if=\"isSaveError\">\n        {{ $t('breakdown.save_error') }}\n      </p>\n      <div class=\"flexrow\">\n        <entity-thumbnail\n          class=\"flexrow-item mr1\"\n          :entity=\"{}\"\n          :height=\"bigMode ? 100 : 60\"\n          :width=\"bigMode ? 150 : 90\"\n          :empty-height=\"bigMode ? 100 : 60\"\n          :empty-width=\"bigMode ? 150 : 90\"\n          :preview-file-id=\"previewFileId\"\n        />\n        <div class=\"shot-name flexrow-item ml05\">\n          <div v-for=\"(chunk, index) in chunks\" :key=\"`chunk-${index}`\">\n            {{ chunk }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"standby-column flexrow-item\" v-if=\"isShowInfosBreakdown\">\n      <input\n        type=\"checkbox\"\n        :checked=\"entity ? entity.is_casting_standby : false\"\n        :disabled=\"!isCurrentUserManager\"\n        :style=\"[\n          isCurrentUserManager ? { cursor: 'pointer' } : { cursor: 'auto' }\n        ]\"\n        @input=\"event => onStandbyChanged(entity, event)\"\n      />\n    </div>\n    <div\n      class=\"description-column flexrow-item\"\n      v-if=\"isShowInfosBreakdown && isDescription\"\n    >\n      <div\n        class=\"tooltip-text\"\n        v-html=\"renderMarkdown(entity.description)\"\n        v-if=\"readOnly\"\n      ></div>\n      <textarea\n        class=\"tooltip-editor\"\n        ref=\"text\"\n        :value=\"entity.description\"\n        @input=\"event => onDescriptionChanged(entity, event)\"\n        v-else\n      >\n      </textarea>\n    </div>\n    <div\n      class=\"frames-column flexrow-item\"\n      v-if=\"isFrames && isShowInfosBreakdown && metadataDisplayHeaders.frames\"\n    >\n      <input\n        class=\"input-editor\"\n        step=\"1\"\n        :value=\"entity.nb_frames\"\n        type=\"number\"\n        min=\"0\"\n        @input=\"event => onNbFramesChanged(entity, event.target.value)\"\n        v-if=\"isCurrentUserManager\"\n      />\n      <span class=\"metadata-value selectable\" v-else>\n        {{ entity.nb_frames }}\n      </span>\n    </div>\n    <div\n      class=\"frames-column flexrow-item\"\n      v-if=\"isFrameIn && isShowInfosBreakdown && metadataDisplayHeaders.frameIn\"\n    >\n      <input\n        class=\"input-editor\"\n        step=\"1\"\n        type=\"number\"\n        min=\"0\"\n        :value=\"getMetadataFieldValue({ field_name: 'frame_in' }, entity)\"\n        @input=\"\n          event =>\n            onMetadataFieldChanged(\n              entity,\n              { field_name: 'frame_in', data_type: 'number' },\n              event\n            )\n        \"\n        v-if=\"isCurrentUserManager\"\n      />\n      <span class=\"metadata-value selectable\" v-else>\n        {{ getMetadataFieldValue({ field_name: 'frame_in' }, entity) }}\n      </span>\n    </div>\n    <div\n      class=\"frames-column flexrow-item\"\n      v-if=\"\n        isFrameOut && isShowInfosBreakdown && metadataDisplayHeaders.frameOut\n      \"\n    >\n      <input\n        class=\"input-editor\"\n        step=\"1\"\n        type=\"number\"\n        min=\"0\"\n        :value=\"getMetadataFieldValue({ field_name: 'frame_out' }, entity)\"\n        @input=\"\n          event =>\n            onMetadataFieldChanged(\n              entity,\n              { field_name: 'frame_out', data_type: 'number' },\n              event\n            )\n        \"\n        v-if=\"isCurrentUserManager\"\n      />\n      <span class=\"metadata-value selectable\" v-else>\n        {{ getMetadataFieldValue({ field_name: 'frame_out' }, entity) }}\n      </span>\n    </div>\n    <div\n      class=\"metadata-descriptor flexrow-item\"\n      :title=\"entity.data ? entity.data[descriptor.field_name] : ''\"\n      :key=\"'desc' + entity.id + '-' + descriptor.id\"\n      :style=\"{\n        'min-width': columnWidth[descriptor.id]\n          ? columnWidth[descriptor.id] + 'px'\n          : '110px',\n        'max-width': columnWidth[descriptor.id]\n          ? columnWidth[descriptor.id] + 'px'\n          : '110px'\n      }\"\n      v-for=\"descriptor in visibleMetadataDescriptors\"\n      v-if=\"isShowInfosBreakdown\"\n    >\n      <input\n        class=\"input-editor\"\n        @input=\"event => onMetadataFieldChanged(entity, descriptor, event)\"\n        :value=\"getMetadataFieldValue(descriptor, entity)\"\n        v-if=\"\n          descriptor.choices.length === 0 &&\n          (isCurrentUserManager ||\n            isSupervisorInDepartments(descriptor.departments))\n        \"\n      />\n      <div\n        class=\"metadata-value selectable\"\n        v-else-if=\"\n          descriptor.choices.length > 0 &&\n          getDescriptorChecklistValues(descriptor).length > 0\n        \"\n      >\n        <p\n          v-for=\"(option, i) in getDescriptorChecklistValues(descriptor)\"\n          :key=\"`${entity.id}-${descriptor.id}-${i}-${option.text}-div`\"\n        >\n          <input\n            type=\"checkbox\"\n            @change=\"\n              event =>\n                onMetadataChecklistChanged(\n                  entity,\n                  descriptor,\n                  option.text,\n                  event\n                )\n            \"\n            :id=\"`${entity.id}-${descriptor.id}-${i}-${option.text}-input`\"\n            :checked=\"\n              getMetadataChecklistValues(descriptor, entity)[option.text]\n            \"\n            :disabled=\"\n              !(\n                isCurrentUserManager ||\n                isSupervisorInDepartments(descriptor.departments)\n              )\n            \"\n            :style=\"[\n              isCurrentUserManager ||\n              isSupervisorInDepartments(descriptor.departments)\n                ? { cursor: 'pointer' }\n                : { cursor: 'auto' }\n            ]\"\n          />\n          <label\n            :for=\"`${entity.id}-${descriptor.id}-${i}-${option.text}-input`\"\n            :style=\"[\n              isCurrentUserManager ||\n              isSupervisorInDepartments(descriptor.departments)\n                ? { cursor: 'pointer' }\n                : { cursor: 'auto' }\n            ]\"\n          >\n            {{ option.text }}\n          </label>\n        </p>\n      </div>\n      <span\n        class=\"select\"\n        v-else-if=\"\n          isCurrentUserManager ||\n          isSupervisorInDepartments(descriptor.departments)\n        \"\n      >\n        <select\n          class=\"select-input\"\n          @change=\"event => onMetadataFieldChanged(entity, descriptor, event)\"\n        >\n          <option\n            v-for=\"(option, i) in getDescriptorChoicesOptions(descriptor)\"\n            :key=\"`desc-value-${entity.id}-${descriptor.id}-${i}-${option.label}-${option.value}`\"\n            :value=\"option.value\"\n            :selected=\"\n              getMetadataFieldValue(descriptor, entity) === option.value\n            \"\n          >\n            {{ option.label }}\n          </option>\n        </select>\n      </span>\n      <span class=\"metadata-value selectable\" v-else>\n        {{ getMetadataFieldValue(descriptor, entity) }}\n      </span>\n    </div>\n    <div\n      class=\"asset-list flexrow-item\"\n      :key=\"entity.id + '-' + assetType\"\n      v-for=\"assetType in assetTypes\"\n    >\n      <div\n        class=\"asset-type-line flexcolumn\"\n        v-if=\"assetsByAssetTypesMap[assetType] !== undefined\"\n      >\n        <div class=\"flexrow-item mb05\">\n          {{ nbAssetsForType(assetType) }}\n          {{ $tc('assets.number', nbAssetsForType(assetType)) }}\n        </div>\n        <div class=\"asset-type-items flexrow-item\">\n          <asset-block\n            class=\"flexrow-item\"\n            :key=\"asset.id\"\n            :asset=\"asset\"\n            :active=\"selected\"\n            :nb-occurences=\"asset.nb_occurences\"\n            :read-only=\"readOnly\"\n            :text-mode=\"textMode\"\n            :big-mode=\"bigMode\"\n            @edit-label=\"onEditLabelClicked\"\n            @remove-one=\"removeOneAsset\"\n            @add-one=\"addOneAsset\"\n            v-for=\"asset in assetsByAssetTypesMap[assetType]\"\n          />\n        </div>\n        <div class=\"actions filler\"></div>\n      </div>\n      <div class=\"asset-type-line flexrow empty mt05 mb05\" v-else>\n        {{ $t('breakdown.empty') }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nimport { renderMarkdown } from '@/lib/render'\nimport { entityListMixin } from '@/components/mixins/entity_list'\nimport { descriptorMixin } from '@/components/mixins/descriptors'\n\nimport AssetBlock from '@/components/pages/breakdown/AssetBlock.vue'\nimport EntityThumbnail from '@/components/widgets/EntityThumbnail.vue'\n\nexport default {\n  name: 'shot-line',\n\n  mixins: [entityListMixin, descriptorMixin],\n\n  components: {\n    AssetBlock,\n    EntityThumbnail\n  },\n\n  props: {\n    entity: {\n      default: () => {},\n      type: Object\n    },\n    previewFileId: {\n      default: '',\n      type: String\n    },\n    selected: {\n      default: false,\n      type: Boolean\n    },\n    name: {\n      default: '',\n      type: String\n    },\n    assets: {\n      default: () => [],\n      type: Array\n    },\n    assetTypes: {\n      default: () => [],\n      type: Array\n    },\n    readOnly: {\n      default: false,\n      type: Boolean\n    },\n    textMode: {\n      default: false,\n      type: Boolean\n    },\n    metadataDescriptors: {\n      default: () => [],\n      type: Array\n    },\n    metadataDisplayHeaders: {\n      default: () => {},\n      type: Object\n    },\n    bigMode: {\n      default: false,\n      type: Boolean\n    },\n    isDescription: {\n      default: true,\n      type: Boolean\n    },\n    isSaveError: {\n      default: false,\n      type: Boolean\n    },\n    columnWidth: {\n      default: () => {},\n      type: Object\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetMap',\n      'isCurrentUserManager',\n      'isCurrentUserSupervisor',\n      'isFrameIn',\n      'isFrameOut',\n      'isFrames',\n      'isShowInfosBreakdown',\n      'user'\n    ]),\n\n    chunks() {\n      const chunks = this.name.split(' / ')\n      return chunks.filter(chunk => chunk && chunk !== 'undefined')\n    },\n\n    assetsByAssetTypesMap() {\n      const assetsByAssetTypes = {}\n      this.assets.forEach(assetTypeAssets => {\n        if (assetTypeAssets[0]) {\n          assetsByAssetTypes[assetTypeAssets[0].asset_type_name] =\n            assetTypeAssets\n        }\n      })\n      return assetsByAssetTypes\n    }\n  },\n\n  methods: {\n    onClicked(event) {\n      this.$emit('click', this.entity.id, event)\n    },\n\n    onEditLabelClicked(asset, label) {\n      this.$emit('edit-label', asset, label, this.entity.id)\n    },\n\n    removeOneAsset(assetId, nbOccurences) {\n      this.$emit('remove-one', assetId, this.entity.id, nbOccurences)\n    },\n\n    addOneAsset(assetId, nbOccurences) {\n      this.$emit('add-one', assetId, this.entity.id, nbOccurences)\n    },\n\n    onDescriptionChanged(entity, event) {\n      this.$emit('description-changed', entity, event.target.value)\n    },\n\n    onStandbyChanged(entity, event) {\n      this.$emit('standby-changed', entity, event.target.checked)\n    },\n\n    renderMarkdown,\n\n    nbAssetsForType(assetType) {\n      return this.assetsByAssetTypesMap[assetType].reduce(\n        (acc, a) => acc + a.nb_occurences,\n        0\n      )\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .asset-type-name {\n    color: $light-grey-light;\n  }\n\n  .asset-list {\n    color: $light-grey;\n  }\n\n  .select select,\n  div .input-editor,\n  div .tooltip-editor {\n    color: $white;\n\n    option {\n      background: $dark-grey-light;\n      color: $white;\n    }\n\n    &:focus,\n    &:active,\n    &:hover {\n      background: $dark-grey-light;\n    }\n  }\n}\n\n.asset-list {\n  align-self: stretch;\n  border-left: 1px solid $light-grey;\n  margin-right: 0;\n  min-width: 150px;\n  max-width: 150px;\n  padding-left: 1em;\n\n  &:last-child {\n    border-right: 1px solid $light-grey;\n  }\n}\n\n.text-mode .asset-list {\n  padding-top: 0;\n}\n\n.asset-type-line {\n  padding-bottom: 0.5em;\n  padding-top: 0.5em;\n}\n.asset-type-line:not(:first-child) {\n  margin-top: 0.5em;\n}\n\n.shot-name {\n  color: var(--text);\n  font-weight: bold;\n  flex: 0 0 100px;\n  min-width: 160px;\n  max-width: 160px;\n  padding-top: 0;\n  word-break: break-all;\n}\n\n.asset-type-name {\n  display: flex;\n  width: 150px;\n  height: 40px;\n  color: $grey-strong;\n  text-transform: uppercase;\n}\n\n.asset-type-items {\n  flex: 1 1 auto;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.shot {\n  font-size: 1.1em;\n  border-bottom: 1px solid $light-grey;\n  color: $grey-strong;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  padding: 0;\n\n  .empty {\n    color: $light-grey;\n  }\n\n  &.selected {\n    .empty {\n      color: $grey;\n    }\n  }\n}\n\n.shot:hover {\n  background: var(--background-selectable);\n  .sticky {\n    background: var(--background-selectable);\n  }\n}\n\n.shot.selected {\n  background: var(--background-selected);\n  .sticky {\n    background: var(--background-selected);\n  }\n}\n\n.sticky {\n  background: var(--background);\n  border-right: 1px solid $light-grey;\n  flex: 1;\n  left: 0;\n  padding: 0.5em;\n  position: sticky;\n  margin-right: 0;\n  width: 300px;\n  max-width: 300px;\n  z-index: 3;\n}\n\n.empty {\n  font-style: italic;\n  color: $grey;\n}\n\n.description-column,\n.metadata-descriptor,\n.frames-column,\n.standby-column {\n  align-items: flex-start;\n  align-self: stretch;\n  border-left: 1px solid $light-grey;\n  display: flex;\n  margin-right: 0;\n  padding-top: 0;\n\n  &:last-child {\n    border-right: 1px solid $light-grey;\n  }\n}\n\n.frames-column {\n  justify-content: right;\n  .metadata-value {\n    padding-right: 0.5em;\n    padding-top: 0.5em;\n  }\n  input {\n    text-align: right;\n  }\n}\n\n.standby-column {\n  padding-top: 1em;\n  min-width: 60px;\n  max-width: 60px;\n  justify-content: center;\n}\n\n.metadata-descriptor {\n  min-width: 119px;\n  max-width: 119px;\n}\n\n.description-column {\n  min-width: 250px;\n  max-width: 250px;\n\n  .tooltip-editor {\n    font-size: 0.85em;\n  }\n}\n\n.frames-column {\n  min-width: 81px;\n  max-width: 81px;\n}\n\n.tooltip-editor {\n  resize: none;\n}\n\ndiv .tooltip-text {\n  padding: 0.5rem;\n  word-break: break-all;\n}\n\n.metadata-value {\n  word-break: break-all;\n}\n\ndiv .input-editor,\ndiv .tooltip-editor {\n  color: $grey-strong;\n  padding: 0.5rem;\n  width: 100%;\n  background: transparent;\n  border: 1px solid transparent;\n\n  &:active,\n  &:focus,\n  &:hover {\n    background: transparent;\n    background: white;\n  }\n\n  &:active,\n  &:focus {\n    border: 1px solid $green;\n  }\n\n  &:hover {\n    border: 1px solid $light-green;\n  }\n\n  &:invalid {\n    color: $red;\n  }\n}\n\ndiv .input-editor {\n  height: 40px;\n}\n\ndiv .tooltip-editor {\n  height: 100%;\n}\n\n.metadata-descriptor .select {\n  color: var(--text);\n  margin: 0;\n  height: 40px;\n  width: 100%;\n  border: 1px solid transparent;\n\n  &::after {\n    border-color: transparent;\n  }\n\n  &:active,\n  &:focus,\n  &:hover {\n    &::after {\n      border-color: $green;\n    }\n  }\n\n  select {\n    color: var(--text);\n    height: 100%;\n    width: 100%;\n    background: transparent;\n    border-radius: 0;\n    border: 1px solid transparent;\n\n    &:focus {\n      border: 1px solid $green;\n      background: var(--background);\n      color: var(--text);\n    }\n\n    &:hover {\n      background: var(--background);\n      border: 1px solid $light-green;\n    }\n  }\n}\n\n.description-column .selectable,\n.metadata-descriptor .selectable {\n  padding: 0.5rem;\n}\n\n.stdby {\n  background: var(--background-disabled);\n  .sticky {\n    background: var(--background-disabled);\n  }\n}\n\n.thumbnail {\n  padding: 5px;\n}\n\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\ninput[type='number'] {\n  -moz-appearance: textfield; /* Firefox */\n}\n</style>\n","<template>\n  <div class=\"breakdown page\">\n    <div class=\"breakdown-columns\">\n      <div class=\"breakdown-column casting-column\">\n        <div class=\"flexrow mb1\">\n          <div v-if=\"isEpisodeCasting\">\n            <h2 class=\"subtitle mt05\">\n              {{ $t('breakdown.episode_casting') }}\n            </h2>\n          </div>\n          <combobox-styled\n            class=\"mr1\"\n            :label=\"$t('main.for')\"\n            :options=\"castingTypeOptions\"\n            v-model=\"castingType\"\n            v-if=\"!isEpisodeCasting\"\n          />\n          <combobox-styled\n            :label=\"$t('shots.fields.sequence')\"\n            :options=\"castingSequencesOptions\"\n            v-model=\"sequenceId\"\n            v-if=\"isShotCasting\"\n          />\n          <combobox-styled\n            :label=\"$t('tasks.fields.asset_type')\"\n            :options=\"castingAssetTypesOptions\"\n            v-model=\"assetTypeId\"\n            v-if=\"isAssetCasting\"\n          />\n          <span class=\"filler\"></span>\n          <show-infos-button class=\"flexrow-item\" :is-breakdown=\"true\" />\n          <button-simple\n            class=\"flexrow-item\"\n            :title=\"\n              isTextMode\n                ? $t('breakdown.picture_mode')\n                : $t('breakdown.text_mode')\n            \"\n            icon=\"type\"\n            :is-on=\"isTextMode\"\n            :is-responsive=\"true\"\n            @click=\"toggleTextMode\"\n          />\n          <button-simple\n            class=\"flexrow-item\"\n            icon=\"big-thumbnail\"\n            :is-on=\"isBigMode\"\n            :title=\"$t('tasks.big_thumbnails')\"\n            @click=\"isBigMode = !isBigMode\"\n          />\n          <button-simple\n            class=\"flexrow-item\"\n            :title=\"$t('main.csv.import_file')\"\n            icon=\"import\"\n            :is-responsive=\"true\"\n            @click=\"showImportModal\"\n            v-if=\"isCurrentUserManager\"\n          />\n          <button-simple\n            class=\"flexrow-item\"\n            icon=\"export\"\n            :is-responsive=\"true\"\n            :title=\"$t('main.csv.export_current_view')\"\n            @click=\"exportViewToCsv\"\n          />\n          <button-href-link\n            class=\"flexrow-item\"\n            :title=\"$t('main.csv.export_file')\"\n            icon=\"export-lines\"\n            :is-responsive=\"true\"\n            :path=\"exportUrlPath\"\n            v-if=\"isCurrentUserManager\"\n          />\n        </div>\n\n        <spinner class=\"mt1\" v-if=\"isLoading\" />\n\n        <div class=\"flexrow mb05 list-options\">\n          <table-metadata-selector-menu\n            ref=\"headerMetadataSelectorMenu\"\n            namespace=\"breakdown\"\n            :descriptors=\"metadataDescriptors\"\n            :exclude=\"{\n              fps: true,\n              estimation: true,\n              resolution: true,\n              maxRetakes: true,\n              timeSpent: true\n            }\"\n            :metadata-display-headers.sync=\"metadataDisplayHeaders\"\n            v-if=\"isShowInfosBreakdown\"\n            v-show=\"columnSelectorDisplayed\"\n          />\n          <span class=\"filler\"></span>\n\n          <button-simple\n            class=\"is-small mr05\"\n            icon=\"down\"\n            @click=\"toggleColumnSelector\"\n            v-if=\"isShowInfosBreakdown\"\n          />\n        </div>\n\n        <div\n          ref=\"casting-header\"\n          class=\"casting-header flexrow\"\n          v-scroll=\"onCastingHeaderScroll\"\n          v-if=\"!isLoading\"\n        >\n          <div\n            class=\"entity-header\"\n            ref=\"name-header\"\n            :style=\"{\n              'min-width': columnWidth.name ? columnWidth.name + 'px' : '250px'\n            }\"\n          >\n            <div>\n              {{ $t('shots.fields.name') }}\n            </div>\n            <div class=\"filler\"></div>\n            <div\n              ref=\"resizable-knob-name\"\n              class=\"resizable-knob\"\n              @mousedown.prevent=\"\n                initResize('resizable-knob-name', 'name-header')\n              \"\n            ></div>\n          </div>\n          <div class=\"standby-header\" v-if=\"isShowInfosBreakdown\">\n            {{ $t('breakdown.fields.standby') }}\n          </div>\n          <div\n            class=\"description-header\"\n            v-if=\"isShowInfosBreakdown && isDescription\"\n          >\n            {{ $t('shots.fields.description') }}\n          </div>\n          <div\n            class=\"frames-header\"\n            v-if=\"\n              isShotCasting &&\n              isFrames &&\n              isShowInfosBreakdown &&\n              metadataDisplayHeaders.frames\n            \"\n          >\n            {{ $t('shots.fields.nb_frames') }}\n          </div>\n          <div\n            class=\"frames-header\"\n            v-if=\"\n              isShotCasting &&\n              isFrameIn &&\n              isShowInfosBreakdown &&\n              metadataDisplayHeaders.frameIn\n            \"\n          >\n            {{ $t('shots.fields.frame_in') }}\n          </div>\n          <div\n            class=\"frames-header\"\n            v-if=\"\n              isShotCasting &&\n              isFrameOut &&\n              isShowInfosBreakdown &&\n              metadataDisplayHeaders.frameOut\n            \"\n          >\n            {{ $t('shots.fields.frame_out') }}\n          </div>\n          <div\n            class=\"descriptor-header\"\n            :key=\"'descriptor-header-' + descriptor.id\"\n            :ref=\"'descriptor-header-' + descriptor.id\"\n            :style=\"{\n              'min-width': columnWidth[descriptor.id]\n                ? columnWidth[descriptor.id] + 'px'\n                : '110px'\n            }\"\n            v-for=\"descriptor in visibleMetadataDescriptors\"\n            v-show=\"isShowInfosBreakdown\"\n          >\n            <div\n              class=\"mr1\"\n              v-if=\"descriptorCurrentDepartments(descriptor).length\"\n            >\n              <department-name\n                :key=\"department.id\"\n                :department=\"department\"\n                no-padding\n                only-dot\n                v-for=\"department in descriptorCurrentDepartments(descriptor)\"\n              />\n            </div>\n            <span\n              class=\"flexrow-item ellipsis descriptor-name filler\"\n              :title=\"descriptor.name\"\n            >\n              {{ descriptor.name }}\n            </span>\n            <div\n              :ref=\"'resizable-knob-descriptor-' + descriptor.id\"\n              class=\"resizable-knob\"\n              @mousedown.prevent=\"\n                initResize(\n                  'resizable-knob-descriptor-',\n                  'descriptor-header-',\n                  descriptor.id\n                )\n              \"\n            ></div>\n          </div>\n          <div\n            :key=\"assetType\"\n            class=\"asset-type-header\"\n            v-for=\"assetType in castingAssetTypes\"\n          >\n            {{ assetType }}\n          </div>\n\n          <div class=\"actions filler\"></div>\n        </div>\n\n        <div\n          ref=\"casting-list\"\n          class=\"casting-list\"\n          v-scroll=\"onCastingScroll\"\n          v-if=\"!isLoading\"\n        >\n          <div class=\"shot-lines\">\n            <shot-line\n              :key=\"entity.id\"\n              :entity=\"entity\"\n              :preview-file-id=\"entity.preview_file_id\"\n              :selected=\"selection[entity.id]\"\n              :name=\"getEntityName(entity)\"\n              :assets=\"castingByType[entity.id] || []\"\n              :asset-types=\"castingAssetTypes\"\n              :read-only=\"!isCurrentUserManager\"\n              :text-mode=\"isTextMode\"\n              :metadata-descriptors=\"metadataDescriptors\"\n              :metadata-display-headers=\"metadataDisplayHeaders\"\n              :big-mode=\"isBigMode\"\n              :is-description=\"isDescription\"\n              :is-save-error=\"saveErrors[entity.id]\"\n              :column-width=\"columnWidth\"\n              @add-one=\"addOneAsset\"\n              @click=\"selectEntity\"\n              @description-changed=\"onDescriptionChanged\"\n              @edit-label=\"onEditLabelClicked\"\n              @metadata-changed=\"onMetadataChanged\"\n              @remove-one=\"removeOneAssetFromSelection\"\n              @standby-changed=\"onStandbyChanged\"\n              v-for=\"entity in castingEntities\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div\n        ref=\"asset-list\"\n        v-scroll=\"onAssetListScroll\"\n        class=\"breakdown-column assets-column\"\n        v-if=\"isCurrentUserManager\"\n      >\n        <h2 class=\"subtitle\">\n          {{ $t('breakdown.all_assets') }}\n        </h2>\n        <div class=\"flexrow mt1 mb1\">\n          <button-simple\n            class=\"flexrow-item\"\n            :title=\"$t('assets.new_asset')\"\n            icon=\"plus\"\n            @click=\"modals.isNewDisplayed = true\"\n            v-if=\"!isOnlyCurrentEpisode\"\n          />\n          <span class=\"filler\"></span>\n\n          <button-simple\n            class=\"flexrow-item\"\n            :text=\"$t('breakdown.show_library')\"\n            icon=\"assets\"\n            :is-on=\"libraryDisplayed\"\n            @click=\"libraryDisplayed = !libraryDisplayed\"\n            v-if=\"!isOnlyCurrentEpisode\"\n          />\n          <button-simple\n            class=\"flexrow-item\"\n            :text=\"$t('assets.only_current_episode')\"\n            :is-on=\"isOnlyCurrentEpisode\"\n            @click=\"isOnlyCurrentEpisode = !isOnlyCurrentEpisode\"\n            v-if=\"isTVShow && !isEpisodeCasting\"\n          />\n        </div>\n\n        <div class=\"filters-area flexrow\">\n          <search-field\n            class=\"flexrow-item\"\n            ref=\"search-field\"\n            :can-save=\"true\"\n            @save=\"saveSearchQuery\"\n            @change=\"onSearchChange\"\n          />\n          <button-simple\n            class=\"flexrow-item\"\n            :title=\"$t('entities.build_filter.title')\"\n            icon=\"filter\"\n            @click=\"modals.isBuildFilterDisplayed = true\"\n          />\n        </div>\n        <div class=\"query-list\">\n          <search-query-list\n            :groups=\"breakdownSearchFilterGroups\"\n            :is-group-enabled=\"true\"\n            :queries=\"breakdownSearchQueries\"\n            type=\"breakdown\"\n            @change-search=\"changeSearch\"\n            @remove-search=\"removeSearchQuery\"\n          />\n        </div>\n\n        <spinner v-if=\"isAssetsLoading\" />\n        <div\n          class=\"type-assets\"\n          :key=\"typeAssets.length > 0 ? typeAssets[0].asset_type_name : ''\"\n          v-for=\"typeAssets in availableAssetsByType\"\n          v-else\n        >\n          <div class=\"asset-type\">\n            {{ typeAssets.length > 0 ? typeAssets[0].asset_type_name : '' }}\n          </div>\n          <div class=\"asset-list\">\n            <available-asset-block\n              :key=\"asset.id\"\n              :asset=\"asset\"\n              :active=\"Object.keys(selection).length > 0\"\n              :text-mode=\"isTextMode\"\n              :big-mode=\"isBigMode\"\n              @add-one=\"addOneAsset\"\n              @add-ten=\"addTenAssets\"\n              v-for=\"asset in typeAssets\"\n              v-show=\"libraryDisplayed || !asset.shared\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <import-render-modal\n      :active=\"modals.isImportRenderDisplayed\"\n      :is-loading=\"loading.importing\"\n      :is-error=\"errors.importing\"\n      :import-error=\"errors.importingError\"\n      :parsed-csv=\"parsedCSV\"\n      :form-data=\"importCsvFormData\"\n      :columns=\"renderColumns\"\n      :data-matchers=\"dataMatchers\"\n      :database=\"filteredCasting\"\n      :disable-update=\"true\"\n      @reupload=\"resetImport\"\n      @cancel=\"hideImportRenderModal\"\n      @confirm=\"uploadImportFile\"\n    />\n\n    <import-modal\n      ref=\"import-modal\"\n      :active=\"modals.importing\"\n      :is-loading=\"loading.importing\"\n      :is-error=\"errors.importing\"\n      :form-data=\"importCsvFormData\"\n      :columns=\"csvColumns\"\n      :optional-columns=\"optionalCsvColumns\"\n      @cancel=\"hideImportModal\"\n      @confirm=\"renderImport\"\n    />\n\n    <edit-label-modal\n      ref=\"edit-label-modal\"\n      :active=\"modals.isEditLabelDisplayed\"\n      :is-loading=\"loading.editLabel\"\n      :is-error=\"loading.editError\"\n      :asset=\"editedAsset\"\n      :label=\"editedAssetLinkLabel\"\n      @cancel=\"modals.isEditLabelDisplayed = false\"\n      @confirm=\"confirmEditLabel\"\n    />\n\n    <build-filter-modal\n      ref=\"build-filter-modal\"\n      :active=\"modals.isBuildFilterDisplayed\"\n      @confirm=\"confirmBuildFilter\"\n      @cancel=\"modals.isBuildFilterDisplayed = false\"\n    />\n\n    <edit-asset-modal\n      ref=\"edit-asset-modal\"\n      :active=\"modals.isNewDisplayed\"\n      :asset-to-edit=\"{}\"\n      :is-error=\"errors.edit\"\n      :is-loading=\"loading.edit\"\n      :is-loading-stay=\"loading.stay\"\n      :is-success=\"success.edit\"\n      @confirm=\"confirmNewAsset\"\n      @confirmAndStay=\"confirmNewAssetStay\"\n      @cancel=\"modals.isNewDisplayed = false\"\n    />\n\n    <delete-modal\n      :active=\"modals.isRemoveConfirmationDisplayed\"\n      :delete-button-text=\"$t('breakdown.remove.confirm')\"\n      :error-text=\"$t('breakdown.remove.error')\"\n      :is-loading=\"loading.remove\"\n      :is-error=\"loading.error\"\n      :text=\"$t('breakdown.remove.text')\"\n      @confirm=\"confirmAssetRemoval\"\n      @cancel=\"modals.isRemoveConfirmationDisplayed = false\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport moment from 'moment'\n\nimport csv from '@/lib/csv'\nimport clipboard from '@/lib/clipboard'\nimport preferences from '@/lib/preferences'\nimport stringHelpers from '@/lib/string'\nimport { range } from '@/lib/time'\nimport { searchMixin } from '@/components/mixins/search'\nimport { entityListMixin } from '@/components/mixins/entity_list'\n\nimport AvailableAssetBlock from '@/components/pages/breakdown/AvailableAssetBlock.vue'\nimport BuildFilterModal from '@/components/modals/BuildFilterModal.vue'\nimport ButtonHrefLink from '@/components/widgets/ButtonHrefLink.vue'\nimport ButtonSimple from '@/components/widgets/ButtonSimple.vue'\nimport ComboboxStyled from '@/components/widgets/ComboboxStyled.vue'\nimport DeleteModal from '@/components/modals/DeleteModal.vue'\nimport DepartmentName from '@/components/widgets/DepartmentName.vue'\nimport EditAssetModal from '@/components/modals/EditAssetModal.vue'\nimport EditLabelModal from '@/components/modals/EditLabelModal.vue'\nimport ImportRenderModal from '@/components/modals/ImportRenderModal.vue'\nimport ImportModal from '@/components/modals/ImportModal.vue'\nimport SearchField from '@/components/widgets/SearchField.vue'\nimport SearchQueryList from '@/components/widgets/SearchQueryList.vue'\nimport ShotLine from '@/components/pages/breakdown/ShotLine.vue'\nimport ShowInfosButton from '@/components/widgets/ShowInfosButton.vue'\nimport Spinner from '@/components/widgets/Spinner.vue'\nimport TableMetadataSelectorMenu from '@/components/widgets/TableMetadataSelectorMenu.vue'\n\nexport default {\n  name: 'breakdown',\n\n  mixins: [entityListMixin, searchMixin],\n\n  components: {\n    AvailableAssetBlock,\n    BuildFilterModal,\n    ButtonHrefLink,\n    ButtonSimple,\n    ComboboxStyled,\n    DeleteModal,\n    DepartmentName,\n    EditAssetModal,\n    EditLabelModal,\n    ImportModal,\n    ImportRenderModal,\n    SearchField,\n    SearchQueryList,\n    ShotLine,\n    ShowInfosButton,\n    Spinner,\n    TableMetadataSelectorMenu\n  },\n\n  data() {\n    return {\n      assetTypeId: '',\n      castingType: 'shot',\n      columnSelectorDisplayed: false,\n      editedAsset: null,\n      editedEntityId: null,\n      editedAssetLinkLabel: null,\n      episodeId: '',\n      importCsvFormData: {},\n      isBigMode: false,\n      isLocked: false,\n      isLoading: false,\n      isOnlyCurrentEpisode: false,\n      isTextMode: false,\n      libraryDisplayed: false,\n      optionalCsvColumns: ['Label'],\n      parsedCSV: [],\n      removalData: {},\n      saveErrors: {},\n      selection: {},\n      sequenceId: 'all',\n      errors: {\n        edit: false,\n        editLabel: false,\n        importing: false,\n        importingError: null,\n        remove: false,\n        stay: false\n      },\n      loading: {\n        edit: false,\n        editLabel: false,\n        importing: false,\n        remove: false,\n        stay: false\n      },\n      metadataDisplayHeaders: {\n        stdby: true,\n        fps: false,\n        frameIn: true,\n        frameOut: true,\n        frames: true,\n        estimation: false,\n        maxRetakes: false,\n        resolution: false,\n        timeSpent: false\n      },\n      modals: {\n        isBuildFilterDisplayed: false,\n        isEditLabelDisplayed: false,\n        isNewDisplayed: false,\n        isImportRenderDisplayed: false,\n        isRemoveConfirmationDisplayed: false,\n        importing: false\n      },\n      success: {\n        edit: false\n      },\n      columnWidth: {}\n    }\n  },\n\n  mounted() {\n    if (!this.isLoading) {\n      this.reset()\n    }\n    this.resetSequenceOption()\n    this.setLastProductionScreen('breakdown')\n    this.isTextMode = preferences.getBoolPreference('breakdown:text-mode')\n    window.addEventListener('keydown', this.onKeyDown, false)\n\n    this.resetDisplayHeaders()\n    this.resetColumnWidth()\n  },\n\n  beforeDestroy() {\n    window.removeEventListener('keydown', this.onKeyDown)\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetMap',\n      'assetMetadataDescriptors',\n      'assetTypeMap',\n      'assetsByType',\n      'breakdownSearchQueries',\n      'breakdownSearchFilterGroups',\n      'casting',\n      'castingAssetTypeAssets',\n      'castingAssetTypesOptions',\n      'castingByType',\n      'castingCurrentShot',\n      'castingEpisodes',\n      'castingSequenceShots',\n      'castingSequencesOptions',\n      'currentEpisode',\n      'currentProduction',\n      'departmentMap',\n      'displayedSequences',\n      'displayedShots',\n      'episodeMap',\n      'episodes',\n      'isAssetsLoading',\n      'isCurrentUserManager',\n      'isFrameIn',\n      'isFrameOut',\n      'isFrames',\n      'isShotsLoading',\n      'isShowInfosBreakdown',\n      'isTVShow',\n      'sequenceMap',\n      'shotMap',\n      'shotMetadataDescriptors'\n    ]),\n\n    searchField() {\n      return this.$refs['search-field']\n    },\n\n    castingTypeOptions() {\n      const isAssetsOnly = this.currentProduction.production_type === 'assets'\n      const isShotsOnly = this.currentProduction.production_type === 'shots'\n      const options = []\n      if (!isShotsOnly) {\n        options.push({\n          label: this.$t('assets.title'),\n          value: 'asset'\n        })\n      }\n      if (\n        !isAssetsOnly &&\n        (!this.isTVShow ||\n          (this.currentEpisode && this.currentEpisode.id !== 'main'))\n      ) {\n        options.unshift({\n          label: this.$t('shots.title'),\n          value: 'shot'\n        })\n      }\n      return options\n    },\n\n    availableAssetsByType() {\n      const result = []\n      this.assetsByType.forEach(typeGroup => {\n        let newGroup = typeGroup.filter(asset => !asset.canceled)\n        if (this.isTVShow && this.isOnlyCurrentEpisode) {\n          newGroup = typeGroup.filter(asset => {\n            return (\n              asset.episode_id === this.currentEpisode.id ||\n              asset.casting_episode_ids?.includes(this.currentEpisode.id)\n            )\n          })\n        }\n        if (newGroup.length > 0) result.push(newGroup)\n      })\n      return result\n    },\n\n    exportUrlPath() {\n      let path = `/api/export/csv/projects/${this.currentProduction.id}/casting.csv`\n      let paramAdded = false\n      if (this.currentEpisode) {\n        path += `?episode_id=${this.currentEpisode.id}`\n        paramAdded = true\n      }\n      if (this.isShotCasting) {\n        path += `${paramAdded ? '&' : '?'}is_shot_casting=${this.isShotCasting}`\n      }\n      return path\n    },\n\n    isEpisodeCasting() {\n      return this.currentEpisode && this.currentEpisode.id === 'all'\n    },\n\n    isAssetCasting() {\n      return !this.isEpisodeCasting && this.castingType === 'asset'\n    },\n\n    isShotCasting() {\n      return !this.isEpisodeCasting && this.castingType === 'shot'\n    },\n\n    castingEntities() {\n      if (this.isEpisodeCasting) {\n        return this.castingEpisodes\n      } else if (this.isShotCasting) {\n        return this.castingSequenceShots\n      } else {\n        if (\n          this.isTVShow &&\n          this.currentEpisode &&\n          this.currentEpisode.id !== 'main'\n        ) {\n          return this.castingAssetTypeAssets.filter(\n            asset =>\n              asset.episode_id === this.currentEpisode.id ||\n              asset.casting_episode_ids?.includes(this.currentEpisode.id)\n          )\n        } else if (this.isTVShow && this.currentEpisode.id === 'main') {\n          return this.castingAssetTypeAssets.filter(asset => !asset.episode_id)\n        } else {\n          return this.castingAssetTypeAssets\n        }\n      }\n    },\n\n    castingAssetTypes() {\n      const castingAssetTypes = []\n      const assetTypeNameMap = {}\n      this.castingEntities.forEach(entity => {\n        if (this.castingByType[entity.id]) {\n          this.castingByType[entity.id].forEach(type => {\n            if (type[0] && !assetTypeNameMap[type[0].asset_type_name]) {\n              assetTypeNameMap[type[0].asset_type_name] = true\n              castingAssetTypes.push(type[0].asset_type_name)\n            }\n          })\n        }\n      })\n      return castingAssetTypes.sort()\n    },\n\n    editLabelModal() {\n      return this.$refs['edit-label-modal']\n    },\n\n    filteredCasting() {\n      const casting = {}\n      this.castingEntities.forEach(entity => {\n        if (this.castingByType[entity.id]) {\n          this.castingByType[entity.id].forEach(type => {\n            type.forEach(item => {\n              const castKey = `${item.asset_name}${item.asset_type_name}${item.name}`\n              casting[castKey] = true\n            })\n          })\n        }\n      })\n      return casting\n    },\n\n    isDescription() {\n      return this.castingEntities.some(\n        e => e.description && e.description.length > 0\n      )\n    },\n\n    csvColumns() {\n      return this.isTVShow && this.currentEpisode?.id !== 'all'\n        ? ['Episode', 'Parent', 'Name', 'Asset Type', 'Asset', 'Occurences']\n        : ['Parent', 'Name', 'Asset Type', 'Asset', 'Occurences']\n    },\n\n    renderColumns() {\n      return [...this.csvColumns, ...this.optionalCsvColumns]\n    },\n\n    dataMatchers() {\n      return this.isTVShow\n        ? ['Episode', 'Name', 'Asset Type', 'Asset']\n        : ['Name', 'Asset Type', 'Asset']\n    },\n\n    metadataDescriptors() {\n      if (this.isEpisodeCasting) {\n        return []\n      } else if (this.isShotCasting) {\n        return this.shotMetadataDescriptors\n      } else {\n        return this.assetMetadataDescriptors\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'addAssetToCasting',\n      'editEpisode',\n      'editShot',\n      'editAsset',\n      'displayMoreAssets',\n      'loadEpisodeCasting',\n      'loadEpisodes',\n      'loadAssetCasting',\n      'loadAssets',\n      'loadShotCasting',\n      'loadShots',\n      'newAsset',\n      'removeAssetFromCasting',\n      'removeBreakdownSearch',\n      'saveBreakdownSearch',\n      'loadSequences',\n      'saveBreakdownSearchFilterGroup',\n      'saveCasting',\n      'setAssetLinkLabel',\n      'setAssetSearch',\n      'setCastingEpisodes',\n      'setCastingAssetType',\n      'setCastingAssetTypes',\n      'setCastingEpisode',\n      'setCastingForProductionEpisodes',\n      'setCastingSequence',\n      'setCurrentEpisode',\n      'setEntityCasting',\n      'setLastProductionScreen',\n      'uploadCastingFile'\n    ]),\n\n    reset() {\n      if (!this.isTVShow) {\n        const route = { ...this.$route }\n        if (route && route.params && route.params.episode_id) {\n          route.name = 'breakdown'\n          route.params.episode_id = null\n          this.$router.push(route)\n        }\n      }\n      this.isLoading = true\n      setTimeout(() => {\n        this.reloadEntities()\n      }, 100)\n    },\n\n    async reloadEntities() {\n      this.isLoading = true\n      await this.loadSequences()\n      await this.loadShots()\n      if (this.isTVShow) {\n        if (this.currentEpisode) {\n          this.episodeId = this.currentEpisode.id\n        }\n        this.setCastingEpisode(this.episodeId)\n        this.setCastingForProductionEpisodes()\n      } else {\n        this.setCastingEpisode(null)\n      }\n      this.loadAssets({ all: true, withTasks: true }).then(() => {\n        this.isLoading = false\n        this.displayMoreAssets()\n        this.setCastingAssetTypes()\n        if (this.assetTypeId) {\n          this.setCastingAssetType(this.assetTypeId)\n        } else {\n          this.setCastingSequence(this.sequenceId || 'all')\n        }\n        this.resetSequenceOption()\n        this.resetSelection()\n        if (\n          (this.currentEpisode && this.currentEpisode.id === 'main') ||\n          this.currentProduction.production_type === 'assets'\n        ) {\n          this.castingType = 'asset'\n        }\n      })\n    },\n\n    resetSequenceOption() {\n      if (this.currentProduction.production_style === 'nft') {\n        this.sequenceId = this.castingSequencesOptions[1].value\n      }\n    },\n\n    resetSelection() {\n      const selection = {}\n      if (this.isEpisodeCasting) {\n        this.castingEpisodes.forEach(episode => {\n          selection[episode.id] = false\n        })\n      } else if (this.isShotCasting) {\n        this.castingSequenceShots.forEach(shot => {\n          selection[shot.id] = false\n        })\n      } else {\n        this.castingAssetTypeAssets.forEach(asset => {\n          selection[asset.id] = false\n        })\n      }\n      this.selection = selection\n    },\n\n    confirmBuildFilter(query) {\n      this.modals.isBuildFilterDisplayed = false\n      this.$refs['search-field'].setValue(query)\n      this.onSearchChange(query)\n    },\n\n    onSearchChange(searchQuery) {\n      this.setAssetSearch(searchQuery)\n      this.displayMoreAssets()\n      this.displayMoreAssets()\n    },\n\n    selectEntity(entityId, event) {\n      const previousSelection = { ...this.selection }\n      if (!(event.ctrlKey || event.metaKey) && !event.shitKey) {\n        this.clearSelection()\n      }\n\n      if (this.previousEntityId && event.shiftKey) {\n        this.selectRange(this.previousEntityId, entityId)\n      }\n\n      if (!this.previousEntityId || !event.shiftKey) {\n        this.previousEntityId = entityId\n      }\n\n      const nbElementsSelected = Object.keys(previousSelection).filter(\n        k => previousSelection[k]\n      ).length\n      if (\n        !previousSelection[entityId] ||\n        (nbElementsSelected > 1 && !(event.ctrlKey || event.metaKey))\n      ) {\n        this.selection[entityId] = true\n      } else if (\n        previousSelection[entityId] &&\n        (event.ctrlKey || event.metaKey)\n      ) {\n        this.selection[entityId] = false\n      }\n    },\n\n    clearSelection() {\n      Object.keys(this.selection)\n        .filter(k => this.selection[k])\n        .forEach(shotId => {\n          this.selection[shotId] = false\n        })\n    },\n\n    selectRange(previousEntityId, entityId) {\n      const keys = Object.keys(this.selection)\n      const previousIndex = keys.findIndex(k => k === previousEntityId)\n      const index = keys.findIndex(k => k === entityId)\n\n      let indexRange = []\n      if (previousIndex < index) indexRange = range(previousIndex, index)\n      else indexRange = range(index, previousIndex)\n\n      indexRange.forEach(i => {\n        if (i >= 0) this.selection[keys[i]] = true\n      })\n    },\n\n    setLock() {\n      if (!this.$options.lockTimeout) {\n        this.$options.lockTimeout = setTimeout(() => {\n          this.isLocked = false\n        }, 3000)\n      }\n    },\n\n    async addOneAsset(assetId, amount = 1) {\n      this.isLocked = true\n      const entityIds = Object.keys(this.selection).filter(\n        key => this.selection[key]\n      )\n\n      for (const entityId of entityIds) {\n        this.addAssetToCasting({\n          entityId,\n          assetId,\n          nbOccurences: amount,\n          label: this.castingType === 'shot' ? 'animate' : 'fixed'\n        })\n\n        delete this.saveErrors[entityId]\n\n        try {\n          await this.saveCasting(entityId)\n          this.setLock()\n        } catch (err) {\n          this.saveErrors[entityId] = true\n          console.error(err)\n        }\n      }\n    },\n\n    async addTenAssets(assetId) {\n      this.addOneAsset(assetId, 10)\n    },\n\n    confirmAssetRemoval() {\n      this.saveAssetRemoval(\n        this.removalData.entityId,\n        this.removalData.assetId,\n        this.removalData.nbOccurences\n      )\n    },\n\n    saveAssetRemoval(entityId, assetId, nbOccurences) {\n      this.loading.remove = true\n      this.removeAssetFromCasting({ entityId, assetId, nbOccurences })\n      delete this.saveErrors[entityId]\n      return this.saveCasting(entityId)\n        .then(() => {\n          this.setLock()\n          this.modals.isRemoveConfirmationDisplayed = false\n        })\n        .catch(err => {\n          this.saveErrors[entityId] = true\n          this.errors.remove = true\n          console.error(err)\n        })\n        .finally(() => {\n          this.loading.remove = false\n        })\n    },\n\n    async removeOneAssetFromSelection(assetId) {\n      const entityIds = Object.keys(this.selection).filter(\n        key => this.selection[key]\n      )\n\n      for (const entityId of entityIds) {\n        const nbOccurences = this.casting[entityId].find(\n          asset => asset.asset_id === assetId\n        ).nb_occurences\n        await this.removeOneAsset(assetId, entityId, nbOccurences)\n      }\n    },\n\n    removeOneAsset(assetId, entityId, nbOccurences) {\n      this.isLocked = true\n      if (this.isEpisodeCasting && nbOccurences === 1) {\n        this.removalData = { assetId, entityId, nbOccurences }\n        this.modals.isRemoveConfirmationDisplayed = true\n        return Promise.resolve()\n      } else {\n        return this.saveAssetRemoval(entityId, assetId, 1)\n      }\n    },\n\n    onAssetListScroll(event, position) {\n      const assetList = this.$refs['asset-list']\n      const maxHeight = assetList.scrollHeight - assetList.offsetHeight\n      if (maxHeight < position.scrollTop + 100) {\n        this.displayMoreAssets()\n      }\n    },\n\n    showImportModal() {\n      this.modals.importing = true\n    },\n\n    hideImportModal() {\n      this.modals.importing = false\n    },\n\n    showImportRenderModal() {\n      this.modals.isImportRenderDisplayed = true\n    },\n\n    hideImportRenderModal() {\n      this.modals.isImportRenderDisplayed = false\n    },\n\n    renderImport(data, mode) {\n      this.loading.importing = true\n      this.errors.importing = false\n      if (mode === 'file') {\n        data = data.get('file')\n      }\n      csv.processCSV(data).then(results => {\n        this.parsedCSV = results\n        this.hideImportModal()\n        this.loading.importing = false\n        this.showImportRenderModal()\n      })\n    },\n\n    uploadImportFile(data) {\n      const formData = new FormData()\n      const filename = 'import.csv'\n      const csvContent = csv.turnEntriesToCsvString(data)\n      const file = new File([csvContent], filename, { type: 'text/csv' })\n\n      formData.append('file', file)\n\n      this.loading.importing = true\n      this.errors.importing = false\n      this.errors.importingError = null\n      this.importCsvFormData = formData\n\n      this.uploadCastingFile(this.importCsvFormData)\n        .then(() => {\n          this.hideImportRenderModal()\n          if (this.sequenceId) {\n            this.setCastingSequence(this.sequenceId || 'all')\n          }\n        })\n        .catch(err => {\n          this.errors.importingError = err\n          this.errors.importing = true\n        })\n        .finally(() => {\n          this.loading.importing = false\n        })\n    },\n\n    resetImport() {\n      this.errors.importing = false\n      this.errors.importingError = null\n      this.hideImportRenderModal()\n      this.importCsvFormData = undefined\n      this.$refs['import-modal'].reset()\n      this.showImportModal()\n    },\n\n    updateUrl() {\n      let isChange = false\n      let route = {}\n      if (this.isEpisodeCasting) {\n        const episodeId = this.$route.params.episode_id\n        if (episodeId !== this.episodeId) {\n          isChange = true\n          route = {\n            name: 'breakdown-episode',\n            params: {\n              production_id: this.currentProduction.id,\n              episode_id: this.episodeId\n            }\n          }\n        }\n      } else if (this.isAssetCasting) {\n        const assetTypeId = this.$route.params.asset_type_id || ''\n        if (assetTypeId !== this.assetTypeId) {\n          isChange = true\n          route = {\n            name: 'breakdown-asset-type',\n            params: {\n              production_id: this.currentProduction.id,\n              asset_type_id: this.assetTypeId\n            }\n          }\n        }\n      } else {\n        const sequenceId = this.$route.params.sequence_id || 'all'\n        if (sequenceId !== this.sequenceId) {\n          isChange = true\n          route = {\n            name: 'breakdown-sequence',\n            params: {\n              production_id: this.currentProduction.id,\n              sequence_id: this.sequenceId || 'all'\n            }\n          }\n        }\n      }\n      if (isChange) {\n        let episodeId = this.$route.params.episode_id\n        if (!episodeId && this.currentEpisode) {\n          episodeId = this.currentEpisode.id\n        }\n        if (episodeId) {\n          route.name = `episode-${route.name}`\n          route.params.episode_id = episodeId\n          if (episodeId === 'all') route.params.sequence_id = 'all'\n        }\n        this.$router.push(route)\n      }\n    },\n\n    onEditLabelClicked(asset, label, entityId) {\n      this.editedAsset = asset\n      this.editedEntityId = entityId\n      this.editedAssetLinkLabel = label\n      this.modals.isEditLabelDisplayed = true\n    },\n\n    confirmEditLabel(form = {}) {\n      const label = form.label\n      this.loading.editLabel = true\n      this.setAssetLinkLabel({\n        label: label,\n        asset: this.editedAsset,\n        targetEntityId: this.editedEntityId\n      })\n        .then(() => {\n          this.modals.isEditLabelDisplayed = false\n          this.loading.editLabel = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.editLabel = true\n          this.loading.editLabel = false\n        })\n    },\n\n    toggleTextMode() {\n      this.isTextMode = !this.isTextMode\n      localStorage.setItem('breakdown:text-mode', this.isTextMode)\n    },\n\n    toggleColumnSelector() {\n      this.columnSelectorDisplayed = !this.columnSelectorDisplayed\n    },\n\n    confirmNewAssetStay(form) {\n      this.loading.stay = true\n      this.success.edit = false\n      this.newAsset(form)\n        .then(asset => {\n          this.loading.stay = false\n          this.loading.edit = false\n          this.resetLightEditModal(asset)\n          this.$refs['edit-asset-modal'].focusName()\n          this.success.edit = true\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.stay = false\n          this.loading.edit = false\n          this.success.edit = false\n          this.errors.edit = true\n        })\n    },\n\n    confirmNewAsset(form) {\n      this.loading.edit = true\n      this.errors.edit = false\n      this.newAsset(form)\n        .then(() => {\n          this.loading.edit = false\n          this.modals.isNewDisplayed = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.edit = false\n          this.errors.edit = true\n        })\n    },\n\n    resetLightEditModal(asset) {\n      const form = {\n        name: '',\n        entity_type_id: asset.entit_type_id,\n        production_id: this.currentProduction.id\n      }\n      this.assetToEdit = form\n    },\n\n    onKeyDown(event) {\n      if (!['INPUT', 'TEXTAREA'].includes(event.target.tagName)) {\n        if ((event.ctrlKey || event.metaKey) && event.keyCode === 67) {\n          // ctrl + c\n          this.copyCasting()\n        } else if ((event.ctrlKey || event.metaKey) && event.keyCode === 86) {\n          // ctrl + v\n          this.pasteCasting()\n        }\n      }\n    },\n\n    copyCasting() {\n      const selectedElementId = Object.keys(this.selection).find(\n        key => this.selection[key]\n      )\n      const selectedCasting = this.casting[selectedElementId]\n      clipboard.copyCasting(selectedCasting)\n    },\n\n    async pasteCasting() {\n      const castingToPaste = clipboard.pasteCasting()\n      if (!castingToPaste || castingToPaste.length === 0) return\n      const selectedElements = Object.keys(this.selection).filter(\n        key => this.selection[key]\n      )\n      for (const entityId of selectedElements) {\n        this.setEntityCasting({\n          entityId,\n          casting: castingToPaste\n        })\n        delete this.saveErrors[entityId]\n        await this.saveCasting(entityId)\n          .then(this.setLock)\n          .catch(err => {\n            this.saveErrors[entityId] = true\n            console.error(err)\n          })\n      }\n      return castingToPaste\n    },\n\n    onMetadataChanged({ entry, descriptor, value }) {\n      const metadata = {}\n      metadata[descriptor.field_name] = value\n      const data = {\n        id: entry.id,\n        data: metadata\n      }\n      if (this.isEpisodeCasting) {\n        this.editEpisode(data)\n      } else if (this.isShotCasting) {\n        this.editShot(data)\n      } else {\n        this.editAsset(data)\n      }\n    },\n\n    onDescriptionChanged(entity, value) {\n      const data = {\n        id: entity.id,\n        description: value\n      }\n      if (this.isEpisodeCasting) {\n        this.editEpisode(data)\n      } else if (this.isShotCasting) {\n        this.editShot(data)\n      } else {\n        this.editAsset(data)\n      }\n    },\n\n    onStandbyChanged(entity, value) {\n      const data = {\n        id: entity.id,\n        is_casting_standby: value\n      }\n      if (this.isEpisodeCasting) {\n        this.editEpisode(data)\n      } else if (this.isShotCasting) {\n        this.editShot(data)\n      } else {\n        this.editAsset(data)\n      }\n    },\n\n    descriptorCurrentDepartments(descriptor) {\n      const departemts = descriptor.departments || []\n      return departemts.map(departmentId =>\n        this.departmentMap.get(departmentId)\n      )\n    },\n\n    getEntityName(entity) {\n      return this.sequenceId === 'all' &&\n        (!this.isTVShow || (this.isTVShow && this.currentEpisode.id !== 'all'))\n        ? entity.sequence_name + ' / ' + entity.name\n        : entity.name\n    },\n\n    getCsvFileName() {\n      const nameData = [\n        moment().format('YYYY-MM-DD'),\n        'kitsu',\n        this.castingType + 's',\n        this.currentProduction.name,\n        this.$t('breakdown.title')\n      ]\n      if (this.isTVShow) {\n        if (this.currentEpisode) {\n          if (this.currentEpisode.id === 'all') {\n            nameData.splice(4, 0, 'all')\n          } else if (this.currentEpisode.id === 'main') {\n            nameData.splice(4, 0, 'main pack')\n            if (this.assetTypeId !== 'all' && this.castingType === 'asset') {\n              nameData.splice(\n                5,\n                0,\n                this.assetTypeMap.get(this.assetTypeId).name\n              )\n            }\n          } else {\n            nameData.splice(4, 0, this.currentEpisode.name)\n            if (this.sequenceId !== 'all' && this.castingType === 'shot') {\n              nameData.splice(5, 0, this.sequenceMap.get(this.sequenceId).name)\n            }\n            if (this.assetTypeId !== 'all' && this.castingType === 'asset') {\n              nameData.splice(\n                5,\n                0,\n                this.assetTypeMap.get(this.assetTypeId).name\n              )\n            }\n          }\n        }\n      } else {\n        if (this.sequenceId !== 'all' && this.castingType === 'shot') {\n          nameData.splice(5, 0, this.sequenceMap.get(this.sequenceId).name)\n        }\n        if (this.assetTypeId !== 'all' && this.castingType === 'asset') {\n          nameData.splice(5, 0, this.assetTypeMap.get(this.assetTypeId).name)\n        }\n      }\n      return stringHelpers.slugify(nameData.join('_'))\n    },\n\n    getCsvFileHeaders() {\n      const headers = [\n        this.$t('shots.fields.name'),\n        this.$t('breakdown.fields.standby')\n      ]\n      if (this.isFrames) {\n        headers.push(this.$t('main.frames'))\n      }\n      if (this.isFrameIn) {\n        headers.push(this.$t('main.frame_in'))\n      }\n      if (this.isFrameOut) {\n        headers.push(this.$t('main.frame_out'))\n      }\n      this.metadataDescriptors.forEach(descriptor => {\n        headers.push(descriptor.name)\n      })\n      return headers.concat(this.castingAssetTypes)\n    },\n\n    getCsvEntries() {\n      const entries = this.castingEntities.map(entity => {\n        const entry = [entity.name, entity.is_casting_standby ? 'X' : '']\n        if (this.isFrames) {\n          entry.push(entity.nb_frames)\n        }\n        if (this.isFrameIn) {\n          entry.push(entity.data.frame_in)\n        }\n        if (this.isFrameOut) {\n          entry.push(entity.data.frame_out)\n        }\n        this.metadataDescriptors.forEach(descriptor => {\n          entry.push(entity.data[descriptor.field_name] || '')\n        })\n\n        const assets = this.castingByType[entity.id] || []\n        const assetsByAssetTypesMap = {}\n        assets.forEach(assetTypeAssets => {\n          assetsByAssetTypesMap[assetTypeAssets[0].asset_type_name] =\n            assetTypeAssets\n        })\n        this.castingAssetTypes.forEach(assetTypeName => {\n          const typeAssets = assetsByAssetTypesMap[assetTypeName] || []\n          const nbAssetsForType = typeAssets.reduce(\n            (acc, a) => acc + a.nb_occurences,\n            0\n          )\n          if (nbAssetsForType > 0) {\n            let casting = nbAssetsForType + ' assets: '\n            casting += typeAssets\n              .map(asset => {\n                return asset.asset_name + ' (' + asset.nb_occurences + ')'\n              })\n              .join(', ')\n            entry.push(casting)\n          } else {\n            entry.push('')\n          }\n        })\n        return entry\n      })\n      return entries\n    },\n\n    exportViewToCsv() {\n      const entries = this.getCsvEntries()\n      const name = this.getCsvFileName()\n      const headers = this.getCsvFileHeaders()\n      csv.buildCsvFile(name, [headers].concat(entries))\n    },\n\n    removeSearchQuery(searchQuery) {\n      this.removeBreakdownSearch(searchQuery).catch(console.error)\n    },\n\n    saveSearchQuery(searchQuery) {\n      if (this.loading.savingSearch) {\n        return\n      }\n      this.loading.savingSearch = true\n      this.saveBreakdownSearch(searchQuery)\n        .catch(console.error)\n        .finally(() => {\n          this.loading.savingSearch = false\n        })\n    },\n\n    initResize(knobRefName, refName, descriptorId) {\n      this.resizedKnobRefName = knobRefName + (descriptorId ? descriptorId : '')\n      this.resizedRefName = refName + (descriptorId ? descriptorId : '')\n      this.resizedDescriptorId = descriptorId\n      window.addEventListener('mousemove', this.startResizing)\n      window.addEventListener('mouseup', this.stopResizing)\n    },\n\n    startResizing(event) {\n      const knobRef = this.resizedKnobRefName\n      const headerRef = this.resizedRefName\n      const knob = this.$refs[knobRef][0]\n        ? this.$refs[knobRef][0]\n        : this.$refs[knobRef]\n      const header = this.$refs[headerRef][0]\n        ? this.$refs[headerRef][0]\n        : this.$refs[headerRef]\n      const diff = event.clientX - knob.getBoundingClientRect().left\n      const actualWidth = header.getBoundingClientRect().width\n      this.columnWidth = { ...this.columnWidth }\n      if (this.resizedDescriptorId) {\n        const newWidth = Math.max(actualWidth + diff, 110)\n        this.columnWidth[this.resizedDescriptorId] = newWidth\n        const preferenceKey = `breakdown:column-width-descriptor-${this.resizedDescriptorId}`\n        preferences.setPreference(preferenceKey, newWidth)\n      } else {\n        const newWidth = Math.max(actualWidth + diff, 160)\n        this.columnWidth.name = newWidth\n        const preferenceKey =\n          'breakdown:column-width-name-' +\n          `${this.castingType}-${this.currentProduction.id}`\n        preferences.setPreference(preferenceKey, newWidth)\n      }\n    },\n\n    stopResizing() {\n      window.removeEventListener('mousemove', this.startResizing)\n      window.removeEventListener('mouseup', this.stopResizing)\n      this.resizedKnobRefName = null\n      this.resizedRefName = null\n      this.resizedDescriptorId = null\n    },\n\n    resetDisplayHeaders() {\n      if (this.isEpisodeCasting) {\n        this.metadataDisplayHeaders = {}\n      } else if (this.isShotCasting) {\n        this.metadataDisplayHeaders = {\n          stdby: true,\n          fps: false,\n          frameIn: true,\n          frameOut: true,\n          frames: true,\n          estimation: false,\n          maxRetakes: false,\n          resolution: false,\n          timeSpent: false\n        }\n      } else {\n        this.metadataDisplayHeaders = {\n          estimation: false,\n          readyFor: false,\n          timeSpent: false\n        }\n      }\n    },\n\n    resetColumnWidth() {\n      const namePreferenceKey =\n        'breakdown:column-width-name-' +\n        `${this.castingType}-${this.currentProduction.id}`\n      const nameColumnWidth = preferences.getPreference(namePreferenceKey)\n      if (nameColumnWidth) {\n        this.columnWidth.name = nameColumnWidth\n      }\n\n      this.metadataDescriptors.forEach(descriptor => {\n        const descriptorColumnWidth = preferences.getPreference(\n          `breakdown:column-width-descriptor-${descriptor.id}`\n        )\n        if (descriptorColumnWidth) {\n          this.columnWidth[descriptor.id] = descriptorColumnWidth\n        }\n      })\n    },\n\n    onCastingHeaderScroll(event, position) {\n      this.$refs['casting-list'].scrollLeft = position.scrollLeft\n    },\n\n    onCastingScroll(event, position) {\n      this.$refs['casting-header'].scrollLeft = position.scrollLeft\n    }\n  },\n\n  watch: {\n    castingType() {\n      if (this.isShotCasting && this.displayedSequences.length > 0) {\n        this.sequenceId = this.displayedSequences[0].id\n        this.assetTypeId = ''\n      }\n      if (this.isAssetCasting && this.castingAssetTypesOptions.length > 0) {\n        const assetTypeId = this.$route.params.asset_type_id\n        this.sequenceId = 'all'\n        this.castingType = 'asset'\n        if (assetTypeId) {\n          this.assetTypeId = assetTypeId\n        } else if (this.castingAssetTypesOptions.length > 0) {\n          this.assetTypeId = this.castingAssetTypesOptions[0].value\n        }\n      }\n      this.resetDisplayHeaders()\n      this.resetColumnWidth()\n    },\n\n    sequenceId() {\n      if (\n        this.sequenceId &&\n        this.displayedSequences &&\n        this.displayedSequences.length > 0 &&\n        !this.isAssetCasting\n      ) {\n        this.setCastingSequence(this.sequenceId)\n        this.updateUrl()\n        this.resetSelection()\n      }\n    },\n\n    assetTypeId() {\n      if (this.assetTypeId && this.castingAssetTypesOptions.length > 0) {\n        this.setCastingAssetType(this.assetTypeId)\n        this.updateUrl()\n        this.resetSelection()\n      }\n    },\n\n    episodeId() {\n      if (this.episodeId && this.episodes && this.episodes.length > 0) {\n        if (this.episodeId === 'all') {\n          this.setCastingForProductionEpisodes(this.episodeId)\n        }\n        this.resetSelection()\n      }\n    },\n\n    castingSequencesOptions() {\n      if (this.$route.path.indexOf('asset-type') < 0) {\n        const sequenceId = this.$route.params.sequence_id || 'all'\n        if (sequenceId && this.sequenceMap.get(sequenceId)) {\n          this.sequenceId = sequenceId\n        } else if (this.castingSequencesOptions.length > 0) {\n          this.sequenceId = this.castingSequencesOptions[0].value\n        } else {\n          this.sequenceId = 'all'\n        }\n      }\n    },\n\n    castingAssetTypesOptions() {\n      if (this.$route.path.indexOf('asset-type') > 0) {\n        const assetTypeId = this.$route.params.asset_type_id\n        this.castingType = 'asset'\n        if (assetTypeId) {\n          this.assetTypeId = assetTypeId\n        } else if (this.castingAssetTypesOptions.length > 0) {\n          this.assetTypeId = this.castingAssetTypesOptions[0].value\n        } else {\n          this.assetTypeId = ''\n        }\n      }\n    },\n\n    currentProduction() {\n      if (!this.isLoading) {\n        this.reset()\n        this.resetColumnWidth()\n      }\n    },\n\n    currentEpisode() {\n      if (\n        this.currentEpisode &&\n        this.episodeId !== this.currentEpisode.id &&\n        !this.isLoading\n      ) {\n        if (this.currentEpisode.id === 'all') {\n          this.episodeId = 'all'\n        } else {\n          this.reset()\n        }\n      }\n    },\n\n    displayedSequences() {\n      this.$store.commit('CASTING_SET_SEQUENCES', this.displayedSequences)\n    }\n  },\n\n  socket: {\n    events: {\n      'episode:casting-update'(eventData) {\n        const episode = this.episodeMap.get(eventData.episode_id)\n        if (episode && !this.isLocked) {\n          this.loadEpisodeCasting(episode)\n        }\n      },\n\n      'shot:casting-update'(eventData) {\n        const shot = this.shotMap.get(eventData.shot_id)\n        if (shot && shot.sequence_id === this.sequenceId && !this.isLocked) {\n          this.loadShotCasting(shot)\n        }\n      },\n\n      'asset:casting-update'(eventData) {\n        const asset = this.assetMap.get(eventData.asset_id)\n        if (\n          asset &&\n          asset.asset_type_id === this.assetTypeId &&\n          !this.isLocked\n        ) {\n          this.loadAssetCasting(asset)\n        }\n      }\n    }\n  },\n\n  metaInfo() {\n    const pageTitle = this.$t('breakdown.title')\n    return {\n      title: `${this.currentProduction.name} ${pageTitle} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .breakdown {\n    background: $dark-grey-2;\n  }\n  .breakdown-column {\n    background: $dark-grey-light;\n    border: 1px solid #222;\n    box-shadow: 0 0 6px #222;\n  }\n}\n\n.breakdown {\n  color: var(--text);\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  background: #fafafa;\n  padding-left: 1em;\n  padding-right: 1em;\n  padding-bottom: 1em;\n}\n\n.breakdown-columns {\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  overflow-y: auto;\n  margin-top: 0.5em;\n}\n\n.breakdown-column {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  padding: 1em;\n  background: white;\n  border: 1px solid #eee;\n  box-shadow: 0 0 6px #e0e0e0;\n  border-radius: 1em;\n\n  &:not(:first-child) {\n    margin-left: 0.5em;\n  }\n}\n\n.casting-column {\n  overflow: hidden;\n  flex: 1;\n}\n\n.assets-column {\n  max-width: 460px;\n}\n\n.asset-type,\n.sequence {\n  text-transform: uppercase;\n  color: $grey;\n  border-bottom: 1px solid $light-grey;\n  font-size: 1.2em;\n  margin-bottom: 1em;\n}\n\n.asset-type {\n  margin-top: 1em;\n  margin-bottom: 0.5em;\n}\n\n.asset-list {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.shots-title {\n  font-weight: bold;\n}\n\n.subtitle {\n  border-bottom: 0;\n  margin-top: 0.1em;\n  margin-bottom: 0;\n}\n\n.filters-area {\n  margin-bottom: 0.5em;\n\n  .search-field-wrapper {\n    margin-right: 0.5em;\n  }\n}\n\n.entity-header,\n.description-header,\n.descriptor-header,\n.frames-header,\n.asset-type-header,\n.standby-header {\n  border-right: 1px solid $light-grey;\n  padding-left: 10px;\n  align-self: stretch;\n  display: flex;\n  align-items: center;\n}\n\n.description-header {\n  min-width: 250px;\n  max-width: 250px;\n}\n\n.descriptor-header {\n  min-width: 119px;\n  max-width: 119px;\n}\n\n.frames-header {\n  min-width: 81px;\n  max-width: 81px;\n  justify-content: right;\n  padding-right: 0.6em;\n}\n\n.asset-type-header {\n  padding-left: 1em;\n  min-width: 150px;\n  max-width: 150px;\n}\n\n.standby-header {\n  max-width: 60px;\n  min-width: 60px;\n  text-align: center;\n  justify-content: center;\n  padding-left: 0;\n}\n\n.entity-header {\n  border-top-left-radius: 10px;\n  border-right: 2px solid $light-grey;\n  margin: 0;\n  max-width: 301px;\n  min-width: 301px;\n  padding-left: 0.5em;\n  left: 0;\n  position: sticky;\n}\n\n.actions {\n  border-top-right-radius: 10px;\n  height: 45px;\n  text-align: right;\n}\n\n.casting-header {\n  background: white;\n  border-bottom: 2px solid $light-grey;\n  font-size: 1.1em;\n  color: var(--text-alt);\n  font-size: 0.9em;\n  font-weight: 600;\n  letter-spacing: 1px;\n  min-height: 40px;\n  overflow-y: hidden;\n  padding: 0;\n  position: sticky;\n  top: 0;\n  text-transform: uppercase;\n  z-index: 20;\n\n  div {\n    background: var(--background);\n    padding-top: 0.5em;\n    padding-bottom: 0.5em;\n  }\n\n  .actions {\n    height: 100%;\n  }\n\n  .dark & {\n    background: $dark-grey-light;\n  }\n}\n\n.list-options {\n  position: relative;\n}\n\n.casting-header div.resizable-knob {\n  cursor: col-resize;\n  height: 142%;\n  width: 5px;\n\n  &:hover {\n    background: $grey;\n  }\n}\n\n.casting-list {\n  overflow: auto;\n  display: flex;\n\n  .shot-lines {\n    flex: 1;\n  }\n\n  .actions {\n    width: 100%;\n    text-align: right;\n  }\n}\n\n.query-list {\n  margin-bottom: 0.5em;\n}\n</style>\n"],"names":["_sfc_main","event","modalMixin","Combobox","ModalFooter","domMixin","name","stringHelpers","entityListMixin","descriptorMixin","AssetBlock","EntityThumbnail","mapGetters","chunk","assetsByAssetTypes","assetTypeAssets","asset","label","assetId","nbOccurences","entity","renderMarkdown","assetType","acc","a","searchMixin","AvailableAssetBlock","BuildFilterModal","ButtonHrefLink","ButtonSimple","ComboboxStyled","DeleteModal","DepartmentName","EditAssetModal","EditLabelModal","ImportModal","ImportRenderModal","SearchField","SearchQueryList","ShotLine","ShowInfosButton","Spinner","TableMetadataSelectorMenu","preferences","isAssetsOnly","isShotsOnly","options","result","typeGroup","newGroup","_a","path","paramAdded","castingAssetTypes","assetTypeNameMap","type","casting","item","castKey","e","mapActions","route","selection","episode","shot","query","searchQuery","entityId","previousSelection","nbElementsSelected","k","shotId","previousEntityId","keys","previousIndex","index","indexRange","range","i","amount","entityIds","key","err","position","assetList","data","mode","csv","results","formData","filename","csvContent","file","isChange","episodeId","form","selectedElementId","selectedCasting","clipboard","castingToPaste","selectedElements","entry","descriptor","value","metadata","departmentId","nameData","moment","headers","assets","assetsByAssetTypesMap","assetTypeName","typeAssets","nbAssetsForType","entries","knobRefName","refName","descriptorId","knobRef","headerRef","knob","header","diff","actualWidth","newWidth","preferenceKey","namePreferenceKey","nameColumnWidth","descriptorColumnWidth","assetTypeId","sequenceId","eventData","pageTitle"],"mappings":"wVA0CA,MAAAA,EAAA,CACA,KAAA,wBAEA,MAAA,CACA,MAAA,CACA,QAAA,KAAA,CACA,GAAA,GACA,KAAA,EACA,GACA,KAAA,MACA,EACA,OAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,SAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,QAAA,CACA,QAAA,GACA,KAAA,OACA,CACA,EAEA,QAAA,CACA,YAAAC,EAAA,CACA,KAAA,QACA,KAAA,MAAA,UAAA,KAAA,MAAA,EAAA,CAEA,EACA,aAAAA,EAAA,CACA,KAAA,QACA,KAAA,MAAA,UAAA,KAAA,MAAA,EAAA,CAEA,CACA,CACA,w+BCpCAD,EAAA,CACA,KAAA,mBAEA,OAAA,CAAAE,CAAA,EAEA,WAAA,CACA,SAAAC,EACA,YAAAC,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,QAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EACA,MAAA,CACA,KAAA,MACA,CACA,EAEA,SAAA,CACA,KAAA,KAAA,MAAA,KAAA,KACA,EAEA,MAAA,CACA,MAAA,CACA,KAAA,CACA,MAAA,SACA,EACA,YAAA,CACA,CACA,MAAA,KAAA,GAAA,2BAAA,EACA,MAAA,SACA,EACA,CACA,MAAA,KAAA,GAAA,yBAAA,EACA,MAAA,OACA,CACA,CACA,CACA,EAEA,QAAA,CACA,SAAA,CACA,OAAA,KAAA,MAAA,UAAA,KAAA,IAAA,CACA,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,KAAA,MAAA,KAAA,KACA,CACA,CACA,k2BC7CAJ,EAAA,CACA,KAAA,cAEA,OAAA,CAAAK,CAAA,EAEA,MAAA,CACA,MAAA,CACA,QAAA,KAAA,CACA,GAAA,GACA,KAAA,EACA,GACA,KAAA,MACA,EACA,aAAA,CACA,QAAA,EACA,KAAA,MACA,EACA,OAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,SAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,SAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,QAAA,CACA,QAAA,GACA,KAAA,OACA,CACA,EAEA,QAAA,CACA,eAAAJ,EAAA,CACA,KAAA,WAAAA,CAAA,EACA,KAAA,MAAA,aAAA,KAAA,MAAA,SAAA,KAAA,YAAA,CACA,EAEA,YAAAA,EAAA,CACA,KAAA,WAAAA,CAAA,EACA,KAAA,MAAA,UAAA,KAAA,MAAA,SAAA,KAAA,YAAA,CACA,EAEA,YAAAK,EAAA,CACA,OAAAC,EAAA,YAAAD,EAAA,EAAA,CACA,EAEA,oBAAA,CACA,KAAA,UACA,KAAA,MAAA,aAAA,KAAA,MAAA,KAAA,MAAA,KAAA,CAEA,CACA,CACA,o9CC2KAN,GAAA,CACA,KAAA,YAEA,OAAA,CAAAQ,EAAAC,CAAA,EAEA,WAAA,CACA,WAAAC,GACA,gBAAAC,CACA,EAEA,MAAA,CACA,OAAA,CACA,QAAA,IAAA,CAAA,EACA,KAAA,MACA,EACA,cAAA,CACA,QAAA,GACA,KAAA,MACA,EACA,SAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,KAAA,CACA,QAAA,GACA,KAAA,MACA,EACA,OAAA,CACA,QAAA,IAAA,CAAA,EACA,KAAA,KACA,EACA,WAAA,CACA,QAAA,IAAA,CAAA,EACA,KAAA,KACA,EACA,SAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,SAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,oBAAA,CACA,QAAA,IAAA,CAAA,EACA,KAAA,KACA,EACA,uBAAA,CACA,QAAA,IAAA,CAAA,EACA,KAAA,MACA,EACA,QAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,cAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,YAAA,CACA,QAAA,GACA,KAAA,OACA,EACA,YAAA,CACA,QAAA,IAAA,CAAA,EACA,KAAA,MACA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CACA,WACA,uBACA,0BACA,YACA,aACA,WACA,uBACA,MACA,CAAA,EAEA,QAAA,CAEA,OADA,KAAA,KAAA,MAAA,KAAA,EACA,OAAAC,GAAAA,GAAAA,IAAA,WAAA,CACA,EAEA,uBAAA,CACA,MAAAC,EAAA,CAAA,EACA,YAAA,OAAA,QAAAC,GAAA,CACAA,EAAA,CAAA,IACAD,EAAAC,EAAA,CAAA,EAAA,eAAA,EACAA,EAEA,CAAA,EACAD,CACA,CACA,EAEA,QAAA,CACA,UAAAb,EAAA,CACA,KAAA,MAAA,QAAA,KAAA,OAAA,GAAAA,CAAA,CACA,EAEA,mBAAAe,EAAAC,EAAA,CACA,KAAA,MAAA,aAAAD,EAAAC,EAAA,KAAA,OAAA,EAAA,CACA,EAEA,eAAAC,EAAAC,EAAA,CACA,KAAA,MAAA,aAAAD,EAAA,KAAA,OAAA,GAAAC,CAAA,CACA,EAEA,YAAAD,EAAAC,EAAA,CACA,KAAA,MAAA,UAAAD,EAAA,KAAA,OAAA,GAAAC,CAAA,CACA,EAEA,qBAAAC,EAAAnB,EAAA,CACA,KAAA,MAAA,sBAAAmB,EAAAnB,EAAA,OAAA,KAAA,CACA,EAEA,iBAAAmB,EAAAnB,EAAA,CACA,KAAA,MAAA,kBAAAmB,EAAAnB,EAAA,OAAA,OAAA,CACA,EAEA,eAAAoB,EAEA,gBAAAC,EAAA,CACA,OAAA,KAAA,sBAAAA,CAAA,EAAA,OACA,CAAAC,EAAAC,IAAAD,EAAAC,EAAA,cACA,CACA,CACA,CACA,CACA,q6LCgCAxB,GAAA,CACA,KAAA,YAEA,OAAA,CAAAQ,EAAAiB,CAAA,EAEA,WAAA,CACA,oBAAAC,EACA,iBAAAC,EACA,eAAAC,EACA,aAAAC,EACA,eAAAC,EACA,YAAAC,EACA,eAAAC,EACA,eAAAC,EACA,eAAAC,EACA,YAAAC,EACA,kBAAAC,EACA,YAAAC,EACA,gBAAAC,EACA,SAAAC,GACA,gBAAAC,EACA,QAAAC,EACA,0BAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,YAAA,GACA,YAAA,OACA,wBAAA,GACA,YAAA,KACA,eAAA,KACA,qBAAA,KACA,UAAA,GACA,kBAAA,CAAA,EACA,UAAA,GACA,SAAA,GACA,UAAA,GACA,qBAAA,GACA,WAAA,GACA,iBAAA,GACA,mBAAA,CAAA,OAAA,EACA,UAAA,CAAA,EACA,YAAA,CAAA,EACA,WAAA,CAAA,EACA,UAAA,CAAA,EACA,WAAA,MACA,OAAA,CACA,KAAA,GACA,UAAA,GACA,UAAA,GACA,eAAA,KACA,OAAA,GACA,KAAA,EACA,EACA,QAAA,CACA,KAAA,GACA,UAAA,GACA,UAAA,GACA,OAAA,GACA,KAAA,EACA,EACA,uBAAA,CACA,MAAA,GACA,IAAA,GACA,QAAA,GACA,SAAA,GACA,OAAA,GACA,WAAA,GACA,WAAA,GACA,WAAA,GACA,UAAA,EACA,EACA,OAAA,CACA,uBAAA,GACA,qBAAA,GACA,eAAA,GACA,wBAAA,GACA,8BAAA,GACA,UAAA,EACA,EACA,QAAA,CACA,KAAA,EACA,EACA,YAAA,CAAA,CACA,CACA,EAEA,SAAA,CACA,KAAA,WACA,KAAA,MAAA,EAEA,KAAA,oBAAA,EACA,KAAA,wBAAA,WAAA,EACA,KAAA,WAAAC,EAAA,kBAAA,qBAAA,EACA,OAAA,iBAAA,UAAA,KAAA,UAAA,EAAA,EAEA,KAAA,oBAAA,EACA,KAAA,iBAAA,CACA,EAEA,eAAA,CACA,OAAA,oBAAA,UAAA,KAAA,SAAA,CACA,EAEA,SAAA,CACA,GAAA/B,EAAA,CACA,WACA,2BACA,eACA,eACA,yBACA,8BACA,UACA,yBACA,2BACA,gBACA,qBACA,kBACA,uBACA,0BACA,iBACA,oBACA,gBACA,qBACA,iBACA,aACA,WACA,kBACA,uBACA,YACA,aACA,WACA,iBACA,uBACA,WACA,cACA,UACA,yBACA,CAAA,EAEA,aAAA,CACA,OAAA,KAAA,MAAA,cAAA,CACA,EAEA,oBAAA,CACA,MAAAgC,EAAA,KAAA,kBAAA,kBAAA,SACAC,EAAA,KAAA,kBAAA,kBAAA,QACAC,EAAA,CAAA,EACA,OAAAD,GACAC,EAAA,KAAA,CACA,MAAA,KAAA,GAAA,cAAA,EACA,MAAA,OACA,CAAA,EAGA,CAAAF,IACA,CAAA,KAAA,UACA,KAAA,gBAAA,KAAA,eAAA,KAAA,SAEAE,EAAA,QAAA,CACA,MAAA,KAAA,GAAA,aAAA,EACA,MAAA,MACA,CAAA,EAEAA,CACA,EAEA,uBAAA,CACA,MAAAC,EAAA,CAAA,EACA,YAAA,aAAA,QAAAC,GAAA,CACA,IAAAC,EAAAD,EAAA,OAAAhC,GAAA,CAAAA,EAAA,QAAA,EACA,KAAA,UAAA,KAAA,uBACAiC,EAAAD,EAAA,OAAAhC,GAAA,OACA,OACAA,EAAA,aAAA,KAAA,eAAA,MACAkC,EAAAlC,EAAA,sBAAA,YAAAkC,EAAA,SAAA,KAAA,eAAA,IAEA,CAAA,GAEAD,EAAA,OAAA,GAAAF,EAAA,KAAAE,CAAA,CACA,CAAA,EACAF,CACA,EAEA,eAAA,CACA,IAAAI,EAAA,4BAAA,KAAA,kBAAA,EAAA,eACAC,EAAA,GACA,OAAA,KAAA,iBACAD,GAAA,eAAA,KAAA,eAAA,EAAA,GACAC,EAAA,IAEA,KAAA,gBACAD,GAAA,GAAAC,EAAA,IAAA,GAAA,mBAAA,KAAA,aAAA,IAEAD,CACA,EAEA,kBAAA,CACA,OAAA,KAAA,gBAAA,KAAA,eAAA,KAAA,KACA,EAEA,gBAAA,CACA,MAAA,CAAA,KAAA,kBAAA,KAAA,cAAA,OACA,EAEA,eAAA,CACA,MAAA,CAAA,KAAA,kBAAA,KAAA,cAAA,MACA,EAEA,iBAAA,CACA,OAAA,KAAA,iBACA,KAAA,gBACA,KAAA,cACA,KAAA,qBAGA,KAAA,UACA,KAAA,gBACA,KAAA,eAAA,KAAA,OAEA,KAAA,uBAAA,OACAnC,GAAA,OACA,OAAAA,EAAA,aAAA,KAAA,eAAA,MACAkC,EAAAlC,EAAA,sBAAA,YAAAkC,EAAA,SAAA,KAAA,eAAA,KACA,EACA,KAAA,UAAA,KAAA,eAAA,KAAA,OACA,KAAA,uBAAA,OAAAlC,GAAA,CAAAA,EAAA,UAAA,EAEA,KAAA,sBAGA,EAEA,mBAAA,CACA,MAAAqC,EAAA,CAAA,EACAC,EAAA,CAAA,EACA,YAAA,gBAAA,QAAAlC,GAAA,CACA,KAAA,cAAAA,EAAA,EAAA,GACA,KAAA,cAAAA,EAAA,EAAA,EAAA,QAAAmC,GAAA,CACAA,EAAA,CAAA,GAAA,CAAAD,EAAAC,EAAA,CAAA,EAAA,eAAA,IACAD,EAAAC,EAAA,CAAA,EAAA,eAAA,EAAA,GACAF,EAAA,KAAAE,EAAA,CAAA,EAAA,eAAA,EAEA,CAAA,CAEA,CAAA,EACAF,EAAA,KAAA,CACA,EAEA,gBAAA,CACA,OAAA,KAAA,MAAA,kBAAA,CACA,EAEA,iBAAA,CACA,MAAAG,EAAA,CAAA,EACA,YAAA,gBAAA,QAAApC,GAAA,CACA,KAAA,cAAAA,EAAA,EAAA,GACA,KAAA,cAAAA,EAAA,EAAA,EAAA,QAAAmC,GAAA,CACAA,EAAA,QAAAE,GAAA,CACA,MAAAC,EAAA,GAAAD,EAAA,UAAA,GAAAA,EAAA,eAAA,GAAAA,EAAA,IAAA,GACAD,EAAAE,CAAA,EAAA,EACA,CAAA,CACA,CAAA,CAEA,CAAA,EACAF,CACA,EAEA,eAAA,CACA,OAAA,KAAA,gBAAA,KACAG,GAAAA,EAAA,aAAAA,EAAA,YAAA,OAAA,CACA,CACA,EAEA,YAAA,OACA,OAAA,KAAA,YAAAT,EAAA,KAAA,iBAAA,YAAAA,EAAA,MAAA,MACA,CAAA,UAAA,SAAA,OAAA,aAAA,QAAA,YAAA,EACA,CAAA,SAAA,OAAA,aAAA,QAAA,YAAA,CACA,EAEA,eAAA,CACA,MAAA,CAAA,GAAA,KAAA,WAAA,GAAA,KAAA,kBAAA,CACA,EAEA,cAAA,CACA,OAAA,KAAA,SACA,CAAA,UAAA,OAAA,aAAA,OAAA,EACA,CAAA,OAAA,aAAA,OAAA,CACA,EAEA,qBAAA,CACA,OAAA,KAAA,iBACA,CAAA,EACA,KAAA,cACA,KAAA,wBAEA,KAAA,wBAEA,CACA,EAEA,QAAA,CACA,GAAAU,EAAA,CACA,oBACA,cACA,WACA,YACA,oBACA,qBACA,eACA,mBACA,aACA,kBACA,YACA,WACA,yBACA,wBACA,sBACA,gBACA,iCACA,cACA,oBACA,iBACA,qBACA,sBACA,uBACA,oBACA,kCACA,qBACA,oBACA,mBACA,0BACA,mBACA,CAAA,EAEA,OAAA,CACA,GAAA,CAAA,KAAA,SAAA,CACA,MAAAC,EAAA,CAAA,GAAA,KAAA,MAAA,EACAA,GAAAA,EAAA,QAAAA,EAAA,OAAA,aACAA,EAAA,KAAA,YACAA,EAAA,OAAA,WAAA,KACA,KAAA,QAAA,KAAAA,CAAA,EAEA,CACA,KAAA,UAAA,GACA,WAAA,IAAA,CACA,KAAA,eAAA,CACA,EAAA,GAAA,CACA,EAEA,MAAA,gBAAA,CACA,KAAA,UAAA,GACA,MAAA,KAAA,cAAA,EACA,MAAA,KAAA,UAAA,EACA,KAAA,UACA,KAAA,iBACA,KAAA,UAAA,KAAA,eAAA,IAEA,KAAA,kBAAA,KAAA,SAAA,EACA,KAAA,gCAAA,GAEA,KAAA,kBAAA,IAAA,EAEA,KAAA,WAAA,CAAA,IAAA,GAAA,UAAA,EAAA,CAAA,EAAA,KAAA,IAAA,CACA,KAAA,UAAA,GACA,KAAA,kBAAA,EACA,KAAA,qBAAA,EACA,KAAA,YACA,KAAA,oBAAA,KAAA,WAAA,EAEA,KAAA,mBAAA,KAAA,YAAA,KAAA,EAEA,KAAA,oBAAA,EACA,KAAA,eAAA,GAEA,KAAA,gBAAA,KAAA,eAAA,KAAA,QACA,KAAA,kBAAA,kBAAA,YAEA,KAAA,YAAA,QAEA,CAAA,CACA,EAEA,qBAAA,CACA,KAAA,kBAAA,mBAAA,QACA,KAAA,WAAA,KAAA,wBAAA,CAAA,EAAA,MAEA,EAEA,gBAAA,CACA,MAAAC,EAAA,CAAA,EACA,KAAA,iBACA,KAAA,gBAAA,QAAAC,GAAA,CACAD,EAAAC,EAAA,EAAA,EAAA,EACA,CAAA,EACA,KAAA,cACA,KAAA,qBAAA,QAAAC,GAAA,CACAF,EAAAE,EAAA,EAAA,EAAA,EACA,CAAA,EAEA,KAAA,uBAAA,QAAAhD,GAAA,CACA8C,EAAA9C,EAAA,EAAA,EAAA,EACA,CAAA,EAEA,KAAA,UAAA8C,CACA,EAEA,mBAAAG,EAAA,CACA,KAAA,OAAA,uBAAA,GACA,KAAA,MAAA,cAAA,EAAA,SAAAA,CAAA,EACA,KAAA,eAAAA,CAAA,CACA,EAEA,eAAAC,EAAA,CACA,KAAA,eAAAA,CAAA,EACA,KAAA,kBAAA,EACA,KAAA,kBAAA,CACA,EAEA,aAAAC,EAAAlE,EAAA,CACA,MAAAmE,EAAA,CAAA,GAAA,KAAA,SAAA,EACA,EAAAnE,EAAA,SAAAA,EAAA,UAAA,CAAAA,EAAA,SACA,KAAA,eAAA,EAGA,KAAA,kBAAAA,EAAA,UACA,KAAA,YAAA,KAAA,iBAAAkE,CAAA,GAGA,CAAA,KAAA,kBAAA,CAAAlE,EAAA,YACA,KAAA,iBAAAkE,GAGA,MAAAE,EAAA,OAAA,KAAAD,CAAA,EAAA,OACAE,GAAAF,EAAAE,CAAA,CACA,EAAA,OAEA,CAAAF,EAAAD,CAAA,GACAE,EAAA,GAAA,EAAApE,EAAA,SAAAA,EAAA,SAEA,KAAA,UAAAkE,CAAA,EAAA,GAEAC,EAAAD,CAAA,IACAlE,EAAA,SAAAA,EAAA,WAEA,KAAA,UAAAkE,CAAA,EAAA,GAEA,EAEA,gBAAA,CACA,OAAA,KAAA,KAAA,SAAA,EACA,OAAAG,GAAA,KAAA,UAAAA,CAAA,CAAA,EACA,QAAAC,GAAA,CACA,KAAA,UAAAA,CAAA,EAAA,EACA,CAAA,CACA,EAEA,YAAAC,EAAAL,EAAA,CACA,MAAAM,EAAA,OAAA,KAAA,KAAA,SAAA,EACAC,EAAAD,EAAA,UAAAH,GAAAA,IAAAE,CAAA,EACAG,EAAAF,EAAA,UAAAH,GAAAA,IAAAH,CAAA,EAEA,IAAAS,EAAA,CAAA,EACAF,EAAAC,EAAAC,EAAAC,EAAAH,EAAAC,CAAA,EACAC,EAAAC,EAAAF,EAAAD,CAAA,EAEAE,EAAA,QAAAE,GAAA,CACAA,GAAA,IAAA,KAAA,UAAAL,EAAAK,CAAA,CAAA,EAAA,GACA,CAAA,CACA,EAEA,SAAA,CACA,KAAA,SAAA,cACA,KAAA,SAAA,YAAA,WAAA,IAAA,CACA,KAAA,SAAA,EACA,EAAA,GAAA,EAEA,EAEA,MAAA,YAAA5D,EAAA6D,EAAA,EAAA,CACA,KAAA,SAAA,GACA,MAAAC,EAAA,OAAA,KAAA,KAAA,SAAA,EAAA,OACAC,GAAA,KAAA,UAAAA,CAAA,CACA,EAEA,UAAAd,KAAAa,EAAA,CACA,KAAA,kBAAA,CACA,SAAAb,EACA,QAAAjD,EACA,aAAA6D,EACA,MAAA,KAAA,cAAA,OAAA,UAAA,OACA,CAAA,EAEA,OAAA,KAAA,WAAAZ,CAAA,EAEA,GAAA,CACA,MAAA,KAAA,YAAAA,CAAA,EACA,KAAA,QAAA,CACA,OAAAe,EAAA,CACA,KAAA,WAAAf,CAAA,EAAA,GACA,QAAA,MAAAe,CAAA,CACA,CACA,CACA,EAEA,MAAA,aAAAhE,EAAA,CACA,KAAA,YAAAA,EAAA,EAAA,CACA,EAEA,qBAAA,CACA,KAAA,iBACA,KAAA,YAAA,SACA,KAAA,YAAA,QACA,KAAA,YAAA,YACA,CACA,EAEA,iBAAAiD,EAAAjD,EAAAC,EAAA,CACA,YAAA,QAAA,OAAA,GACA,KAAA,uBAAA,CAAA,SAAAgD,EAAA,QAAAjD,EAAA,aAAAC,CAAA,CAAA,EACA,OAAA,KAAA,WAAAgD,CAAA,EACA,KAAA,YAAAA,CAAA,EACA,KAAA,IAAA,CACA,KAAA,QAAA,EACA,KAAA,OAAA,8BAAA,EACA,CAAA,EACA,MAAAe,GAAA,CACA,KAAA,WAAAf,CAAA,EAAA,GACA,KAAA,OAAA,OAAA,GACA,QAAA,MAAAe,CAAA,CACA,CAAA,EACA,QAAA,IAAA,CACA,KAAA,QAAA,OAAA,EACA,CAAA,CACA,EAEA,MAAA,4BAAAhE,EAAA,CACA,MAAA8D,EAAA,OAAA,KAAA,KAAA,SAAA,EAAA,OACAC,GAAA,KAAA,UAAAA,CAAA,CACA,EAEA,UAAAd,KAAAa,EAAA,CACA,MAAA7D,EAAA,KAAA,QAAAgD,CAAA,EAAA,KACAnD,GAAAA,EAAA,WAAAE,CACA,EAAA,cACA,MAAA,KAAA,eAAAA,EAAAiD,EAAAhD,CAAA,CACA,CACA,EAEA,eAAAD,EAAAiD,EAAAhD,EAAA,CAEA,OADA,KAAA,SAAA,GACA,KAAA,kBAAAA,IAAA,GACA,KAAA,YAAA,CAAA,QAAAD,EAAA,SAAAiD,EAAA,aAAAhD,CAAA,EACA,KAAA,OAAA,8BAAA,GACA,QAAA,QAAA,GAEA,KAAA,iBAAAgD,EAAAjD,EAAA,CAAA,CAEA,EAEA,kBAAAjB,EAAAkF,EAAA,CACA,MAAAC,EAAA,KAAA,MAAA,YAAA,EACAA,EAAA,aAAAA,EAAA,aACAD,EAAA,UAAA,KACA,KAAA,kBAAA,CAEA,EAEA,iBAAA,CACA,KAAA,OAAA,UAAA,EACA,EAEA,iBAAA,CACA,KAAA,OAAA,UAAA,EACA,EAEA,uBAAA,CACA,KAAA,OAAA,wBAAA,EACA,EAEA,uBAAA,CACA,KAAA,OAAA,wBAAA,EACA,EAEA,aAAAE,EAAAC,EAAA,CACA,KAAA,QAAA,UAAA,GACA,KAAA,OAAA,UAAA,GACAA,IAAA,SACAD,EAAAA,EAAA,IAAA,MAAA,GAEAE,EAAA,WAAAF,CAAA,EAAA,KAAAG,GAAA,CACA,KAAA,UAAAA,EACA,KAAA,gBAAA,EACA,KAAA,QAAA,UAAA,GACA,KAAA,sBAAA,CACA,CAAA,CACA,EAEA,iBAAAH,EAAA,CACA,MAAAI,EAAA,IAAA,SACAC,EAAA,aACAC,EAAAJ,EAAA,uBAAAF,CAAA,EACAO,EAAA,IAAA,KAAA,CAAAD,CAAA,EAAAD,EAAA,CAAA,KAAA,WAAA,EAEAD,EAAA,OAAA,OAAAG,CAAA,EAEA,KAAA,QAAA,UAAA,GACA,KAAA,OAAA,UAAA,GACA,KAAA,OAAA,eAAA,KACA,KAAA,kBAAAH,EAEA,KAAA,kBAAA,KAAA,iBAAA,EACA,KAAA,IAAA,CACA,KAAA,sBAAA,EACA,KAAA,YACA,KAAA,mBAAA,KAAA,YAAA,KAAA,CAEA,CAAA,EACA,MAAAP,GAAA,CACA,KAAA,OAAA,eAAAA,EACA,KAAA,OAAA,UAAA,EACA,CAAA,EACA,QAAA,IAAA,CACA,KAAA,QAAA,UAAA,EACA,CAAA,CACA,EAEA,aAAA,CACA,KAAA,OAAA,UAAA,GACA,KAAA,OAAA,eAAA,KACA,KAAA,sBAAA,EACA,KAAA,kBAAA,OACA,KAAA,MAAA,cAAA,EAAA,MAAA,EACA,KAAA,gBAAA,CACA,EAEA,WAAA,CACA,IAAAW,EAAA,GACAhC,EAAA,CAAA,EAsCA,GArCA,KAAA,iBACA,KAAA,OAAA,OAAA,aACA,KAAA,YACAgC,EAAA,GACAhC,EAAA,CACA,KAAA,oBACA,OAAA,CACA,cAAA,KAAA,kBAAA,GACA,WAAA,KAAA,SACA,CACA,GAEA,KAAA,gBACA,KAAA,OAAA,OAAA,eAAA,MACA,KAAA,cACAgC,EAAA,GACAhC,EAAA,CACA,KAAA,uBACA,OAAA,CACA,cAAA,KAAA,kBAAA,GACA,cAAA,KAAA,WACA,CACA,IAGA,KAAA,OAAA,OAAA,aAAA,SACA,KAAA,aACAgC,EAAA,GACAhC,EAAA,CACA,KAAA,qBACA,OAAA,CACA,cAAA,KAAA,kBAAA,GACA,YAAA,KAAA,YAAA,KACA,CACA,GAGAgC,EAAA,CACA,IAAAC,EAAA,KAAA,OAAA,OAAA,WACA,CAAAA,GAAA,KAAA,iBACAA,EAAA,KAAA,eAAA,IAEAA,IACAjC,EAAA,KAAA,WAAAA,EAAA,IAAA,GACAA,EAAA,OAAA,WAAAiC,EACAA,IAAA,QAAAjC,EAAA,OAAA,YAAA,QAEA,KAAA,QAAA,KAAAA,CAAA,CACA,CACA,EAEA,mBAAA7C,EAAAC,EAAAkD,EAAA,CACA,KAAA,YAAAnD,EACA,KAAA,eAAAmD,EACA,KAAA,qBAAAlD,EACA,KAAA,OAAA,qBAAA,EACA,EAEA,iBAAA8E,EAAA,GAAA,CACA,MAAA9E,EAAA8E,EAAA,MACA,KAAA,QAAA,UAAA,GACA,KAAA,kBAAA,CACA,MAAA9E,EACA,MAAA,KAAA,YACA,eAAA,KAAA,cACA,CAAA,EACA,KAAA,IAAA,CACA,KAAA,OAAA,qBAAA,GACA,KAAA,QAAA,UAAA,EACA,CAAA,EACA,MAAAiE,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,OAAA,UAAA,GACA,KAAA,QAAA,UAAA,EACA,CAAA,CACA,EAEA,gBAAA,CACA,KAAA,WAAA,CAAA,KAAA,WACA,aAAA,QAAA,sBAAA,KAAA,UAAA,CACA,EAEA,sBAAA,CACA,KAAA,wBAAA,CAAA,KAAA,uBACA,EAEA,oBAAAa,EAAA,CACA,KAAA,QAAA,KAAA,GACA,KAAA,QAAA,KAAA,GACA,KAAA,SAAAA,CAAA,EACA,KAAA/E,GAAA,CACA,KAAA,QAAA,KAAA,GACA,KAAA,QAAA,KAAA,GACA,KAAA,oBAAAA,CAAA,EACA,KAAA,MAAA,kBAAA,EAAA,UAAA,EACA,KAAA,QAAA,KAAA,EACA,CAAA,EACA,MAAAkE,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,QAAA,KAAA,GACA,KAAA,QAAA,KAAA,GACA,KAAA,QAAA,KAAA,GACA,KAAA,OAAA,KAAA,EACA,CAAA,CACA,EAEA,gBAAAa,EAAA,CACA,KAAA,QAAA,KAAA,GACA,KAAA,OAAA,KAAA,GACA,KAAA,SAAAA,CAAA,EACA,KAAA,IAAA,CACA,KAAA,QAAA,KAAA,GACA,KAAA,OAAA,eAAA,EACA,CAAA,EACA,MAAAb,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,QAAA,KAAA,GACA,KAAA,OAAA,KAAA,EACA,CAAA,CACA,EAEA,oBAAAlE,EAAA,CACA,MAAA+E,EAAA,CACA,KAAA,GACA,eAAA/E,EAAA,cACA,cAAA,KAAA,kBAAA,EACA,EACA,KAAA,YAAA+E,CACA,EAEA,UAAA9F,EAAA,CACA,CAAA,QAAA,UAAA,EAAA,SAAAA,EAAA,OAAA,OAAA,KACAA,EAAA,SAAAA,EAAA,UAAAA,EAAA,UAAA,GAEA,KAAA,YAAA,GACAA,EAAA,SAAAA,EAAA,UAAAA,EAAA,UAAA,IAEA,KAAA,aAAA,EAGA,EAEA,aAAA,CACA,MAAA+F,EAAA,OAAA,KAAA,KAAA,SAAA,EAAA,KACAf,GAAA,KAAA,UAAAA,CAAA,CACA,EACAgB,EAAA,KAAA,QAAAD,CAAA,EACAE,EAAA,YAAAD,CAAA,CACA,EAEA,MAAA,cAAA,CACA,MAAAE,EAAAD,EAAA,aAAA,EACA,GAAA,CAAAC,GAAAA,EAAA,SAAA,EAAA,OACA,MAAAC,EAAA,OAAA,KAAA,KAAA,SAAA,EAAA,OACAnB,GAAA,KAAA,UAAAA,CAAA,CACA,EACA,UAAAd,KAAAiC,EACA,KAAA,iBAAA,CACA,SAAAjC,EACA,QAAAgC,CACA,CAAA,EACA,OAAA,KAAA,WAAAhC,CAAA,EACA,MAAA,KAAA,YAAAA,CAAA,EACA,KAAA,KAAA,OAAA,EACA,MAAAe,GAAA,CACA,KAAA,WAAAf,CAAA,EAAA,GACA,QAAA,MAAAe,CAAA,CACA,CAAA,EAEA,OAAAiB,CACA,EAEA,kBAAA,CAAA,MAAAE,EAAA,WAAAC,EAAA,MAAAC,CAAA,EAAA,CACA,MAAAC,EAAA,CAAA,EACAA,EAAAF,EAAA,UAAA,EAAAC,EACA,MAAAlB,EAAA,CACA,GAAAgB,EAAA,GACA,KAAAG,CACA,EACA,KAAA,iBACA,KAAA,YAAAnB,CAAA,EACA,KAAA,cACA,KAAA,SAAAA,CAAA,EAEA,KAAA,UAAAA,CAAA,CAEA,EAEA,qBAAAjE,EAAAmF,EAAA,CACA,MAAAlB,EAAA,CACA,GAAAjE,EAAA,GACA,YAAAmF,CACA,EACA,KAAA,iBACA,KAAA,YAAAlB,CAAA,EACA,KAAA,cACA,KAAA,SAAAA,CAAA,EAEA,KAAA,UAAAA,CAAA,CAEA,EAEA,iBAAAjE,EAAAmF,EAAA,CACA,MAAAlB,EAAA,CACA,GAAAjE,EAAA,GACA,mBAAAmF,CACA,EACA,KAAA,iBACA,KAAA,YAAAlB,CAAA,EACA,KAAA,cACA,KAAA,SAAAA,CAAA,EAEA,KAAA,UAAAA,CAAA,CAEA,EAEA,6BAAAiB,EAAA,CAEA,OADAA,EAAA,aAAA,CAAA,GACA,IAAAG,GACA,KAAA,cAAA,IAAAA,CAAA,CACA,CACA,EAEA,cAAArF,EAAA,CACA,OAAA,KAAA,aAAA,QACA,CAAA,KAAA,UAAA,KAAA,UAAA,KAAA,eAAA,KAAA,OACAA,EAAA,cAAA,MAAAA,EAAA,KACAA,EAAA,IACA,EAEA,gBAAA,CACA,MAAAsF,EAAA,CACAC,EAAA,EAAA,OAAA,YAAA,EACA,QACA,KAAA,YAAA,IACA,KAAA,kBAAA,KACA,KAAA,GAAA,iBAAA,CACA,EACA,OAAA,KAAA,SACA,KAAA,iBACA,KAAA,eAAA,KAAA,MACAD,EAAA,OAAA,EAAA,EAAA,KAAA,EACA,KAAA,eAAA,KAAA,QACAA,EAAA,OAAA,EAAA,EAAA,WAAA,EACA,KAAA,cAAA,OAAA,KAAA,cAAA,SACAA,EAAA,OACA,EACA,EACA,KAAA,aAAA,IAAA,KAAA,WAAA,EAAA,IACA,IAGAA,EAAA,OAAA,EAAA,EAAA,KAAA,eAAA,IAAA,EACA,KAAA,aAAA,OAAA,KAAA,cAAA,QACAA,EAAA,OAAA,EAAA,EAAA,KAAA,YAAA,IAAA,KAAA,UAAA,EAAA,IAAA,EAEA,KAAA,cAAA,OAAA,KAAA,cAAA,SACAA,EAAA,OACA,EACA,EACA,KAAA,aAAA,IAAA,KAAA,WAAA,EAAA,IACA,KAKA,KAAA,aAAA,OAAA,KAAA,cAAA,QACAA,EAAA,OAAA,EAAA,EAAA,KAAA,YAAA,IAAA,KAAA,UAAA,EAAA,IAAA,EAEA,KAAA,cAAA,OAAA,KAAA,cAAA,SACAA,EAAA,OAAA,EAAA,EAAA,KAAA,aAAA,IAAA,KAAA,WAAA,EAAA,IAAA,GAGAnG,EAAA,QAAAmG,EAAA,KAAA,GAAA,CAAA,CACA,EAEA,mBAAA,CACA,MAAAE,EAAA,CACA,KAAA,GAAA,mBAAA,EACA,KAAA,GAAA,0BAAA,CACA,EACA,OAAA,KAAA,UACAA,EAAA,KAAA,KAAA,GAAA,aAAA,CAAA,EAEA,KAAA,WACAA,EAAA,KAAA,KAAA,GAAA,eAAA,CAAA,EAEA,KAAA,YACAA,EAAA,KAAA,KAAA,GAAA,gBAAA,CAAA,EAEA,KAAA,oBAAA,QAAAN,GAAA,CACAM,EAAA,KAAAN,EAAA,IAAA,CACA,CAAA,EACAM,EAAA,OAAA,KAAA,iBAAA,CACA,EAEA,eAAA,CA0CA,OAzCA,KAAA,gBAAA,IAAAxF,GAAA,CACA,MAAAiF,EAAA,CAAAjF,EAAA,KAAAA,EAAA,mBAAA,IAAA,EAAA,EACA,KAAA,UACAiF,EAAA,KAAAjF,EAAA,SAAA,EAEA,KAAA,WACAiF,EAAA,KAAAjF,EAAA,KAAA,QAAA,EAEA,KAAA,YACAiF,EAAA,KAAAjF,EAAA,KAAA,SAAA,EAEA,KAAA,oBAAA,QAAAkF,GAAA,CACAD,EAAA,KAAAjF,EAAA,KAAAkF,EAAA,UAAA,GAAA,EAAA,CACA,CAAA,EAEA,MAAAO,EAAA,KAAA,cAAAzF,EAAA,EAAA,GAAA,CAAA,EACA0F,EAAA,CAAA,EACA,OAAAD,EAAA,QAAA9F,GAAA,CACA+F,EAAA/F,EAAA,CAAA,EAAA,eAAA,EACAA,CACA,CAAA,EACA,KAAA,kBAAA,QAAAgG,GAAA,CACA,MAAAC,EAAAF,EAAAC,CAAA,GAAA,CAAA,EACAE,EAAAD,EAAA,OACA,CAAAzF,EAAAC,IAAAD,EAAAC,EAAA,cACA,CACA,EACA,GAAAyF,EAAA,EAAA,CACA,IAAAzD,EAAAyD,EAAA,YACAzD,GAAAwD,EACA,IAAAhG,GACAA,EAAA,WAAA,KAAAA,EAAA,cAAA,GACA,EACA,KAAA,IAAA,EACAqF,EAAA,KAAA7C,CAAA,CACA,MACA6C,EAAA,KAAA,EAAA,CAEA,CAAA,EACAA,CACA,CAAA,CAEA,EAEA,iBAAA,CACA,MAAAa,EAAA,KAAA,cAAA,EACA5G,EAAA,KAAA,eAAA,EACAsG,EAAA,KAAA,kBAAA,EACArB,EAAA,aAAAjF,EAAA,CAAAsG,CAAA,EAAA,OAAAM,CAAA,CAAA,CACA,EAEA,kBAAAhD,EAAA,CACA,KAAA,sBAAAA,CAAA,EAAA,MAAA,QAAA,KAAA,CACA,EAEA,gBAAAA,EAAA,CACA,KAAA,QAAA,eAGA,KAAA,QAAA,aAAA,GACA,KAAA,oBAAAA,CAAA,EACA,MAAA,QAAA,KAAA,EACA,QAAA,IAAA,CACA,KAAA,QAAA,aAAA,EACA,CAAA,EACA,EAEA,WAAAiD,EAAAC,EAAAC,EAAA,CACA,KAAA,mBAAAF,GAAAE,GAAA,IACA,KAAA,eAAAD,GAAAC,GAAA,IACA,KAAA,oBAAAA,EACA,OAAA,iBAAA,YAAA,KAAA,aAAA,EACA,OAAA,iBAAA,UAAA,KAAA,YAAA,CACA,EAEA,cAAApH,EAAA,CACA,MAAAqH,EAAA,KAAA,mBACAC,EAAA,KAAA,eACAC,EAAA,KAAA,MAAAF,CAAA,EAAA,CAAA,EACA,KAAA,MAAAA,CAAA,EAAA,CAAA,EACA,KAAA,MAAAA,CAAA,EACAG,EAAA,KAAA,MAAAF,CAAA,EAAA,CAAA,EACA,KAAA,MAAAA,CAAA,EAAA,CAAA,EACA,KAAA,MAAAA,CAAA,EACAG,EAAAzH,EAAA,QAAAuH,EAAA,sBAAA,EAAA,KACAG,EAAAF,EAAA,sBAAA,EAAA,MAEA,GADA,KAAA,YAAA,CAAA,GAAA,KAAA,WAAA,EACA,KAAA,oBAAA,CACA,MAAAG,EAAA,KAAA,IAAAD,EAAAD,EAAA,GAAA,EACA,KAAA,YAAA,KAAA,mBAAA,EAAAE,EACA,MAAAC,EAAA,qCAAA,KAAA,mBAAA,GACAlF,EAAA,cAAAkF,EAAAD,CAAA,CACA,KAAA,CACA,MAAAA,EAAA,KAAA,IAAAD,EAAAD,EAAA,GAAA,EACA,KAAA,YAAA,KAAAE,EACA,MAAAC,EACA,+BACA,KAAA,WAAA,IAAA,KAAA,kBAAA,EAAA,GACAlF,EAAA,cAAAkF,EAAAD,CAAA,CACA,CACA,EAEA,cAAA,CACA,OAAA,oBAAA,YAAA,KAAA,aAAA,EACA,OAAA,oBAAA,UAAA,KAAA,YAAA,EACA,KAAA,mBAAA,KACA,KAAA,eAAA,KACA,KAAA,oBAAA,IACA,EAEA,qBAAA,CACA,KAAA,iBACA,KAAA,uBAAA,CAAA,EACA,KAAA,cACA,KAAA,uBAAA,CACA,MAAA,GACA,IAAA,GACA,QAAA,GACA,SAAA,GACA,OAAA,GACA,WAAA,GACA,WAAA,GACA,WAAA,GACA,UAAA,EACA,EAEA,KAAA,uBAAA,CACA,WAAA,GACA,SAAA,GACA,UAAA,EACA,CAEA,EAEA,kBAAA,CACA,MAAAE,EACA,+BACA,KAAA,WAAA,IAAA,KAAA,kBAAA,EAAA,GACAC,EAAApF,EAAA,cAAAmF,CAAA,EACAC,IACA,KAAA,YAAA,KAAAA,GAGA,KAAA,oBAAA,QAAAzB,GAAA,CACA,MAAA0B,EAAArF,EAAA,cACA,qCAAA2D,EAAA,EAAA,EACA,EACA0B,IACA,KAAA,YAAA1B,EAAA,EAAA,EAAA0B,EAEA,CAAA,CACA,EAEA,sBAAA/H,EAAAkF,EAAA,CACA,KAAA,MAAA,cAAA,EAAA,WAAAA,EAAA,UACA,EAEA,gBAAAlF,EAAAkF,EAAA,CACA,KAAA,MAAA,gBAAA,EAAA,WAAAA,EAAA,UACA,CACA,EAEA,MAAA,CACA,aAAA,CAKA,GAJA,KAAA,eAAA,KAAA,mBAAA,OAAA,IACA,KAAA,WAAA,KAAA,mBAAA,CAAA,EAAA,GACA,KAAA,YAAA,IAEA,KAAA,gBAAA,KAAA,yBAAA,OAAA,EAAA,CACA,MAAA8C,EAAA,KAAA,OAAA,OAAA,cACA,KAAA,WAAA,MACA,KAAA,YAAA,QACAA,EACA,KAAA,YAAAA,EACA,KAAA,yBAAA,OAAA,IACA,KAAA,YAAA,KAAA,yBAAA,CAAA,EAAA,MAEA,CACA,KAAA,oBAAA,EACA,KAAA,iBAAA,CACA,EAEA,YAAA,CAEA,KAAA,YACA,KAAA,oBACA,KAAA,mBAAA,OAAA,GACA,CAAA,KAAA,iBAEA,KAAA,mBAAA,KAAA,UAAA,EACA,KAAA,UAAA,EACA,KAAA,eAAA,EAEA,EAEA,aAAA,CACA,KAAA,aAAA,KAAA,yBAAA,OAAA,IACA,KAAA,oBAAA,KAAA,WAAA,EACA,KAAA,UAAA,EACA,KAAA,eAAA,EAEA,EAEA,WAAA,CACA,KAAA,WAAA,KAAA,UAAA,KAAA,SAAA,OAAA,IACA,KAAA,YAAA,OACA,KAAA,gCAAA,KAAA,SAAA,EAEA,KAAA,eAAA,EAEA,EAEA,yBAAA,CACA,GAAA,KAAA,OAAA,KAAA,QAAA,YAAA,EAAA,EAAA,CACA,MAAAC,EAAA,KAAA,OAAA,OAAA,aAAA,MACAA,GAAA,KAAA,YAAA,IAAAA,CAAA,EACA,KAAA,WAAAA,EACA,KAAA,wBAAA,OAAA,EACA,KAAA,WAAA,KAAA,wBAAA,CAAA,EAAA,MAEA,KAAA,WAAA,KAEA,CACA,EAEA,0BAAA,CACA,GAAA,KAAA,OAAA,KAAA,QAAA,YAAA,EAAA,EAAA,CACA,MAAAD,EAAA,KAAA,OAAA,OAAA,cACA,KAAA,YAAA,QACAA,EACA,KAAA,YAAAA,EACA,KAAA,yBAAA,OAAA,EACA,KAAA,YAAA,KAAA,yBAAA,CAAA,EAAA,MAEA,KAAA,YAAA,EAEA,CACA,EAEA,mBAAA,CACA,KAAA,YACA,KAAA,MAAA,EACA,KAAA,iBAAA,EAEA,EAEA,gBAAA,CAEA,KAAA,gBACA,KAAA,YAAA,KAAA,eAAA,IACA,CAAA,KAAA,YAEA,KAAA,eAAA,KAAA,MACA,KAAA,UAAA,MAEA,KAAA,MAAA,EAGA,EAEA,oBAAA,CACA,KAAA,OAAA,OAAA,wBAAA,KAAA,kBAAA,CACA,CACA,EAEA,OAAA,CACA,OAAA,CACA,yBAAAE,EAAA,CACA,MAAApE,EAAA,KAAA,WAAA,IAAAoE,EAAA,UAAA,EACApE,GAAA,CAAA,KAAA,UACA,KAAA,mBAAAA,CAAA,CAEA,EAEA,sBAAAoE,EAAA,CACA,MAAAnE,EAAA,KAAA,QAAA,IAAAmE,EAAA,OAAA,EACAnE,GAAAA,EAAA,cAAA,KAAA,YAAA,CAAA,KAAA,UACA,KAAA,gBAAAA,CAAA,CAEA,EAEA,uBAAAmE,EAAA,CACA,MAAAnH,EAAA,KAAA,SAAA,IAAAmH,EAAA,QAAA,EAEAnH,GACAA,EAAA,gBAAA,KAAA,aACA,CAAA,KAAA,UAEA,KAAA,iBAAAA,CAAA,CAEA,CACA,CACA,EAEA,UAAA,CACA,MAAAoH,EAAA,KAAA,GAAA,iBAAA,EACA,MAAA,CACA,MAAA,GAAA,KAAA,kBAAA,IAAA,IAAAA,CAAA,UACA,CACA,CACA"}