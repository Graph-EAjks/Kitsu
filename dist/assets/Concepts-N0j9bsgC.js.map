{"version":3,"file":"Concepts-N0j9bsgC.js","sources":["../../src/components/pages/Concepts.vue"],"sourcesContent":["<template>\n  <div class=\"fixed-page columns\">\n    <div class=\"column main-column\">\n      <div class=\"concepts page\">\n        <div class=\"page-header\">\n          <div class=\"filters\">\n            <search-field\n              ref=\"search-field\"\n              class=\"field\"\n              :can-save=\"true\"\n              placeholder=\"ex: chara\"\n              @change=\"onSearchChange\"\n              @save=\"saveSearchQuery\"\n              v-if=\"false\"\n            />\n            <combobox-status\n              :label=\"$t('main.status')\"\n              :task-status-list=\"taskStatusList\"\n              v-model=\"filters.taskStatusId\"\n            />\n            <span class=\"field small\">\n              <label class=\"label\">\n                {{ $t('concepts.fields.publisher') }}\n              </label>\n              <people-field\n                :big=\"true\"\n                :people=\"publishers\"\n                v-model=\"filters.publisher\"\n              />\n            </span>\n            <combobox\n              :label=\"$t('concepts.fields.entity_type')\"\n              :options=\"entityTypeOptions\"\n              v-model=\"filters.entityType\"\n              v-if=\"false\"\n            />\n            <combobox\n              class=\"right\"\n              :label=\"$t('main.sorted_by')\"\n              locale-key-prefix=\"concepts.fields.\"\n              :options=\"sortByOptions\"\n              v-model=\"filters.sortBy\"\n            />\n          </div>\n          <div class=\"query-list\" v-if=\"false\">\n            <search-query-list\n              :queries=\"conceptSearchQueries\"\n              type=\"concept\"\n              @change-search=\"changeSearch\"\n              @remove-search=\"removeSearchQuery\"\n            />\n          </div>\n        </div>\n        <h2 class=\"mt0\">\n          {{ $t('concepts.title') }} ({{ filteredConcepts?.length || 0 }})\n        </h2>\n        <table-info\n          :is-loading=\"loading.loadingConcepts\"\n          :is-error=\"errors.loadingConcepts\"\n          v-if=\"loading.loadingConcepts || errors.loadingConcepts\"\n        />\n        <div class=\"concept-list pb1\" v-else-if=\"filteredConcepts?.length\">\n          <ul class=\"items\">\n            <li\n              class=\"item\"\n              :class=\"{\n                'selected-item': isSelected(concept)\n              }\"\n              v-for=\"concept in filteredConcepts\"\n              :key=\"concept.id\"\n              @click=\"\n                onSelectConcept(concept, $event.ctrlKey || $event.metaKey)\n              \"\n            >\n              <entity-preview\n                :empty-height=\"200\"\n                :empty-width=\"300\"\n                :height=\"200\"\n                :width=\"300\"\n                :entity=\"concept\"\n                is-rounded-top-border\n              />\n              <div class=\"description\">\n                <ul class=\"tags\">\n                  <li\n                    class=\"tag\"\n                    v-for=\"entity in getLinkedEntities(concept)\"\n                    :key=\"entity.id\"\n                    @click.stop\n                  >\n                    <router-link :to=\"entityPath(entity, 'asset')\">\n                      {{ entity.name }}\n                    </router-link>\n                  </li>\n                </ul>\n                <div class=\"status\" v-if=\"hasTask(concept)\">\n                  <span\n                    class=\"tag\"\n                    :style=\"{\n                      backgroundColor: getTaskStatus(concept).color,\n                      color: 'white'\n                    }\"\n                  >\n                    {{ getTaskStatus(concept).short_name }}\n                  </span>\n                  <people-avatar\n                    :person=\"personMap.get(concept.created_by)\"\n                    :size=\"25\"\n                    :font-size=\"14\"\n                  />\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n        <div v-else>\n          {{ $t('concepts.empty') }}\n        </div>\n        <footer class=\"footer mt2\">\n          <button-simple\n            :disabled=\"loading.loadingConcepts\"\n            :text=\"$t('concepts.add_new_concept')\"\n            @click=\"openAddConceptModal\"\n          />\n        </footer>\n      </div>\n    </div>\n\n    <add-preview-modal\n      ref=\"add-preview-modal\"\n      :active=\"modals.addConcept\"\n      is-concept\n      :is-error=\"errors.addingConcept\"\n      :is-loading=\"loading.addingConcept\"\n      message=\"\"\n      @cancel=\"closeAddConceptModal\"\n      @confirm=\"confirmAddConceptModal\"\n    />\n\n    <div class=\"column side-column\" v-if=\"selectedConcepts.size\">\n      <task-info entity-type=\"Concept\" :task=\"currentTask\" with-actions />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { firstBy } from 'thenby'\n\nimport { getEntityPath } from '@/lib/path'\nimport { sortByName } from '@/lib/sorting'\n\nimport { searchMixin } from '@/components/mixins/search'\n\nimport AddPreviewModal from '@/components/modals/AddPreviewModal'\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport Combobox from '@/components/widgets/Combobox.vue'\nimport ComboboxStatus from '@/components/widgets/ComboboxStatus.vue'\nimport EntityPreview from '@/components/widgets/EntityPreview.vue'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\nimport PeopleField from '@/components/widgets/PeopleField'\nimport SearchField from '@/components/widgets/SearchField'\nimport SearchQueryList from '@/components/widgets/SearchQueryList'\nimport TableInfo from '@/components/widgets/TableInfo'\nimport TaskInfo from '@/components/sides/TaskInfo'\n\nexport default {\n  name: 'concepts',\n  mixins: [searchMixin],\n\n  components: {\n    AddPreviewModal,\n    ButtonSimple,\n    Combobox,\n    ComboboxStatus,\n    EntityPreview,\n    PeopleAvatar,\n    PeopleField,\n    SearchField,\n    SearchQueryList,\n    TableInfo,\n    TaskInfo\n  },\n\n  data() {\n    return {\n      loading: {\n        addingConcept: false,\n        loadingConcepts: false,\n        savingSearch: false\n      },\n      errors: {\n        addingConcept: false,\n        loadingConcepts: false\n      },\n      filters: {\n        entityType: null,\n        publisher: null,\n        sortBy: 'created_at',\n        taskStatusId: null\n      },\n      form: {\n        file: null\n      },\n      modals: {\n        addConcept: false\n      },\n\n      // TODO: module getters\n      conceptSearchQueries: [\n        {\n          id: 'filter-test-1',\n          list_type: 'concept',\n          name: 'test',\n          search_query: 'test'\n        }\n      ]\n    }\n  },\n\n  mounted() {\n    // TODO: concept search\n    // this.setSearch(this.$route.query.search)\n    // this.searchField.focus()\n  },\n\n  computed: {\n    ...mapGetters([\n      'assetMap',\n      'currentProduction',\n      'displayedConcepts',\n      'isDarkTheme',\n      'isTVShow',\n      'personMap',\n      'selectedConcepts',\n      'taskStatusMap'\n    ]),\n\n    publishers() {\n      const publishers = new Map()\n      this.filteredConcepts.forEach(concept => {\n        const personId = concept.created_by\n        if (!publishers.has(personId)) {\n          const person = this.personMap.get(personId)\n          if (person) {\n            publishers.set(personId, person)\n          }\n        }\n      })\n      return sortByName([...publishers.values()])\n    },\n\n    currentTask() {\n      return this.currentConcept?.tasks?.[0]\n    },\n\n    currentConcept() {\n      return this.selectedConcepts.size === 1\n        ? this.selectedConcepts.values().next().value\n        : null\n    },\n\n    entityTypeOptions() {\n      const allEntityTypeOptions = {\n        label: this.$t('main.all'),\n        value: null\n      }\n      const options = ['assets', 'shots', 'sequences', 'edits', 'episodes'].map(\n        name => ({\n          label: this.$t(`${name}.title`),\n          value: name\n        })\n      )\n      return [allEntityTypeOptions].concat(options)\n    },\n\n    sortByOptions() {\n      return ['created_at', 'updated_at', 'last_comment_date'].map(name => ({\n        label: name,\n        value: name\n      }))\n    },\n\n    filteredConcepts() {\n      let concepts = [...this.displayedConcepts]\n\n      if (this.filters.taskStatusId) {\n        concepts = concepts.filter(\n          concept =>\n            concept.tasks[0].task_status_id === this.filters.taskStatusId\n        )\n      }\n      if (this.filters.publisher) {\n        concepts = concepts.filter(\n          concept => concept.created_by === this.filters.publisher.id\n        )\n      }\n      if (this.filters.entityType) {\n        concepts = concepts.filter(concept =>\n          concept.tags?.some(\n            // FIXME: condition related to many-to-many relationship\n            entity => entity.type === this.filters.entityType\n          )\n        )\n      }\n      return concepts.sort(\n        firstBy(this.filters.sortBy, -1).thenBy('created_at', -1)\n      )\n    },\n\n    searchField() {\n      return this.$refs['search-field']\n    },\n\n    taskStatusList() {\n      const allStatusItem = {\n        id: null,\n        color: '#999',\n        name: this.$t('main.all'),\n        short_name: this.$t('main.all')\n      }\n      const conceptTaskStatusList = sortByName(\n        Array.from(this.taskStatusMap.values()).filter(\n          status => status.for_concept\n        )\n      )\n      return [allStatusItem].concat(conceptTaskStatusList)\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'addSelectedConcepts',\n      'addSelectedTask',\n      'clearSelectedConcepts',\n      'clearSelectedTasks',\n      'loadAssets',\n      'loadConcepts',\n      'newConcepts',\n      'setCurrentEpisode'\n    ]),\n\n    // TODO: module actions\n    setConceptSearch: searchQuery => Promise.resolve(),\n    saveConceptSearch: searchQuery => Promise.resolve(),\n    removeConceptSearch: searchQuery => Promise.resolve(),\n\n    setSearch(value) {\n      this.searchField.setValue(value)\n    },\n\n    onSearchChange() {\n      const searchQuery = this.searchField.getValue() || ''\n      if (searchQuery?.length !== 1) {\n        this.setConceptSearch(searchQuery)\n      }\n      this.setSearchInUrl()\n    },\n\n    saveSearchQuery(searchQuery) {\n      if (this.loading.savingSearch) {\n        return\n      }\n      this.loading.savingSearch = true\n      this.saveConceptSearch(searchQuery)\n        .catch(console.error)\n        .finally(() => {\n          this.loading.savingSearch = false\n        })\n    },\n\n    removeSearchQuery(searchQuery) {\n      this.removeConceptSearch(searchQuery).catch(err => {\n        if (err) console.error(err)\n      })\n    },\n\n    async refreshConcepts() {\n      this.loading.loadingConcepts = true\n      try {\n        this.setCurrentEpisode('all') // mandatory to load all assets\n        await this.loadAssets(true)\n        await this.loadConcepts()\n      } catch (err) {\n        console.error(err)\n        this.errors.loadingConcepts = true\n      } finally {\n        this.loading.loadingConcepts = false\n      }\n    },\n\n    entityPath(entity, section) {\n      const episodeId = this.isTVShow ? entity.episode_id || 'main' : null\n      return getEntityPath(\n        entity.id,\n        this.currentProduction.id,\n        section,\n        episodeId,\n        { section: 'concepts' }\n      )\n    },\n\n    getLinkedEntities(concept) {\n      return concept.entity_concept_links\n        .map(id => this.assetMap.get(id))\n        .filter(Boolean)\n    },\n\n    getTaskStatus(concept) {\n      return this.taskStatusMap.get(concept.tasks[0].task_status_id)\n    },\n\n    hasTask(concept) {\n      return concept.tasks?.length\n    },\n\n    isSelected(concept) {\n      return this.selectedConcepts.has(concept.id)\n    },\n\n    onSelectConcept(concept, isMultipleSelection = false) {\n      const selection = isMultipleSelection\n        ? new Map(this.selectedConcepts)\n        : new Map()\n      if (\n        (isMultipleSelection && this.isSelected(concept)) ||\n        (!isMultipleSelection && concept === this.currentConcept)\n      ) {\n        selection.delete(concept.id)\n      } else {\n        selection.set(concept.id, concept)\n      }\n      this.clearSelectedConcepts()\n      this.addSelectedConcepts(selection)\n\n      this.clearSelectedTasks()\n      if (this.currentTask) {\n        this.addSelectedTask(this.currentTask)\n      }\n    },\n\n    openAddConceptModal() {\n      this.modals.addConcept = true\n    },\n\n    closeAddConceptModal() {\n      this.modals.addConcept = false\n    },\n\n    async confirmAddConceptModal(forms) {\n      this.loading.addingConcept = true\n      try {\n        await this.newConcepts(forms)\n        this.closeAddConceptModal()\n      } catch (err) {\n        console.error(err)\n        this.errors.addingConcept = true\n      } finally {\n        this.loading.addingConcept = false\n      }\n    },\n\n    reset() {\n      this.clearSelectedConcepts()\n      this.clearSelectedTasks()\n      this.refreshConcepts()\n    }\n  },\n\n  watch: {\n    currentProduction: {\n      immediate: true,\n      handler() {\n        // HACK: the store init a wrong current production by default\n        const productionId = this.$route.params.production_id\n        if (this.currentProduction?.id === productionId) {\n          this.reset()\n        }\n      }\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('concepts.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.filters {\n  display: flex;\n  align-items: flex-end;\n  gap: 0 20px;\n  padding: 10px;\n\n  .field {\n    margin-bottom: 1em;\n\n    .label {\n      padding-top: 5px;\n    }\n  }\n\n  .right {\n    margin-left: auto;\n  }\n}\n\n.concept-list {\n  overflow-x: auto;\n}\n\n.items {\n  cursor: pointer;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  list-style: none;\n  margin: 0;\n  width: 100vw;\n\n  .item {\n    display: flex;\n    flex-direction: column;\n    width: 300px;\n    background-color: var(--background);\n    border-radius: 1em;\n    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n\n    .dark & {\n      background-color: var(--background-alt);\n    }\n\n    &.selected-item {\n      background-color: var(--background-selected);\n    }\n\n    &:hover {\n      background-color: var(--background-hover);\n    }\n\n    .description {\n      display: flex;\n      flex-direction: column;\n      flex-wrap: wrap;\n      row-gap: 10px;\n      padding: 0.3em 1em;\n      margin: 0.3em 0;\n      flex: 1;\n    }\n\n    .tags {\n      display: inline-flex;\n      flex-wrap: wrap;\n      gap: 10px;\n      margin-left: 0;\n      flex: 1;\n\n      .tag {\n        cursor: pointer;\n\n        &:hover {\n          transform: scale(1.1);\n        }\n      }\n    }\n\n    .tag {\n      font-weight: 500;\n      letter-spacing: 1px;\n    }\n\n    .status {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n\n      .tag {\n        text-transform: uppercase;\n      }\n    }\n  }\n}\n\n.footer {\n  position: sticky;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  padding: 3em;\n\n  .dark & {\n    background-color: var(--background-alt);\n  }\n}\n</style>\n"],"names":["_sfc_main","searchMixin","AddPreviewModal","ButtonSimple","Combobox","ComboboxStatus","EntityPreview","PeopleAvatar","PeopleField","SearchField","SearchQueryList","TableInfo","TaskInfo","mapGetters","publishers","concept","personId","person","sortByName","_b","_a","allEntityTypeOptions","options","name","concepts","entity","firstBy","allStatusItem","conceptTaskStatusList","status","mapActions","searchQuery","value","err","section","episodeId","getEntityPath","id","isMultipleSelection","selection","forms","productionId"],"mappings":"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"}