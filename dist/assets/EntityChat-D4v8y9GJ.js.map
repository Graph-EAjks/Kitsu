{"version":3,"file":"EntityChat-D4v8y9GJ.js","sources":["../../src/components/pages/entities/EntityChatDays.vue","../../src/components/pages/entities/EntityChat.vue"],"sourcesContent":["<template>\n  <div class=\"messages\" ref=\"messages\">\n    <div class=\"day-messages\" :key=\"day.title\" v-for=\"day in messageList\">\n      <div class=\"day-title\">\n        <span>\n          {{ day.title }}\n        </span>\n      </div>\n      <div\n        class=\"message\"\n        :key=\"chatMessage.id\"\n        v-for=\"chatMessage in day.messages\"\n      >\n        <people-avatar\n          class=\"message-avatar flexrow-item\"\n          :person=\"personMap.get(chatMessage.data.person_id)\"\n          :size=\"30\"\n          :font-size=\"15\"\n        />\n        <div class=\"message-content\">\n          <div class=\"message-header-wrapper flexrow\">\n            <div class=\"message-sender mr05\">\n              {{ personMap.get(chatMessage.data.person_id).name }}\n            </div>\n            <div class=\"message-date\">\n              {{ renderDate(chatMessage.data.created_at) }}\n            </div>\n          </div>\n\n          <div\n            class=\"message-text\"\n            :key=\"'submessage-' + messageText.id\"\n            v-for=\"messageText in chatMessage.texts\"\n          >\n            <div\n              v-html=\"\n                renderComment(\n                  messageText ? messageText.text : '',\n                  [],\n                  [],\n                  personMap,\n                  departmentMap,\n                  ''\n                )\n              \"\n            ></div>\n            <div class=\"attachments\" v-if=\"messageText\">\n              <img\n                class=\"attachment-thumbnail\"\n                :key=\"attachment.id\"\n                :src=\"getAttachmentThumbnailPath(attachment)\"\n                @click=\"currentAttachment = attachment\"\n                v-for=\"attachment in pictureAttachments(\n                  messageText.attachment_files\n                )\"\n              />\n              <a\n                class=\"attachment\"\n                target=\"_blank\"\n                :key=\"attachment.id\"\n                :href=\"getDownloadAttachmentPath(attachment)\"\n                v-for=\"attachment in fileAttachments(\n                  messageText.attachment_files\n                )\"\n              >\n                {{ attachment.name }}\n              </a>\n            </div>\n            <div\n              class=\"delete-message-button\"\n              @click=\"$emit('delete-message', chatMessage.data.id)\"\n              v-if=\"chatMessage.data.person_id === user.id\"\n            >\n              <x-icon :size=\"12\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <preview-modal\n      :active=\"currentAttachment != null\"\n      :attachment=\"currentAttachment\"\n      @cancel=\"currentAttachment = null\"\n    />\n  </div>\n</template>\n\n<script>\nimport { XIcon } from 'lucide-vue'\nimport moment from 'moment-timezone'\nimport { mapGetters } from 'vuex'\n\nimport { domMixin } from '@/components/mixins/dom'\nimport {\n  getAttachmentThumbnailPath,\n  getDownloadAttachmentPath\n} from '@/lib/path'\nimport { parseDate } from '@/lib/time'\nimport { renderComment } from '@/lib/render'\nimport files from '@/lib/files'\n\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar.vue'\nimport PreviewModal from '@/components/modals/PreviewModal.vue'\n\nexport default {\n  name: 'entity-chat-days',\n\n  mixins: [domMixin],\n\n  components: {\n    PeopleAvatar,\n    PreviewModal,\n    XIcon\n  },\n\n  data() {\n    return {\n      currentAttachment: null\n    }\n  },\n\n  props: {\n    messages: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  computed: {\n    ...mapGetters(['departmentMap', 'personMap', 'user']),\n\n    messageList() {\n      const messages = [...this.messages].sort((a, b) =>\n        moment(a.created_at).isAfter(moment(b.created_at))\n      )\n      const dayList = []\n      let lastMessage = { data: null }\n      let lastDay = null\n\n      messages.forEach(message => {\n        const messageDate = moment(message.created_at).tz(this.user.timezone)\n        if (lastDay && messageDate.format('YYYY-MM-DD') === lastDay.date) {\n          if (\n            lastMessage &&\n            lastMessage.data &&\n            message.person_id === lastMessage.data.person_id &&\n            moment(message.created_at).diff(lastMessage.data.created_at, 'm') <\n              5\n          ) {\n            lastMessage.texts.push(message)\n          } else {\n            const element = {\n              data: message,\n              texts: [message ? message : '']\n            }\n            lastMessage = element\n            lastDay.messages.push(element)\n          }\n        } else {\n          const element = {\n            data: message,\n            texts: [message ? message : '']\n          }\n          lastDay = {\n            title: messageDate.format('LL'),\n            date: messageDate.format('YYYY-MM-DD'),\n            messages: [element]\n          }\n          lastMessage = element\n          dayList.push(lastDay)\n        }\n      })\n\n      return dayList.reverse()\n    }\n  },\n\n  methods: {\n    renderComment,\n\n    renderDate(date) {\n      date = moment(parseDate(date)).tz(this.user.timezone)\n      return date.tz(this.user.timezone).format('HH:mm')\n    },\n\n    getAttachmentThumbnailPath,\n\n    getDownloadAttachmentPath,\n\n    pictureAttachments(attachments) {\n      if (!attachments) return []\n      return attachments\n        .filter(attachment =>\n          files.IMG_EXTENSIONS.includes(attachment.extension)\n        )\n        .sort((a, b) =>\n          a.name.localeCompare(b.name, undefined, {\n            numeric: true\n          })\n        )\n    },\n\n    fileAttachments(attachments) {\n      if (!attachments) return []\n      return attachments\n        .filter(\n          attachment => !files.IMG_EXTENSIONS.includes(attachment.extension)\n        )\n        .sort((a, b) =>\n          a.name.localeCompare(b.name, undefined, {\n            numeric: true\n          })\n        )\n    },\n\n    scrollToBottom() {\n      this.$refs.messages.scrollTop = this.$refs.messages.offsetHeight\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .messages {\n    background-color: var(--background-alt);\n    .message-box {\n      textarea {\n        background: var(--background-alt);\n      }\n    }\n  }\n}\n\n.day-messages {\n  width: 100%;\n}\n\n.day-title {\n  border-bottom: 1px solid var(--border-alt);\n  margin-top: 2em;\n  margin-bottom: 2em;\n  position: relative;\n\n  span {\n    background: var(--background-alt);\n    left: 50%;\n    padding: 0 1em;\n    position: absolute;\n    top: -10px;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  }\n}\n\n.messages {\n  align-items: flex-end;\n  color: var(--text);\n  display: flex;\n  flex: 1;\n  flex-direction: column-reverse;\n  overflow: auto;\n  padding-bottom: 1em;\n\n  .message {\n    align-items: flex-start;\n    display: flex;\n    background: transparent;\n    margin-bottom: 0.5rem;\n    width: 100%;\n\n    .message-avatar {\n      margin-left: 10px;\n      margin-top: 6px;\n\n      &.flexrow-item {\n        margin-right: 0.2rem;\n      }\n    }\n\n    .message-header-wrapper {\n      align-items: flex-end;\n      display: flex;\n      margin-left: 0.5rem;\n      margin-top: 0.2rem;\n\n      .message-date {\n        font-size: 10px;\n        line-height: 20px;\n      }\n    }\n\n    .message-sender {\n      font-weight: bold;\n    }\n\n    .message-content {\n      margin-left: 0.2rem;\n      width: 100%;\n    }\n\n    .attachment-thumbnail {\n      border-radius: 10px;\n      cursor: pointer;\n      height: 100px;\n      margin-right: 5px;\n      margin-top: 10px;\n      width: 100px;\n    }\n\n    .message-text {\n      border-radius: 4px;\n      margin-right: 10px;\n      padding: 0.1em 0.5em;\n      position: relative;\n\n      .delete-message-button {\n        cursor: pointer;\n        display: none;\n        position: absolute;\n        right: 5px;\n        top: 0;\n      }\n\n      &:hover {\n        background-color: var(--background-alt);\n        .delete-message-button {\n          display: block;\n        }\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"mt1 entity-chat\">\n    <template v-if=\"!entity\">\n      <p>\n        {{ $t('chats.no_chat') }}\n      </p>\n      <div class=\"has-text-centered\" v-if=\"mainConfig.indexer_configured\">\n        <button-simple\n          :text=\"$t('chats.search_entity')\"\n          @click=\"$router.push('entity-search')\"\n        />\n      </div>\n    </template>\n    <template v-else>\n      <div class=\"participants flexrow\">\n        <people-avatar\n          class=\"flexrow-item\"\n          :key=\"participant.id\"\n          :person=\"participant\"\n          :size=\"20\"\n          :font-size=\"10\"\n          v-for=\"participant in participantList\"\n        />\n        <span class=\"filler\"></span>\n        <button-simple\n          class=\"flexrow-item\"\n          :text=\"$t('chats.leave')\"\n          :is-loading=\"loading.leave\"\n          @click=\"leaveChat\"\n          v-if=\"isInChat\"\n        />\n      </div>\n      <div class=\"has-text-centered filler\" v-if=\"loading.chat\">\n        <spinner class=\"mt1\" />\n      </div>\n      <entity-chat-days\n        ref=\"messages\"\n        :messages=\"messages\"\n        @delete-message=\"showConfirmDeleteMessage\"\n        v-else\n      />\n      <div class=\"join-chat\" v-if=\"!isInChat\">\n        <button class=\"button\" :is-loading=\"loading.join\" @click=\"joinChat\">\n          {{ $t('chats.join') }}\n        </button>\n      </div>\n      <div class=\"message-box\" v-else>\n        <div>\n          <textarea\n            id=\"message-box\"\n            ref=\"messageBox\"\n            :disabled=\"loading.send\"\n            @keydown.enter.prevent=\"sendMessage\"\n            v-focus\n            v-model=\"currentMessage\"\n          >\n          </textarea>\n          <div class=\"buttons\">\n            <button-simple\n              class=\"attach-button\"\n              icon=\"attach\"\n              @click=\"modals.addAttachment = true\"\n            />\n            <div class=\"filler\"></div>\n            <button-simple\n              class=\"send-button\"\n              icon=\"send\"\n              :is-loading=\"loading.send\"\n              @click=\"sendMessage\"\n            />\n          </div>\n        </div>\n        <div class=\"attachments\" v-if=\"attachments.length > 0\">\n          <div\n            class=\"attachment-name\"\n            :key=\"attachment.name\"\n            v-for=\"attachment in attachments\"\n          >\n            {{ attachment.get('file').name }}\n            <span @click=\"removeAttachment(attachment)\">\n              <x-icon :size=\"8\" />\n            </span>\n          </div>\n        </div>\n      </div>\n    </template>\n\n    <add-attachment-modal\n      ref=\"add-attachment-modal\"\n      :active=\"modals.addAttachment\"\n      :is-loading=\"loading.addAttachment\"\n      :is-error=\"errors.addAttachment\"\n      :title=\"name\"\n      @cancel=\"closeAttachmentModal\"\n      @confirm=\"addAttachment\"\n    />\n\n    <confirm-modal\n      :active=\"modals.deleteMessage\"\n      :confirm-button-text=\"$t('chats.delete_message_confirm')\"\n      :text=\"$t('chats.delete_message')\"\n      :is-loading=\"loading.deleteMessage\"\n      :is-error=\"errors.deleteMessage\"\n      @cancel=\"modals.deleteMessage = false\"\n      @confirm=\"deleteMessage\"\n    />\n  </div>\n</template>\n\n<script>\nimport { XIcon } from 'lucide-vue'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { sortPeople } from '@/lib/sorting'\nimport { domMixin } from '@/components/mixins/dom'\n\nimport AddAttachmentModal from '@/components/modals/AddAttachmentModal.vue'\nimport ButtonSimple from '@/components/widgets/ButtonSimple.vue'\nimport ConfirmModal from '@/components/modals/ConfirmModal.vue'\nimport EntityChatDays from '@/components/pages/entities/EntityChatDays.vue'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar.vue'\nimport Spinner from '@/components/widgets/Spinner.vue'\n\nexport default {\n  name: 'entity-chat',\n\n  mixins: [domMixin],\n\n  components: {\n    AddAttachmentModal,\n    ConfirmModal,\n    ButtonSimple,\n    EntityChatDays,\n    PeopleAvatar,\n    Spinner,\n    XIcon\n  },\n\n  data() {\n    return {\n      attachments: [],\n      chat: {},\n      errors: {\n        addAttachment: false,\n        chat: false,\n        deleteMessage: false,\n        join: false,\n        leave: false,\n        send: false\n      },\n      loading: {\n        addAttachment: false,\n        chat: false,\n        deleteMessage: false,\n        join: false,\n        leave: false,\n        send: false\n      },\n      modals: {\n        addAttachment: false,\n        deleteMessage: false\n      },\n      participants: [],\n      currentMessage: '',\n      messages: [],\n      messageMap: new Map()\n    }\n  },\n\n  props: {\n    entity: {\n      type: Object,\n      default: () => {}\n    },\n    name: {\n      type: String,\n      default: ''\n    }\n  },\n\n  mounted() {\n    if (!this.entity) return\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters(['mainConfig', 'personMap', 'user']),\n\n    isInChat() {\n      return this.participants.includes(this.user.id)\n    },\n\n    participantList() {\n      return sortPeople(this.participants.map(pid => this.personMap.get(pid)))\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'deleteChatMessage',\n      'getChatMessage',\n      'getEntityChat',\n      'getEntityChatMessages',\n      'joinEntityChat',\n      'leaveEntityChat',\n      'sendChatMessage'\n    ]),\n\n    async reset() {\n      this.loading.chat = true\n      this.errors.chat = false\n      try {\n        this.chat = await this.getEntityChat(this.entity.id)\n        this.messages = await this.getEntityChatMessages(this.entity.id)\n        this.messages.forEach(m => this.messageMap.set(m.id, m))\n        this.participants = this.chat.participants || []\n      } catch (e) {\n        this.errors.chat = true\n        console.error(e)\n      } finally {\n        this.loading.chat = false\n      }\n    },\n\n    async joinChat() {\n      this.loading.join = true\n      this.errors.join = false\n      try {\n        await this.joinEntityChat(this.entity.id)\n      } catch (e) {\n        this.errors.join = true\n        console.error(e)\n      } finally {\n        this.loading.join = false\n      }\n    },\n\n    async leaveChat() {\n      this.loading.leave = true\n      this.errors.leave = false\n      try {\n        await this.leaveEntityChat(this.entity.id)\n      } catch (e) {\n        this.errors.leave = true\n        console.error(e)\n      } finally {\n        this.loading.leave = false\n      }\n    },\n\n    async sendMessage(event) {\n      if (event && event.keyCode === 13 && event.shiftKey) {\n        this.currentMessage += '\\n'\n        return\n      }\n      this.errors.send = false\n      this.loading.send = true\n      try {\n        const message = await this.sendChatMessage({\n          entityId: this.entity.id,\n          message: this.currentMessage,\n          attachments: this.attachments\n        })\n        this.currentMessage = ''\n        this.attachments = []\n        this.messages.push(message)\n        this.messageMap.set(message.id, message)\n        this.$refs.messages.scrollToBottom()\n        this.$nextTick(() => {\n          this.$refs.messageBox.focus()\n        })\n      } catch (e) {\n        this.errors.send = true\n        console.error(e)\n      } finally {\n        this.loading.send = false\n      }\n    },\n\n    showConfirmDeleteMessage(messageId) {\n      this.modals.deleteMessage = true\n      this.errors.deleteMessage = false\n      this.loading.deleteMessage = false\n      this.messageToDeleteId = messageId\n    },\n\n    async deleteMessage() {\n      const messageId = this.messageToDeleteId\n      this.errors.deleteMessage = false\n      try {\n        this.loading.deleteMessage = true\n        this.messages = this.messages.filter(m => m.id !== messageId)\n        this.messageMap.delete(messageId)\n        await this.deleteChatMessage({\n          entityId: this.entity.id,\n          messageId\n        })\n        this.modals.deleteMessage = false\n        this.messageToDeleteId = null\n      } catch (e) {\n        this.errors.deleteMessage = true\n        console.error(e)\n      } finally {\n        this.loading.deleteMessage = false\n      }\n    },\n\n    focusMessageBox() {\n      const messageBox = this.$refs.messageBox\n      if (messageBox) messageBox.focus()\n    },\n\n    addAttachment(forms) {\n      this.attachments = this.attachments.concat(forms)\n      this.closeAttachmentModal()\n    },\n\n    closeAttachmentModal() {\n      this.modals.addAttachment = false\n    },\n\n    removeAttachment(form) {\n      this.attachments = this.attachments.filter(f => f !== form)\n    }\n  },\n\n  socket: {\n    events: {\n      'chat:joined'(eventData) {\n        if (\n          eventData.chat_id === this.chat.id &&\n          !this.participants.includes(eventData.person_id)\n        ) {\n          this.participants.push(eventData.person_id)\n        }\n      },\n\n      'chat:left'(eventData) {\n        if (\n          eventData.chat_id === this.chat.id &&\n          this.participants.includes(eventData.person_id)\n        ) {\n          this.participants = this.participants.filter(\n            pId => pId !== eventData.person_id\n          )\n        }\n      },\n\n      async 'chat:new-message'(eventData) {\n        if (eventData.chat_id === this.chat.id) {\n          const message = await this.getChatMessage({\n            entityId: this.entity.id,\n            messageId: eventData.chat_message_id\n          })\n          if (!this.messageMap.has(eventData.chat_message_id)) {\n            this.messageMap.set(message.id, message)\n            this.messages.push(message)\n            this.focusMessageBox()\n          }\n        }\n      },\n\n      'chat:deleted-message'(eventData) {\n        if (eventData.chat_id === this.chat.id) {\n          this.messages = this.messages.filter(\n            m => m.id !== eventData.message_id\n          )\n        }\n      }\n    }\n  },\n\n  watch: {\n    entity() {\n      if (this.entity) this.reset()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .entity-chat {\n    .participants {\n      background: var(--background);\n    }\n\n    .messages {\n      background-color: var(--background-alt);\n      .message-box {\n        textarea {\n          background: var(--background-alt);\n        }\n      }\n    }\n  }\n}\n\n.entity-chat {\n  border-radius: 16px;\n  border: 1px solid var(--border-alt);\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n  overflow: hidden;\n\n  p {\n    color: var(--text);\n    padding: 2em;\n    text-align: center;\n  }\n\n  .participants {\n    background: var(--background-alt);\n    border-bottom: 2px solid var(--border-alt);\n    border-top-left-radius: 17px;\n    border-top-right-radius: 17px;\n    display: flex;\n    justify-content: space-between;\n    min-height: 30px;\n    padding: 5px 10px;\n\n    .flexrow-item {\n      margin-right: 3px;\n    }\n  }\n\n  .join-chat {\n    text-align: center;\n    width: 100%;\n\n    .button {\n      width: 100%;\n    }\n  }\n\n  .message-box {\n    position: relative;\n\n    textarea {\n      background: var(--background);\n      box-shadow: inset 0 0 5px 0 rgba(0, 0, 0, 0.1);\n      font-size: 14px;\n      margin-bottom: -5px;\n      height: 60px;\n      padding: 10px;\n      width: 100%;\n    }\n\n    .buttons {\n      display: flex;\n      justify-content: space-between;\n      margin-bottom: 5px;\n      margin-top: 5px;\n      padding-left: 5px;\n      padding-right: 5px;\n    }\n  }\n}\n\n.attachments {\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 5px;\n  padding: 5px;\n\n  .attachment-name {\n    background: var(--background-alt);\n    border-radius: 10px;\n    color: var(--text);\n    cursor: pointer;\n    font-size: 12px;\n    margin-right: 5px;\n    padding: 5px;\n  }\n}\n</style>\n"],"names":["_sfc_main","domMixin","PeopleAvatar","PreviewModal","XIcon","mapGetters","messages","a","b","moment","dayList","lastMessage","lastDay","message","messageDate","element","renderComment","date","parseDate","getAttachmentThumbnailPath","getDownloadAttachmentPath","attachments","attachment","files","AddAttachmentModal","ConfirmModal","ButtonSimple","EntityChatDays","Spinner","sortPeople","pid","mapActions","m","e","event","messageId","messageBox","forms","form","f","eventData","pId"],"mappings":"oKAyGA,MAAAA,EAAA,CACA,KAAA,mBAEA,OAAA,CAAAC,CAAA,EAEA,WAAA,CACA,aAAAC,EACA,aAAAC,EACA,MAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,kBAAA,IACA,CACA,EAEA,MAAA,CACA,SAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CAAA,gBAAA,YAAA,MAAA,CAAA,EAEA,aAAA,CACA,MAAAC,EAAA,CAAA,GAAA,KAAA,QAAA,EAAA,KAAA,CAAAC,EAAAC,IACAC,EAAAF,EAAA,UAAA,EAAA,QAAAE,EAAAD,EAAA,UAAA,CAAA,CACA,EACAE,EAAA,CAAA,EACA,IAAAC,EAAA,CAAA,KAAA,IAAA,EACAC,EAAA,KAEA,OAAAN,EAAA,QAAAO,GAAA,CACA,MAAAC,EAAAL,EAAAI,EAAA,UAAA,EAAA,GAAA,KAAA,KAAA,QAAA,EACA,GAAAD,GAAAE,EAAA,OAAA,YAAA,IAAAF,EAAA,KACA,GACAD,GACAA,EAAA,MACAE,EAAA,YAAAF,EAAA,KAAA,WACAF,EAAAI,EAAA,UAAA,EAAA,KAAAF,EAAA,KAAA,WAAA,GAAA,EACA,EAEAA,EAAA,MAAA,KAAAE,CAAA,MACA,CACA,MAAAE,EAAA,CACA,KAAAF,EACA,MAAA,CAAAA,GAAA,EAAA,CACA,EACAF,EAAAI,EACAH,EAAA,SAAA,KAAAG,CAAA,CACA,KACA,CACA,MAAAA,EAAA,CACA,KAAAF,EACA,MAAA,CAAAA,GAAA,EAAA,CACA,EACAD,EAAA,CACA,MAAAE,EAAA,OAAA,IAAA,EACA,KAAAA,EAAA,OAAA,YAAA,EACA,SAAA,CAAAC,CAAA,CACA,EACAJ,EAAAI,EACAL,EAAA,KAAAE,CAAA,CACA,CACA,CAAA,EAEAF,EAAA,QAAA,CACA,CACA,EAEA,QAAA,CACA,cAAAM,EAEA,WAAAC,EAAA,CACA,OAAAA,EAAAR,EAAAS,EAAAD,CAAA,CAAA,EAAA,GAAA,KAAA,KAAA,QAAA,EACAA,EAAA,GAAA,KAAA,KAAA,QAAA,EAAA,OAAA,OAAA,CACA,EAEA,2BAAAE,EAEA,0BAAAC,EAEA,mBAAAC,EAAA,CACA,OAAAA,EACAA,EACA,OAAAC,GACAC,EAAA,eAAA,SAAAD,EAAA,SAAA,CACA,EACA,KAAA,CAAAf,EAAAC,IACAD,EAAA,KAAA,cAAAC,EAAA,KAAA,OAAA,CACA,QAAA,EACA,CAAA,CACA,EATA,CAAA,CAUA,EAEA,gBAAAa,EAAA,CACA,OAAAA,EACAA,EACA,OACAC,GAAA,CAAAC,EAAA,eAAA,SAAAD,EAAA,SAAA,CACA,EACA,KAAA,CAAAf,EAAAC,IACAD,EAAA,KAAA,cAAAC,EAAA,KAAA,OAAA,CACA,QAAA,EACA,CAAA,CACA,EATA,CAAA,CAUA,EAEA,gBAAA,CACA,KAAA,MAAA,SAAA,UAAA,KAAA,MAAA,SAAA,YACA,CACA,CACA,yyDCjGAR,EAAA,CACA,KAAA,cAEA,OAAA,CAAAC,CAAA,EAEA,WAAA,CACA,mBAAAuB,EACA,aAAAC,EACA,aAAAC,EACA,eAAAC,EACA,aAAAzB,EACA,QAAA0B,EACA,MAAAxB,CACA,EAEA,MAAA,CACA,MAAA,CACA,YAAA,CAAA,EACA,KAAA,CAAA,EACA,OAAA,CACA,cAAA,GACA,KAAA,GACA,cAAA,GACA,KAAA,GACA,MAAA,GACA,KAAA,EACA,EACA,QAAA,CACA,cAAA,GACA,KAAA,GACA,cAAA,GACA,KAAA,GACA,MAAA,GACA,KAAA,EACA,EACA,OAAA,CACA,cAAA,GACA,cAAA,EACA,EACA,aAAA,CAAA,EACA,eAAA,GACA,SAAA,CAAA,EACA,WAAA,IAAA,GACA,CACA,EAEA,MAAA,CACA,OAAA,CACA,KAAA,OACA,QAAA,IAAA,CAAA,CACA,EACA,KAAA,CACA,KAAA,OACA,QAAA,EACA,CACA,EAEA,SAAA,CACA,KAAA,QACA,KAAA,MAAA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CAAA,aAAA,YAAA,MAAA,CAAA,EAEA,UAAA,CACA,OAAA,KAAA,aAAA,SAAA,KAAA,KAAA,EAAA,CACA,EAEA,iBAAA,CACA,OAAAwB,EAAA,KAAA,aAAA,IAAAC,GAAA,KAAA,UAAA,IAAAA,CAAA,CAAA,CAAA,CACA,CACA,EAEA,QAAA,CACA,GAAAC,EAAA,CACA,oBACA,iBACA,gBACA,wBACA,iBACA,kBACA,iBACA,CAAA,EAEA,MAAA,OAAA,CACA,KAAA,QAAA,KAAA,GACA,KAAA,OAAA,KAAA,GACA,GAAA,CACA,KAAA,KAAA,MAAA,KAAA,cAAA,KAAA,OAAA,EAAA,EACA,KAAA,SAAA,MAAA,KAAA,sBAAA,KAAA,OAAA,EAAA,EACA,KAAA,SAAA,QAAAC,GAAA,KAAA,WAAA,IAAAA,EAAA,GAAAA,CAAA,CAAA,EACA,KAAA,aAAA,KAAA,KAAA,cAAA,CAAA,CACA,OAAAC,EAAA,CACA,KAAA,OAAA,KAAA,GACA,QAAA,MAAAA,CAAA,CACA,QAAA,CACA,KAAA,QAAA,KAAA,EACA,CACA,EAEA,MAAA,UAAA,CACA,KAAA,QAAA,KAAA,GACA,KAAA,OAAA,KAAA,GACA,GAAA,CACA,MAAA,KAAA,eAAA,KAAA,OAAA,EAAA,CACA,OAAAA,EAAA,CACA,KAAA,OAAA,KAAA,GACA,QAAA,MAAAA,CAAA,CACA,QAAA,CACA,KAAA,QAAA,KAAA,EACA,CACA,EAEA,MAAA,WAAA,CACA,KAAA,QAAA,MAAA,GACA,KAAA,OAAA,MAAA,GACA,GAAA,CACA,MAAA,KAAA,gBAAA,KAAA,OAAA,EAAA,CACA,OAAAA,EAAA,CACA,KAAA,OAAA,MAAA,GACA,QAAA,MAAAA,CAAA,CACA,QAAA,CACA,KAAA,QAAA,MAAA,EACA,CACA,EAEA,MAAA,YAAAC,EAAA,CACA,GAAAA,GAAAA,EAAA,UAAA,IAAAA,EAAA,SAAA,CACA,KAAA,gBAAA;AAAA,EACA,MACA,CACA,KAAA,OAAA,KAAA,GACA,KAAA,QAAA,KAAA,GACA,GAAA,CACA,MAAArB,EAAA,MAAA,KAAA,gBAAA,CACA,SAAA,KAAA,OAAA,GACA,QAAA,KAAA,eACA,YAAA,KAAA,WACA,CAAA,EACA,KAAA,eAAA,GACA,KAAA,YAAA,CAAA,EACA,KAAA,SAAA,KAAAA,CAAA,EACA,KAAA,WAAA,IAAAA,EAAA,GAAAA,CAAA,EACA,KAAA,MAAA,SAAA,eAAA,EACA,KAAA,UAAA,IAAA,CACA,KAAA,MAAA,WAAA,MAAA,CACA,CAAA,CACA,OAAAoB,EAAA,CACA,KAAA,OAAA,KAAA,GACA,QAAA,MAAAA,CAAA,CACA,QAAA,CACA,KAAA,QAAA,KAAA,EACA,CACA,EAEA,yBAAAE,EAAA,CACA,KAAA,OAAA,cAAA,GACA,KAAA,OAAA,cAAA,GACA,KAAA,QAAA,cAAA,GACA,KAAA,kBAAAA,CACA,EAEA,MAAA,eAAA,CACA,MAAAA,EAAA,KAAA,kBACA,KAAA,OAAA,cAAA,GACA,GAAA,CACA,KAAA,QAAA,cAAA,GACA,KAAA,SAAA,KAAA,SAAA,OAAAH,GAAAA,EAAA,KAAAG,CAAA,EACA,KAAA,WAAA,OAAAA,CAAA,EACA,MAAA,KAAA,kBAAA,CACA,SAAA,KAAA,OAAA,GACA,UAAAA,CACA,CAAA,EACA,KAAA,OAAA,cAAA,GACA,KAAA,kBAAA,IACA,OAAAF,EAAA,CACA,KAAA,OAAA,cAAA,GACA,QAAA,MAAAA,CAAA,CACA,QAAA,CACA,KAAA,QAAA,cAAA,EACA,CACA,EAEA,iBAAA,CACA,MAAAG,EAAA,KAAA,MAAA,WACAA,GAAAA,EAAA,MAAA,CACA,EAEA,cAAAC,EAAA,CACA,KAAA,YAAA,KAAA,YAAA,OAAAA,CAAA,EACA,KAAA,qBAAA,CACA,EAEA,sBAAA,CACA,KAAA,OAAA,cAAA,EACA,EAEA,iBAAAC,EAAA,CACA,KAAA,YAAA,KAAA,YAAA,OAAAC,GAAAA,IAAAD,CAAA,CACA,CACA,EAEA,OAAA,CACA,OAAA,CACA,cAAAE,EAAA,CAEAA,EAAA,UAAA,KAAA,KAAA,IACA,CAAA,KAAA,aAAA,SAAAA,EAAA,SAAA,GAEA,KAAA,aAAA,KAAAA,EAAA,SAAA,CAEA,EAEA,YAAAA,EAAA,CAEAA,EAAA,UAAA,KAAA,KAAA,IACA,KAAA,aAAA,SAAAA,EAAA,SAAA,IAEA,KAAA,aAAA,KAAA,aAAA,OACAC,GAAAA,IAAAD,EAAA,SACA,EAEA,EAEA,KAAA,mBAAAA,EAAA,CACA,GAAAA,EAAA,UAAA,KAAA,KAAA,GAAA,CACA,MAAA3B,EAAA,MAAA,KAAA,eAAA,CACA,SAAA,KAAA,OAAA,GACA,UAAA2B,EAAA,eACA,CAAA,EACA,KAAA,WAAA,IAAAA,EAAA,eAAA,IACA,KAAA,WAAA,IAAA3B,EAAA,GAAAA,CAAA,EACA,KAAA,SAAA,KAAAA,CAAA,EACA,KAAA,gBAAA,EAEA,CACA,EAEA,uBAAA2B,EAAA,CACAA,EAAA,UAAA,KAAA,KAAA,KACA,KAAA,SAAA,KAAA,SAAA,OACAR,GAAAA,EAAA,KAAAQ,EAAA,UACA,EAEA,CACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,KAAA,QAAA,KAAA,MAAA,CACA,CACA,CACA"}