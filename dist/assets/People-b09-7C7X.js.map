{"version":3,"file":"People-b09-7C7X.js","sources":["../../src/components/modals/BuildPeopleFilterModal.vue","../../src/components/modals/ChangePasswordModal.vue","../../src/components/modals/EditPersonModal.vue","../../src/components/lists/PeopleList.vue","../../src/components/pages/People.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"{\n      modal: true,\n      'is-active': active\n    }\"\n  >\n    <div @click=\"$emit('cancel')\" class=\"modal-background\"></div>\n\n    <div class=\"modal-content\">\n      <div class=\"box content\">\n        <h1 class=\"title\">\n          {{ $t('entities.build_filter.title') }}\n        </h1>\n\n        <!--combobox\n        class=\"flexrow-item\"\n        :options=\"general.unionOptions\"\n        locale-key-prefix=\"entities.build_filter.\"\n        v-model=\"union\"\n      /-->\n\n        <h3 class=\"subtitle\">\n          {{ $t('entities.build_filter.department') }}\n        </h3>\n\n        <div\n          class=\"flexrow department-filter\"\n          :key=\"'task-type-' + i\"\n          v-for=\"(departmentFilter, i) in departmentFilters.values\"\n        >\n          <combobox\n            class=\"flexrow-item\"\n            :options=\"general.operatorOptions\"\n            @input=\"onDepartmentOperatorChanged(departmentFilter)\"\n            locale-key-prefix=\"entities.build_filter.\"\n            v-model=\"departmentFilter.operator\"\n          />\n          <div class=\"flexrow-item flexrow value-column\">\n            <div\n              :key=\"`department-${index}`\"\n              v-for=\"(_, index) in departmentFilter.values\"\n            >\n              <combobox\n                class=\"flexrow-item\"\n                :options=\"departmentsOptions\"\n                v-model=\"departmentFilter.values[index]\"\n              />\n            </div>\n            <button-simple\n              class=\"mt05\"\n              icon=\"plus\"\n              @click=\"addInDepartmentFilter(departmentFilter)\"\n              v-if=\"departmentFilter.operator === 'in'\"\n            />\n          </div>\n        </div>\n\n        <modal-footer\n          :error-text=\"$t('entities.thumbnails.error')\"\n          @confirm=\"applyFilter\"\n          @cancel=\"$emit('cancel')\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { modalMixin } from '@/components/modals/base_modal'\nimport { getFilters } from '@/lib/filtering'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport Combobox from '@/components/widgets/Combobox'\nimport ModalFooter from '@/components/modals/ModalFooter'\n\nexport default {\n  name: 'build-people-filter-modal',\n  mixins: [modalMixin],\n\n  components: {\n    ButtonSimple,\n    Combobox,\n    ModalFooter\n  },\n\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      general: {\n        operatorOptions: [\n          { label: 'equal', value: '=' },\n          { label: 'not_equal', value: '=-' },\n          { label: 'in', value: 'in' }\n        ],\n        unionOptions: [\n          { label: 'union_and', value: 'and' },\n          { label: 'union_or', value: 'or' }\n        ]\n      },\n      departmentFilters: {\n        values: []\n      },\n      union: 'and'\n    }\n  },\n\n  mounted() {\n    this.reset()\n    this.setFiltersFromCurrentQuery()\n  },\n\n  computed: {\n    ...mapGetters([\n      'peopleSearchText',\n      'peopleSearchText',\n      'departmentMap',\n      'departments'\n    ]),\n\n    departmentsOptions() {\n      return this.departments.map(department => {\n        return {\n          label: department.name,\n          value: department.id\n        }\n      })\n    }\n  },\n\n  methods: {\n    ...mapActions([]),\n\n    // Build filter\n\n    applyFilter() {\n      const query = this.buildFilter()\n      this.$emit('confirm', query)\n    },\n\n    buildFilter() {\n      let query = ''\n      query = this.applyDepartmentChoice(query)\n      query = this.applyUnionChoice(query)\n      return query.trim()\n    },\n\n    addDepartmentFilter() {\n      const filter = {\n        operator: '=',\n        values: [this.departments[0].id]\n      }\n      this.departmentFilters.values.push(filter)\n      return filter\n    },\n\n    addInDepartmentFilter(departmentFilter) {\n      departmentFilter.values.push(this.departments[0].name)\n    },\n\n    removeDepartmentFilter(departmentFilter) {\n      this.departmentFilters.values = this.departmentFilters.values.filter(\n        f => f !== departmentFilter\n      )\n    },\n\n    applyDepartmentChoice(query) {\n      this.departmentFilters.values.forEach(departmentFilter => {\n        let operator = '=['\n        if (departmentFilter.operator === '=-') operator = '=[-'\n        const value = departmentFilter.values\n          .map(dId => {\n            return this.departmentMap.get(dId)\n              ? this.departmentMap.get(dId).name\n              : this.departments[0].name\n          })\n          .join(',')\n        query += ` department${operator}${value}]`\n      })\n      return query\n    },\n\n    applyUnionChoice(query) {\n      if (this.union === 'or') {\n        query = ` +(${query.trim()})`\n      }\n      return query\n    },\n\n    // Helpers to set filters from search query\n\n    setFiltersFromCurrentQuery() {\n      if (!this.peopleSearchText) {\n        return\n      }\n      this.departmentFilters.values = []\n\n      const filters = getFilters({\n        entryIndex: [],\n        departments: this.departments,\n        persons: [],\n        query: this.peopleSearchText\n      })\n      filters.forEach(filter => {\n        this.setFiltersFromDepartmentQuery(filter)\n      })\n      if (filters.union) {\n        this.setUnion()\n      }\n    },\n\n    setFiltersFromDepartmentQuery(filter) {\n      let operator = '='\n      if (filter.values.length > 1) {\n        operator = 'in'\n      } else if (filter.excluding) {\n        operator = '=-'\n      }\n      this.departmentFilters.values.push({\n        operator,\n        values: filter.values.map(d => d.id)\n      })\n    },\n\n    setUnion() {\n      this.union = 'or'\n    },\n\n    // General\n\n    onDepartmentOperatorChanged(departmentFilter) {\n      if (departmentFilter.operator !== 'in') {\n        departmentFilter.values = [departmentFilter.values[0]]\n      }\n    },\n\n    reset() {\n      this.departmentFilters.values = [\n        {\n          operator: '=',\n          values: this.departments.length > 0 ? [this.departments[0].id] : []\n        }\n      ]\n    }\n  },\n\n  watch: {\n    active() {\n      if (this.active) {\n        this.reset()\n        this.setFiltersFromCurrentQuery()\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.modal-content {\n  max-height: calc(100vh - 7rem);\n  margin-top: 3rem;\n}\n\n.add-button button {\n  margin-left: 0;\n}\n\n.subtitle {\n  color: $grey;\n  font-size: 1em;\n  margin-top: 1.1em;\n  text-transform: uppercase;\n  margin-bottom: 0.5em;\n  margin-left: 0.1em;\n}\n\n.field {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.department-filter {\n  margin-bottom: 0.3em;\n  align-items: flex-start;\n\n  .descriptor-text-value {\n    padding: 0;\n  }\n}\n\n.value-column {\n  flex-direction: column;\n  align-items: flex-start;\n}\n</style>\n","<template>\n  <div\n    :class=\"{\n      modal: true,\n      'is-active': active\n    }\"\n  >\n    <div class=\"modal-background\" @click=\"$emit('cancel')\"></div>\n\n    <div class=\"modal-content\">\n      <div class=\"box\">\n        <h1 class=\"title\">\n          {{ $t('people.change_password_for') }} {{ person.name }}\n        </h1>\n\n        <form v-on:submit.prevent>\n          <text-field\n            :disabled=\"person.is_generated_from_ldap\"\n            :label=\"$t('people.fields.password')\"\n            ref=\"first-password\"\n            type=\"password\"\n            @enter=\"confirmClicked()\"\n            v-model=\"form.password\"\n          />\n          <text-field\n            :disabled=\"person.is_generated_from_ldap\"\n            :label=\"$t('people.fields.password_2')\"\n            type=\"password\"\n            @enter=\"confirmClicked()\"\n            v-model=\"form.password2\"\n          />\n        </form>\n\n        <div class=\"flexrow\">\n          <button\n            :class=\"{\n              button: true,\n              'is-primary': true,\n              'flexrow-item': true,\n              'is-loading': isLoading\n            }\"\n            :disabled=\"person.is_generated_from_ldap\"\n            @click=\"confirmClicked\"\n          >\n            {{ $t('profile.change_password.button') }}\n          </button>\n          <button\n            :class=\"{\n              button: true,\n              'flexrow-item': true,\n              'is-loading': isLoading,\n              'is-warning': true\n            }\"\n            :disabled=\"!(person.totp_enabled || person.email_otp_enabled)\"\n            @click=\"disableTwoFactorAuthenticationClicked\"\n          >\n            {{ $t('people.disable_2FA') }}\n          </button>\n          <div class=\"filler\"></div>\n\n          <button class=\"button is-link flexrow-item\" @click=\"$emit('cancel')\">\n            {{ $t('main.cancel') }}\n          </button>\n        </div>\n\n        <div class=\"error has-text-right mt1\" v-if=\"!isValid\">\n          {{ $t('profile.change_password.unvalid') }}\n        </div>\n        <div class=\"error has-text-right mt1\" v-if=\"isError\">\n          {{ $t('people.change_password_error') }}\n        </div>\n        <div\n          class=\"error has-text-right mt1\"\n          v-if=\"isErrorDisableTwoFactorAuthentication\"\n        >\n          {{ $t('people.disable_2FA_error') }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { modalMixin } from '@/components/modals/base_modal'\n\nimport TextField from '@/components/widgets/TextField'\n\nexport default {\n  name: 'change-password-modal',\n  mixins: [modalMixin],\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    person: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      form: {\n        password: '',\n        password2: ''\n      },\n      isLoading: false,\n      isError: false,\n      isErrorDisableTwoFactorAuthentication: false,\n      isValid: true\n    }\n  },\n\n  components: {\n    TextField\n  },\n\n  computed: {\n    ...mapGetters([])\n  },\n\n  methods: {\n    ...mapActions([\n      'changePasswordPerson',\n      'disableTwoFactorAuthenticationPerson'\n    ]),\n\n    confirmClicked() {\n      this.isErrorDisableTwoFactorAuthentication = false\n      this.isError = false\n      this.isLoading = true\n      this.changePasswordPerson({\n        person: this.person,\n        form: this.form\n      })\n        .then(() => {\n          this.$emit('confirm')\n        })\n        .catch(err => {\n          if (err.isValidPassword === false) this.isValid = false\n          else this.isError = true\n        })\n        .finally(() => {\n          this.isLoading = false\n        })\n    },\n\n    disableTwoFactorAuthenticationClicked() {\n      this.isErrorDisableTwoFactorAuthentication = false\n      this.isError = false\n      this.isLoading = true\n      this.disableTwoFactorAuthenticationPerson(this.person)\n        .catch(() => {\n          this.isErrorDisableTwoFactorAuthentication = true\n        })\n        .finally(() => {\n          this.isLoading = false\n        })\n    },\n\n    resetForm() {\n      if (this.person) {\n        this.form = {\n          password: '',\n          password2: ''\n        }\n        this.isLoading = false\n        this.isError = false\n        this.isErrorDisableTwoFactorAuthentication = false\n        this.isValid = true\n      }\n    }\n  },\n\n  watch: {\n    person() {\n      this.resetForm()\n    },\n\n    active() {\n      if (this.active) {\n        this.resetForm()\n        setTimeout(() => {\n          this.$refs['first-password'].focus()\n        }, 100)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.modal-content .box p.text {\n  margin-bottom: 1em;\n}\n.is-danger {\n  color: #ff3860;\n  font-style: italic;\n}\n</style>\n","<template>\n  <div\n    :class=\"{\n      modal: true,\n      'is-active': active\n    }\"\n  >\n    <div class=\"modal-background\" @click=\"$emit('cancel')\"></div>\n\n    <div class=\"modal-content\">\n      <div class=\"box\">\n        <h1 class=\"title\" v-if=\"personToEdit.id !== undefined\">\n          {{ $t('people.edit_title') }} {{ personName }}\n        </h1>\n        <h1 class=\"title\" v-else>\n          {{ $t('people.new_person') }}\n        </h1>\n\n        <form v-on:submit.prevent>\n          <text-field\n            :label=\"$t('people.fields.first_name')\"\n            :disabled=\"personToEdit.is_generated_from_ldap\"\n            ref=\"name-field\"\n            @enter=\"confirmClicked()\"\n            v-model=\"form.first_name\"\n          />\n          <text-field\n            :label=\"$t('people.fields.last_name')\"\n            :disabled=\"personToEdit.is_generated_from_ldap\"\n            @enter=\"confirmClicked()\"\n            v-model=\"form.last_name\"\n          />\n          <text-field\n            type=\"email\"\n            :errored=\"form.email && !isValidEmail\"\n            :label=\"$t('people.fields.email')\"\n            :disabled=\"personToEdit.is_generated_from_ldap\"\n            @enter=\"confirmClicked()\"\n            v-model=\"form.email\"\n          />\n          <text-field\n            :label=\"$t('people.fields.phone')\"\n            @enter=\"confirmClicked()\"\n            v-model=\"form.phone\"\n          />\n\n          <div class=\"departments field\">\n            <label class=\"label\">{{ $t('people.fields.departments') }}</label>\n            <p\n              class=\"empty mb1\"\n              v-if=\"form.departments && form.departments.length === 0\"\n            >\n              {{ $t('people.departments_empty') }}\n            </p>\n            <div\n              class=\"department-element mb1 mt05\"\n              :key=\"departmentId\"\n              @click=\"removeDepartment(departmentId)\"\n              v-for=\"departmentId in form.departments\"\n            >\n              <department-name\n                :department=\"departmentMap.get(departmentId)\"\n                v-if=\"departmentId\"\n              />\n            </div>\n            <div class=\"flexrow\">\n              <combobox-department\n                class=\"flexrow-item\"\n                :selectable-departments=\"selectableDepartments\"\n                @enter=\"confirmClicked\"\n                v-model=\"selectedDepartment\"\n                v-if=\"selectableDepartments.length > 0\"\n              />\n              <button\n                class=\"button is-success flexrow-item\"\n                :class=\"{\n                  'is-disabled': selectedDepartment === null\n                }\"\n                @click=\"addDepartment\"\n                v-if=\"selectableDepartments.length > 0\"\n              >\n                {{ $t('main.add') }}\n              </button>\n            </div>\n          </div>\n\n          <combobox\n            :label=\"$t('people.fields.role')\"\n            :options=\"roleOptions\"\n            localeKeyPrefix=\"people.role.\"\n            @enter=\"confirmClicked()\"\n            v-model=\"form.role\"\n          />\n          <combobox\n            :label=\"$t('people.fields.active')\"\n            :options=\"activeOptions\"\n            :disabled=\"personToEdit.is_generated_from_ldap\"\n            @enter=\"confirmClicked()\"\n            v-model=\"form.active\"\n          />\n        </form>\n\n        <div class=\"flexrow\">\n          <button\n            :class=\"{\n              button: true,\n              'flexrow-item': true,\n              'is-loading': isInviteLoading\n            }\"\n            :disabled=\"!isValidEmail\"\n            @click=\"invite\"\n            v-if=\"!isCreating && isCurrentUserAdmin\"\n          >\n            {{ $t('people.invite') }}\n          </button>\n          <div class=\"filler\"></div>\n\n          <button\n            :class=\"{\n              button: true,\n              'is-primary': true,\n              'flexrow-item': true,\n              'is-loading': isCreateInviteLoading\n            }\"\n            :disabled=\"!isValidEmail\"\n            @click=\"createAndInvite\"\n            v-if=\"isCreating && isCurrentUserAdmin\"\n          >\n            {{ $t('people.create_invite') }}\n          </button>\n          <a\n            :class=\"{\n              button: true,\n              'is-primary': true,\n              'flexrow-item': true,\n              'is-loading': isLoading\n            }\"\n            :disabled=\"!isValidEmail\"\n            @click=\"confirmClicked\"\n          >\n            {{ isCreating ? $t('people.create') : $t('people.confirm_edit') }}\n          </a>\n          <button class=\"button is-link flexrow-item\" @click=\"$emit('cancel')\">\n            {{ $t('main.cancel') }}\n          </button>\n        </div>\n\n        <div class=\"success has-text-right mt1\" v-if=\"isInvitationSuccess\">\n          {{ $t('people.invite_success') }}\n        </div>\n        <div class=\"error has-text-right mt1\" v-if=\"isInvitationError\">\n          {{ $t('people.invite_error') }}\n        </div>\n        <div class=\"error has-text-right mt1\" v-if=\"isUserLimitError\">\n          {{ $t('people.user_limit_error') }}\n        </div>\n        <div class=\"error has-text-right mt1\" v-if=\"isError\">\n          {{ $t('people.create_error') }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { modalMixin } from '@/components/modals/base_modal'\n\nimport TextField from '@/components/widgets/TextField'\nimport Combobox from '@/components/widgets/Combobox'\nimport ComboboxDepartment from '@/components/widgets/ComboboxDepartment'\nimport DepartmentName from '@/components/widgets/DepartmentName'\n\nexport default {\n  name: 'edit-person-modal',\n  mixins: [modalMixin],\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    isCreateInviteLoading: {\n      type: Boolean,\n      default: false\n    },\n    isInviteLoading: {\n      type: Boolean,\n      default: false\n    },\n    isInvitationSuccess: {\n      type: Boolean,\n      default: false\n    },\n    isInvitationError: {\n      type: Boolean,\n      default: false\n    },\n    isUserLimitError: {\n      type: Boolean,\n      default: false\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    personToEdit: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      activeOptions: [\n        { label: this.$t('main.yes'), value: 'true' },\n        { label: this.$t('main.no'), value: 'false' }\n      ],\n      isValidEmail: false,\n      form: {\n        first_name: '',\n        last_name: '',\n        email: '',\n        phone: '',\n        role: 'user',\n        active: 'true',\n        departments: []\n      },\n      roleOptions: [\n        { label: 'user', value: 'user' },\n        { label: 'supervisor', value: 'supervisor' },\n        { label: 'manager', value: 'manager' },\n        { label: 'client', value: 'client' },\n        { label: 'vendor', value: 'vendor' },\n        { label: 'admin', value: 'admin' }\n      ],\n      selectedDepartment: null\n    }\n  },\n\n  components: {\n    TextField,\n    Combobox,\n    ComboboxDepartment,\n    DepartmentName\n  },\n\n  computed: {\n    ...mapGetters([\n      'departments',\n      'departmentMap',\n      'isCurrentUserAdmin',\n      'people'\n    ]),\n\n    selectableDepartments() {\n      return this.departments.filter(department => {\n        return (\n          this.form.departments.findIndex(\n            selectedDepartment => selectedDepartment === department.id\n          ) === -1\n        )\n      })\n    },\n\n    isCreating() {\n      return this.personToEdit.id === undefined\n    },\n\n    personName() {\n      if (this.personToEdit !== undefined) {\n        return this.personToEdit.first_name + ' ' + this.personToEdit.last_name\n      } else {\n        return ''\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions([]),\n\n    createAndInvite() {\n      this.$emit('confirm-invite', this.form)\n    },\n\n    invite() {\n      this.$emit('invite', this.form)\n    },\n\n    confirmClicked() {\n      const form = { ...this.form }\n      form.active = this.form.active === 'true' || this.form.active === true\n      if (this.form.email && this.isValidEmail) {\n        this.$emit('confirm', form)\n      }\n    },\n\n    addDepartment() {\n      this.form.departments.push(this.selectedDepartment)\n      this.selectedDepartment = null\n    },\n\n    removeDepartment(idToRemove) {\n      const departmentIndex = this.form.departments.indexOf(idToRemove)\n      if (departmentIndex >= 0) {\n        this.form.departments.splice(departmentIndex, 1)\n      }\n    },\n\n    resetForm() {\n      if (this.personToEdit) {\n        this.form = {\n          first_name: this.personToEdit.first_name,\n          last_name: this.personToEdit.last_name,\n          phone: this.personToEdit.phone,\n          email: this.personToEdit.email,\n          role: this.personToEdit.role,\n          active:\n            !this.personToEdit.id || this.personToEdit.active\n              ? 'true'\n              : 'false',\n          departments: this.personToEdit.departments || []\n        }\n      } else {\n        this.form = {\n          first_name: '',\n          last_name: '',\n          email: '',\n          phone: '',\n          role: 'user',\n          active: 'true',\n          departments: []\n        }\n      }\n      this.checkEmailValidity()\n    },\n\n    checkEmailValidity() {\n      const regex =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      const isExist = this.people.some(p => {\n        return (\n          p.email === this.form.email &&\n          (!this.personToEdit || this.personToEdit.email !== p.email)\n        )\n      })\n      this.isValidEmail =\n        this.form.email && regex.test(this.form.email) && !isExist\n    }\n  },\n\n  watch: {\n    personToEdit() {\n      this.resetForm()\n    },\n\n    active() {\n      if (this.active) {\n        this.resetForm()\n        setTimeout(() => {\n          this.$refs['name-field'].focus()\n        }, 100)\n      }\n    },\n\n    'form.email'() {\n      this.checkEmailValidity()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.department-element {\n  display: inline-block;\n  margin-right: 0.2em;\n  cursor: pointer;\n}\n\n.modal-content .box p.text {\n  margin-bottom: 1em;\n}\n.is-danger {\n  color: #ff3860;\n  font-style: italic;\n}\n\n.empty {\n  color: var(--text);\n  font-style: italic;\n}\n</style>\n","<template>\n  <div class=\"data-list\">\n    <div class=\"datatable-wrapper\" ref=\"body\" v-scroll=\"onBodyScroll\">\n      <table class=\"datatable multi-section\">\n        <thead class=\"datatable-head\">\n          <tr>\n            <th scope=\"col\" class=\"name datatable-row-header\">\n              {{ $t('people.list.name') }}\n            </th>\n            <th scope=\"col\" class=\"email\">\n              {{ $t('people.list.email') }}\n            </th>\n            <th scope=\"col\" class=\"phone\">\n              {{ $t('people.list.phone') }}\n            </th>\n            <th scope=\"col\" class=\"role\">\n              {{ $t('people.list.role') }}\n            </th>\n            <th scope=\"col\" class=\"departments\">\n              {{ $t('people.list.departments') }}\n            </th>\n            <th scope=\"col\" class=\"actions\"></th>\n          </tr>\n        </thead>\n        <tbody class=\"datatable-body\" v-if=\"activePeople.length > 0\">\n          <tr class=\"datatable-type-header\">\n            <th scope=\"rowgroup\" colspan=\"5\">\n              <span class=\"datatable-row-header\">{{\n                $t('people.active')\n              }}</span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row\"\n            v-for=\"entry in activePeople\"\n            :key=\"entry.id\"\n          >\n            <people-name-cell\n              class=\"name datatable-row-header\"\n              :person=\"entry\"\n            />\n            <td class=\"email\">{{ entry.email }}</td>\n            <td class=\"phone\">{{ entry.phone }}</td>\n            <td class=\"role\">{{ $t('people.role.' + entry.role) }}</td>\n            <department-names-cell\n              class=\"departments\"\n              :departments=\"entry.departments\"\n            />\n            <row-actions-cell\n              v-if=\"isCurrentUserAdmin\"\n              :entry-id=\"entry.id\"\n              :hide-delete=\"true\"\n              :hide-change-password=\"false\"\n              @edit-clicked=\"$emit('edit-clicked', entry)\"\n              @change-password-clicked=\"$emit('change-password-clicked', entry)\"\n            />\n            <td class=\"actions\" v-else></td>\n          </tr>\n        </tbody>\n        <tbody class=\"datatable-body\" v-if=\"unactivePeople.length > 0\">\n          <tr class=\"datatable-type-header\">\n            <th scope=\"rowgroup\" colspan=\"5\">\n              <span class=\"datatable-row-header\">\n                {{ $t('people.unactive') }}\n              </span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row\"\n            v-for=\"entry in unactivePeople\"\n            :key=\"entry.id\"\n          >\n            <people-name-cell\n              class=\"name datatable-row-header\"\n              :person=\"entry\"\n            />\n            <td class=\"email\">{{ entry.email }}</td>\n            <td class=\"phone\">{{ entry.phone }}</td>\n            <td class=\"role\">{{ $t('people.role.' + entry.role) }}</td>\n            <department-names-cell\n              class=\"departments\"\n              :departments=\"entry.departments\"\n            />\n            <row-actions-cell\n              v-if=\"isCurrentUserAdmin\"\n              :entry-id=\"entry.id\"\n              :hide-change-password=\"true\"\n              @edit-clicked=\"$emit('edit-clicked', entry)\"\n              @delete-clicked=\"$emit('delete-clicked', entry)\"\n            />\n            <td class=\"actions\" v-else></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <table-info :is-loading=\"isLoading\" :is-error=\"isError\" />\n\n    <p class=\"has-text-centered footer-info\" v-if=\"!isLoading\">\n      {{ entries.length }} {{ $tc('people.persons', entries.length) }} ({{\n        activePeople.length\n      }}\n      {{ $tc('people.active_persons', activePeople.length) }})\n    </p>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport DepartmentNamesCell from '@/components/cells/DepartmentNamesCell.vue'\nimport PeopleNameCell from '@/components/cells/PeopleNameCell'\nimport RowActionsCell from '@/components/cells/RowActionsCell'\nimport TableInfo from '@/components/widgets/TableInfo'\n\nexport default {\n  name: 'people-list',\n  components: {\n    DepartmentNamesCell,\n    PeopleNameCell,\n    RowActionsCell,\n    TableInfo\n  },\n\n  props: {\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  computed: {\n    ...mapGetters(['departmentMap', 'isCurrentUserAdmin']),\n\n    activePeople() {\n      return this.entries.filter(person => person.active)\n    },\n\n    unactivePeople() {\n      return this.entries.filter(person => !person.active)\n    }\n  },\n\n  methods: {\n    ...mapActions([]),\n\n    taskColor(nbTasks) {\n      if (nbTasks < 1 || nbTasks > 4) {\n        return 'red'\n      } else {\n        return ''\n      }\n    },\n\n    onBodyScroll(event, position) {\n      this.$refs.body.style.left = `-${position.scrollLeft}px`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.name {\n  width: 230px;\n  min-width: 230px;\n  user-select: text;\n}\n.email {\n  width: 340px;\n  min-width: 340px;\n  user-select: text;\n}\n.phone {\n  width: 200px;\n  min-width: 200px;\n  user-select: text;\n}\n.role {\n  width: 200px;\n  min-width: 200px;\n}\n.actions {\n  min-width: 100px;\n}\n\n.data-list {\n  margin-top: 2em;\n}\n\n.departments-element {\n  padding: 5px;\n}\n</style>\n","<template>\n  <div class=\"people page fixed-page\">\n    <div class=\"flexrow page-header\">\n      <page-title class=\"flexrow-item filler\" :text=\"$t('people.title')\" />\n\n      <button-simple\n        class=\"flexrow-item\"\n        :title=\"$t('main.csv.import_file')\"\n        :is-responsive=\"true\"\n        icon=\"upload\"\n        @click=\"showImportModal\"\n        v-if=\"isCurrentUserAdmin\"\n      />\n      <button-href-link\n        class=\"flexrow-item\"\n        :title=\"$t('main.csv.export_file')\"\n        icon=\"download\"\n        path=\"/api/export/csv/persons.csv\"\n      />\n      <button-simple\n        class=\"flexrow-item\"\n        :text=\"$t('people.new_person')\"\n        :is-responsive=\"true\"\n        icon=\"plus\"\n        @click=\"onNewClicked\"\n        v-if=\"isCurrentUserAdmin\"\n      />\n    </div>\n\n    <div class=\"flexrow search-options\">\n      <search-field\n        ref=\"people-search-field\"\n        class=\"search flexrow-item\"\n        :can-save=\"true\"\n        @change=\"onSearchChange\"\n        @save=\"saveSearchQuery\"\n        placeholder=\"ex: John Doe\"\n      />\n      <combobox-department\n        class=\"combobox-department flexrow-item\"\n        :label=\"$t('main.department')\"\n        v-model=\"selectedDepartment\"\n      />\n      <combobox-styled\n        class=\"flexrow-item\"\n        :label=\"$t('people.fields.role')\"\n        :options=\"roleOptions\"\n        locale-key-prefix=\"people.role.\"\n        no-margin\n        v-model=\"role\"\n      />\n    </div>\n\n    <div class=\"query-list\">\n      <search-query-list\n        :queries=\"peopleSearchQueries\"\n        type=\"people\"\n        @change-search=\"changeSearch\"\n        @remove-search=\"removeSearchQuery\"\n        v-if=\"!isPeopleLoading\"\n      />\n    </div>\n\n    <people-list\n      :entries=\"currentPeople\"\n      :is-loading=\"isPeopleLoading\"\n      :is-error=\"isPeopleLoadingError\"\n      @edit-clicked=\"onEditClicked\"\n      @delete-clicked=\"onDeleteClicked\"\n      @change-password-clicked=\"onChangePasswordClicked\"\n    />\n\n    <import-render-modal\n      :active=\"modals.isImportRenderDisplayed\"\n      :is-loading=\"isImportPeopleLoading\"\n      :is-error=\"isImportPeopleLoadingError\"\n      :parsed-csv=\"parsedCSV\"\n      :form-data=\"personCsvFormData\"\n      :columns=\"[...dataMatchers, ...csvColumns, ...optionalCsvColumns]\"\n      :dataMatchers=\"dataMatchers\"\n      :database=\"filteredPeople\"\n      @reupload=\"resetImport\"\n      @cancel=\"hideImportRenderModal\"\n      @confirm=\"uploadImportFile\"\n    />\n\n    <import-modal\n      ref=\"import-modal\"\n      :active=\"modals.importModal\"\n      :is-loading=\"isImportPeopleLoading\"\n      :is-error=\"isImportPeopleLoadingError\"\n      :form-data=\"personCsvFormData\"\n      :columns=\"[...dataMatchers, ...csvColumns]\"\n      :optional-columns=\"optionalCsvColumns\"\n      @cancel=\"hideImportModal\"\n      @confirm=\"renderImport\"\n    />\n\n    <edit-person-modal\n      :active=\"modals.edit\"\n      :is-create-invite-loading=\"loading.createAndInvite\"\n      :is-error=\"errors.edit\"\n      :is-invite-loading=\"loading.invite\"\n      :is-invitation-success=\"success.invite\"\n      :is-invitation-error=\"errors.invite\"\n      :is-loading=\"loading.edit\"\n      :is-user-limit-error=\"errors.userLimit\"\n      :person-to-edit=\"personToEdit\"\n      @cancel=\"modals.edit = false\"\n      @confirm=\"confirmEditPeople\"\n      @confirm-invite=\"confirmCreateAndInvite\"\n      @invite=\"confirmInvite\"\n    />\n\n    <change-password-modal\n      :active=\"modals.changePassword\"\n      :person=\"personToChangePassword\"\n      @cancel=\"modals.changePassword = false\"\n      @confirm=\"modals.changePassword = false\"\n    />\n\n    <hard-delete-modal\n      :active=\"modals.del\"\n      :error-text=\"$t('people.delete_error')\"\n      :is-loading=\"loading.del\"\n      :is-error=\"errors.del\"\n      :lock-text=\"personToDelete ? personToDelete.full_name : ''\"\n      :text=\"deleteText\"\n      @cancel=\"modals.del = false\"\n      @confirm=\"confirmDeletePeople\"\n    />\n\n    <build-people-filter-modal\n      ref=\"build-filter-modal\"\n      :active=\"modals.isBuildFilterDisplayed\"\n      @cancel=\"modals.isBuildFilterDisplayed = false\"\n      @confirm=\"confirmBuildFilter\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport csv from '@/lib/csv'\nimport ButtonHrefLink from '@/components/widgets/ButtonHrefLink'\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport BuildPeopleFilterModal from '@/components/modals/BuildPeopleFilterModal'\nimport ChangePasswordModal from '@/components/modals/ChangePasswordModal'\nimport ComboboxDepartment from '@/components/widgets/ComboboxDepartment'\nimport ComboboxStyled from '@/components/widgets/ComboboxStyled'\nimport EditPersonModal from '@/components/modals/EditPersonModal'\nimport HardDeleteModal from '@/components/modals/HardDeleteModal'\nimport ImportModal from '@/components/modals/ImportModal'\nimport ImportRenderModal from '@/components/modals/ImportRenderModal'\nimport PeopleList from '@/components/lists/PeopleList'\nimport PageTitle from '@/components/widgets/PageTitle'\nimport SearchField from '@/components/widgets/SearchField'\nimport SearchQueryList from '@/components/widgets/SearchQueryList'\nimport { searchMixin } from '@/components/mixins/search'\n\nexport default {\n  name: 'people',\n  mixins: [searchMixin],\n  components: {\n    BuildPeopleFilterModal,\n    ButtonHrefLink,\n    ButtonSimple,\n    ChangePasswordModal,\n    ComboboxStyled,\n    ComboboxDepartment,\n    EditPersonModal,\n    HardDeleteModal,\n    ImportModal,\n    PageTitle,\n    PeopleList,\n    ImportRenderModal,\n    SearchField,\n    SearchQueryList\n  },\n\n  data() {\n    return {\n      csvColumns: ['First Name', 'Last Name'],\n      optionalCsvColumns: ['Phone', 'Role'],\n      dataMatchers: ['Email'],\n      role: 'all',\n      roleOptions: [\n        { label: 'all', value: 'all' },\n        { label: 'admin', value: 'admin' },\n        { label: 'client', value: 'client' },\n        { label: 'manager', value: 'manager' },\n        { label: 'supervisor', value: 'supervisor' },\n        { label: 'user', value: 'user' },\n        { label: 'vendor', value: 'vendor' }\n      ],\n      errors: {\n        del: false,\n        edit: false,\n        invite: false\n      },\n      loading: {\n        createAndInvite: false,\n        edit: false,\n        del: false,\n        invite: false,\n        savingSearch: false\n      },\n      modals: {\n        edit: false,\n        del: false,\n        changePassword: false,\n        importModal: false,\n        isImportRenderDisplayed: false,\n        isBuildFilterDisplayed: false\n      },\n      parsedCSV: [],\n      personToDelete: {},\n      personToEdit: { role: 'user' },\n      personToChangePassword: {},\n      selectedDepartment: '',\n      success: {\n        invite: false\n      }\n    }\n  },\n\n  mounted() {\n    this.role = this.$route.query.role || 'all'\n    this.selectedDepartment = this.$route.query.department || ''\n    this.loadPeople(() => {\n      this.setSearchFromUrl()\n      this.onSearchChange()\n    }) // Needed to show department informations\n  },\n\n  watch: {\n    'modals.edit'() {\n      if (this.modals.edit) {\n        this.loading.createAndInvite = false\n        this.errors.edit = false\n        this.errors.invite = false\n        this.errors.userLimit = false\n        this.loading.edit = false\n        this.loading.invite = false\n        this.success.invite = false\n      }\n    },\n\n    selectedDepartment() {\n      this.updateRoute()\n    },\n\n    role() {\n      this.updateRoute()\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'displayedPeople',\n      'isCurrentUserAdmin',\n\n      'isPeopleLoading',\n      'isPeopleLoadingError',\n\n      'isImportPeopleModalShown',\n      'isImportPeopleLoading',\n      'isImportPeopleLoadingError',\n\n      'peopleSearchQueries',\n      'personCsvFormData'\n    ]),\n\n    currentPeople() {\n      let people =\n        this.role === 'all'\n          ? this.displayedPeople\n          : this.displayedPeople.filter(p => p.role === this.role)\n      if (this.selectedDepartment) {\n        people = people.filter(p =>\n          p.departments.includes(this.selectedDepartment)\n        )\n      }\n      return people\n    },\n\n    deleteText() {\n      const personName = this.personToDelete?.full_name\n      return personName ? this.$t('people.delete_text', { personName }) : ''\n    },\n\n    filteredPeople() {\n      const persons = {}\n      this.displayedPeople.forEach(person => {\n        const personKey = person.email\n        persons[personKey] = true\n      })\n      return persons\n    },\n\n    searchField() {\n      return this.$refs['people-search-field']\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'editPerson',\n      'deletePeople',\n      'invitePerson',\n      'loadPeople',\n      'loadDepartments',\n      'newPerson',\n      'newPersonAndInvite',\n      'removePeopleSearch',\n      'savePeopleSearch',\n      'setPeopleSearch',\n      'uploadPersonFile'\n    ]),\n\n    renderImport(data, mode) {\n      this.loading.importing = true\n      this.errors.importing = false\n      this.formData = data\n      if (mode === 'file') {\n        data = data.get('file')\n      }\n      csv.processCSV(data).then(results => {\n        this.parsedCSV = results\n        this.hideImportModal()\n        this.loading.importing = false\n        this.showImportRenderModal()\n      })\n    },\n\n    uploadImportFile(data, toUpdate) {\n      const formData = new FormData()\n      const filename = 'import.csv'\n      const csvContent = csv.turnEntriesToCsvString(data)\n      const file = new File([csvContent], filename, { type: 'text/csv' })\n\n      formData.append('file', file)\n      this.loading.importing = true\n      this.errors.importing = false\n      this.$store.commit('PERSON_CSV_FILE_SELECTED', formData)\n\n      this.uploadPersonFile(toUpdate)\n        .then(() => {\n          this.$store.dispatch('loadPeople')\n          this.hideImportRenderModal()\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.importing = false\n          this.errors.importing = true\n        })\n    },\n\n    resetImport() {\n      this.errors.importing = false\n      this.hideImportRenderModal()\n      this.$store.commit('PERSON_CSV_FILE_SELECTED', null)\n      this.$refs['import-modal'].reset()\n      this.showImportModal()\n    },\n\n    confirmEditPeople(form) {\n      let action = 'editPerson'\n      if (this.personToEdit.id === undefined) action = 'newPerson'\n      else form.id = this.personToEdit.id\n      this.loading.edit = true\n      this.errors.edit = false\n      this.errors.userLimit = false\n      this[action](form)\n        .then(() => {\n          this.loading.edit = false\n          this.modals.edit = false\n        })\n        .catch(err => {\n          const isUserLimitReached =\n            err.body &&\n            err.body.message &&\n            err.body.message.indexOf('limit') > 0\n          if (isUserLimitReached) {\n            this.errors.userLimit = true\n          } else {\n            this.errors.edit = true\n          }\n          this.loading.edit = false\n        })\n    },\n\n    confirmCreateAndInvite(form) {\n      this.loading.createAndInvite = true\n      this.errors.edit = false\n      this.errors.userLimit = false\n      this.newPersonAndInvite(form)\n        .then(() => {\n          this.loading.createAndInvite = false\n          this.modals.edit = false\n        })\n        .catch(err => {\n          const isUserLimitReached =\n            err.body &&\n            err.body.message &&\n            err.body.message.indexOf('limit') > 0\n          if (isUserLimitReached) {\n            this.errors.userLimit = true\n          } else {\n            this.errors.edit = true\n          }\n          this.errors.edit = true\n          this.loading.createAndInvite = false\n        })\n      this.onSearchChange()\n    },\n\n    confirmInvite(form) {\n      form.id = this.personToEdit.id\n      this.loading.invite = true\n      this.errors.invite = false\n      this.invitePerson(form)\n        .then(() => {\n          this.loading.invite = false\n          this.success.invite = true\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.invite = false\n          this.success.invite = false\n          this.errors.invite = true\n        })\n      this.onSearchChange()\n    },\n\n    confirmDeletePeople() {\n      this.loading.del = true\n      this.errors.del = false\n      this.deletePeople(this.personToDelete)\n        .then(() => {\n          this.loading.del = false\n          this.modals.del = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.del = false\n          this.errors.del = true\n        })\n    },\n\n    onSearchChange() {\n      if (!this.searchField) return\n      const searchQuery = this.searchField.getValue()\n      if (searchQuery.length !== 1) {\n        this.setPeopleSearch(searchQuery)\n        this.updateRoute()\n      }\n    },\n\n    onDeleteClicked(person) {\n      this.personToDelete = person\n      this.modals.del = true\n    },\n\n    onEditClicked(person) {\n      this.errors.invite = false\n      this.success.invite = false\n      this.personToEdit = person\n      this.modals.edit = true\n    },\n\n    onChangePasswordClicked(person) {\n      this.personToChangePassword = person\n      this.modals.changePassword = true\n    },\n\n    onNewClicked() {\n      this.errors.invite = false\n      this.success.invite = false\n      this.personToEdit = { role: 'user' }\n      this.modals.edit = true\n    },\n\n    showImportModal() {\n      this.modals.importModal = true\n    },\n\n    hideImportModal() {\n      this.modals.importModal = false\n    },\n\n    showImportRenderModal() {\n      this.modals.isImportRenderDisplayed = true\n    },\n\n    hideImportRenderModal() {\n      this.modals.isImportRenderDisplayed = false\n    },\n\n    saveSearchQuery(searchQuery) {\n      if (this.loading.savingSearch) {\n        return\n      }\n      this.loading.savingSearch = true\n      this.savePeopleSearch(searchQuery)\n        .catch(console.error)\n        .finally(() => {\n          this.loading.savingSearch = false\n        })\n    },\n\n    removeSearchQuery(searchQuery) {\n      this.removePeopleSearch(searchQuery).catch(console.error)\n    },\n\n    confirmBuildFilter(query) {\n      this.modals.isBuildFilterDisplayed = false\n      this.searchField.setValue(query)\n      this.onSearchChange()\n    },\n\n    updateRoute() {\n      const search = this.searchField.getValue()\n      const department = this.selectedDepartment\n      const role = this.role\n      this.$router.push({ query: { search, department, role } })\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('people.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.search {\n  margin-top: 2em;\n}\n.query-list {\n  margin-top: 1.5rem;\n}\n.search-options {\n  align-items: flex-end;\n}\n.filter-button {\n  margin-top: 0.3em;\n}\n</style>\n"],"names":["_sfc_main","modalMixin","ButtonSimple","Combobox","ModalFooter","mapGetters","department","mapActions","query","filter","departmentFilter","f","operator","value","dId","filters","getFilters","d","TextField","err","ComboboxDepartment","DepartmentName","selectedDepartment","form","idToRemove","departmentIndex","regex","isExist","p","DepartmentNamesCell","PeopleNameCell","RowActionsCell","TableInfo","person","nbTasks","event","position","searchMixin","BuildPeopleFilterModal","ButtonHrefLink","ChangePasswordModal","ComboboxStyled","EditPersonModal","HardDeleteModal","ImportModal","PageTitle","PeopleList","ImportRenderModal","SearchField","SearchQueryList","people","personName","_a","persons","personKey","data","mode","csv","results","toUpdate","formData","filename","csvContent","file","action","searchQuery","search","role"],"mappings":"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"}