{"version":3,"file":"Person-BLT-Mgub.js","sources":["../../src/components/pages/Person.vue"],"sourcesContent":["<template>\n  <div ref=\"page\" class=\"columns fixed-page\">\n    <div class=\"column main-column\">\n      <div class=\"person page\" v-if=\"person\">\n        <div ref=\"header\" class=\"flexrow page-header\">\n          <div class=\"flexrow-item\">\n            <people-avatar\n              :person=\"person\"\n              :size=\"80\"\n              :font-size=\"30\"\n              :is-text=\"false\"\n            />\n          </div>\n          <div class=\"flexrow-item entity-title\">\n            {{ person.name }}\n          </div>\n        </div>\n\n        <template v-if=\"!person.is_bot && isCurrentUserAllowed\">\n          <div ref=\"tabs\" class=\"task-tabs tabs\">\n            <ul>\n              <li :class=\"{ 'is-active': isActiveTab('todos') }\">\n                <router-link\n                  :to=\"{\n                    name: 'person',\n                    params: {\n                      person_id: person.id\n                    }\n                  }\"\n                >\n                  {{ $t('tasks.current') }}\n                </router-link>\n              </li>\n              <li :class=\"{ 'is-active': isActiveTab('board') }\">\n                <router-link\n                  :to=\"{\n                    name: 'person-tab',\n                    params: {\n                      tab: 'board',\n                      person_id: person.id\n                    }\n                  }\"\n                >\n                  {{ $t('board.title') }}\n                </router-link>\n              </li>\n              <li :class=\"{ 'is-active': isActiveTab('done') }\">\n                <router-link\n                  :to=\"{\n                    name: 'person-tab',\n                    params: {\n                      tab: 'done',\n                      person_id: person.id\n                    }\n                  }\"\n                >\n                  {{ $t('tasks.done') }} ({{ displayedPersonDoneTasks.length }})\n                </router-link>\n              </li>\n              <li\n                :class=\"{ 'is-active': isActiveTab('timesheets') }\"\n                v-if=\"isCurrentUserManager\"\n              >\n                <router-link\n                  :to=\"{\n                    name: 'person-tab',\n                    params: {\n                      tab: 'timesheets',\n                      person_id: person.id\n                    }\n                  }\"\n                >\n                  {{ $t('timesheets.title') }}\n                </router-link>\n              </li>\n              <li :class=\"{ 'is-active': isActiveTab('schedule') }\">\n                <router-link\n                  :to=\"{\n                    name: 'person-tab',\n                    params: {\n                      tab: 'schedule',\n                      person_id: person.id\n                    }\n                  }\"\n                >\n                  {{ $t('schedule.title') }}\n                </router-link>\n              </li>\n            </ul>\n          </div>\n\n          <div ref=\"search\" class=\"flexrow\">\n            <search-field\n              ref=\"person-tasks-search-field\"\n              class=\"search-field flexrow-item\"\n              can-save\n              @change=\"onSearchChange\"\n              @save=\"saveSearchQuery\"\n            />\n            <combobox-production\n              v-if=\"isActiveTab('board')\"\n              class=\"flexrow-item production-field\"\n              :label=\"$t('main.production')\"\n              :production-list=\"productionList\"\n              v-model=\"productionId\"\n            />\n            <span class=\"filler\"></span>\n            <combobox-number\n              class=\"flexrow-item zoom-level mb0\"\n              :label=\"$t('schedule.zoom_level')\"\n              :options=\"zoomOptions\"\n              v-model=\"zoomLevel\"\n              v-if=\"isActiveTab('schedule')\"\n            />\n            <combobox\n              class=\"flexrow-item\"\n              :label=\"$t('main.sorted_by')\"\n              :options=\"sortOptions\"\n              locale-key-prefix=\"tasks.fields.\"\n              v-model=\"currentSort\"\n            />\n          </div>\n\n          <div ref=\"query\" class=\"query-list\">\n            <search-query-list\n              :queries=\"personTaskSearchQueries\"\n              type=\"person\"\n              @change-search=\"changeSearch\"\n              @remove-search=\"removeSearchQuery\"\n            />\n          </div>\n\n          <todos-list\n            ref=\"task-list\"\n            :tasks=\"sortedTasks\"\n            :is-loading=\"isTasksLoading\"\n            :is-error=\"isTasksLoadingError\"\n            :selection-grid=\"personTaskSelectionGrid\"\n            @scroll=\"setPersonTasksScrollPosition\"\n            v-if=\"isActiveTab('todos')\"\n          />\n\n          <todos-list\n            ref=\"done-list\"\n            :tasks=\"displayedPersonDoneTasks\"\n            :is-loading=\"isTasksLoading\"\n            :is-error=\"isTasksLoadingError\"\n            :done=\"true\"\n            :selectionGrid=\"personTaskSelectionGrid\"\n            v-else-if=\"isActiveTab('done')\"\n          />\n\n          <kanban-board\n            :is-loading=\"isTasksLoading\"\n            :is-error=\"isTasksLoadingError\"\n            :statuses=\"boardStatuses\"\n            :tasks=\"boardTasks\"\n            :user=\"user\"\n            :production=\"selectedProduction\"\n            v-else-if=\"isActiveTab('board')\"\n          />\n\n          <timesheet-list\n            ref=\"timesheet-list\"\n            :tasks=\"loggablePersonTasks\"\n            :done-tasks=\"loggableDoneTasks\"\n            :is-loading=\"isTasksLoading\"\n            :is-error=\"isTasksLoadingError\"\n            :day-off-error=\"dayOffError\"\n            :time-spent-map=\"personTimeSpentMap\"\n            :time-spent-total=\"personTimeSpentTotal\"\n            :hide-done=\"personTasksSearchText.length === 0\"\n            :hide-day-off=\"\n              !(isCurrentUserAdmin || this.user.id == this.person.id)\n            \"\n            @date-changed=\"onDateChanged\"\n            @time-spent-change=\"onTimeSpentChange\"\n            @set-day-off=\"onSetDayOff\"\n            @unset-day-off=\"onUnsetDayOff\"\n            v-else-if=\"isActiveTab('timesheets') && isCurrentUserManager\"\n          />\n\n          <div v-else-if=\"isActiveTab('schedule')\">\n            <schedule\n              ref=\"schedule-widget\"\n              :start-date=\"tasksStartDate.clone().add(-3, 'months')\"\n              :end-date=\"tasksEndDate.clone().add(3, 'months')\"\n              :hierarchy=\"scheduleItems\"\n              :zoom-level=\"zoomLevel\"\n              :height=\"scheduleHeight\"\n              :is-loading=\"isTasksLoading\"\n              :is-estimation-linked=\"true\"\n              :with-milestones=\"false\"\n              @item-changed=\"saveTaskScheduleItem\"\n              @estimation-changed=\"event => saveTaskScheduleItem(event.item)\"\n              v-if=\"scheduleItems.length > 0\"\n            />\n            <div class=\"has-text-centered\" v-else>\n              {{ $t('main.empty_schedule') }}\n            </div>\n          </div>\n        </template>\n      </div>\n    </div>\n    <div class=\"column side-column\" v-if=\"nbSelectedTasks === 1\">\n      <task-info :task=\"selectedTasks.values().next().value\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport moment from 'moment-timezone'\nimport firstBy from 'thenby'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport colors from '@/lib/colors'\nimport { sortTaskStatuses } from '@/lib/sorting'\nimport {\n  daysToMinutes,\n  getBusinessDays,\n  getFirstStartDate,\n  getLastEndDate,\n  parseDate\n} from '@/lib/time'\n\nimport { formatListMixin } from '@/components/mixins/format'\n\nimport Combobox from '@/components/widgets/Combobox.vue'\nimport ComboboxNumber from '@/components/widgets/ComboboxNumber.vue'\nimport ComboboxProduction from '@/components/widgets/ComboboxProduction.vue'\nimport KanbanBoard from '@/components/lists/KanbanBoard.vue'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar.vue'\nimport Schedule from '@/components/pages/schedule/Schedule.vue'\nimport SearchField from '@/components/widgets/SearchField.vue'\nimport SearchQueryList from '@/components/widgets/SearchQueryList.vue'\nimport TimesheetList from '@/components/lists/TimesheetList.vue'\nimport TodosList from '@/components/lists/TodosList.vue'\nimport TaskInfo from '@/components/sides/TaskInfo.vue'\n\nexport default {\n  name: 'person',\n\n  mixins: [formatListMixin],\n\n  components: {\n    Combobox,\n    ComboboxNumber,\n    ComboboxProduction,\n    KanbanBoard,\n    PeopleAvatar,\n    Schedule,\n    SearchField,\n    SearchQueryList,\n    TaskInfo,\n    TodosList,\n    TimesheetList\n  },\n\n  data() {\n    return {\n      activeTab: 'todos',\n      currentSort: 'entity_name',\n      dayOffError: false,\n      isTasksLoading: false,\n      isTasksLoadingError: false,\n      loading: {\n        savingSearch: false\n      },\n      person: null,\n      productionId: undefined,\n      scheduleHeight: 0,\n      selectedDate: moment().format('YYYY-MM-DD'),\n      sortOptions: [\n        'entity_name',\n        'priority',\n        'task_status_short_name',\n        'start_date',\n        'due_date',\n        'estimation',\n        'last_comment_date'\n      ].map(name => ({ label: name, value: name })),\n      zoomLevel: 1,\n      zoomOptions: [\n        { label: 'Week', value: 0 },\n        { label: '1', value: 1 },\n        { label: '2', value: 2 },\n        { label: '3', value: 3 }\n      ]\n    }\n  },\n\n  mounted() {\n    this.updateActiveTab()\n    if (this.personTasksSearchText.length > 0) {\n      this.searchField?.setValue(this.personTasksSearchText)\n    }\n    setTimeout(() => {\n      this.searchField?.focus()\n      this.$refs['schedule-widget']?.scrollToDate(this.tasksStartDate)\n    }, 300)\n    this.loadPerson(this.$route.params.person_id)\n    window.addEventListener('resize', this.resetScheduleHeight)\n  },\n\n  afterDestroy() {\n    window.removeEventListener('resize', this.resetScheduleHeight)\n    this.$store.commit('LOAD_PERSON_TASKS_END', {\n      tasks: [],\n      userFilters: {},\n      taskTypeMap: this.taskTypeMap\n    })\n  },\n\n  computed: {\n    ...mapGetters([\n      'displayedPersonTasks',\n      'displayedPersonDoneTasks',\n      'getProductionTaskStatuses',\n      'isCurrentUserAdmin',\n      'isCurrentUserManager',\n      'isCurrentUserSupervisor',\n      'nbSelectedTasks',\n      'personMap',\n      'personTasksScrollPosition',\n      'personTasksSearchText',\n      'personTaskSearchQueries',\n      'personTaskSelectionGrid',\n      'personTimeSpentMap',\n      'personTimeSpentTotal',\n      'openProductions',\n      'productionMap',\n      'selectedTasks',\n      'taskStatuses',\n      'taskTypeMap',\n      'user'\n    ]),\n\n    isCurrentUserAllowed() {\n      if (this.isCurrentUserManager || this.user.id === this.person.id) {\n        return true\n      }\n      if (this.isCurrentUserSupervisor) {\n        const isSupervisorInDepartments = this.user.departments.some(\n          department => this.person.departments.includes(department)\n        )\n        return isSupervisorInDepartments\n      }\n      return false\n    },\n\n    loggablePersonTasks() {\n      return this.displayedPersonTasks.filter(task => {\n        return this.taskTypeMap.get(task.task_type_id).allow_timelog\n      })\n    },\n\n    loggableDoneTasks() {\n      return this.displayedPersonDoneTasks.filter(task => {\n        return this.taskTypeMap.get(task.task_type_id).allow_timelog\n      })\n    },\n\n    searchField() {\n      return this.$refs['person-tasks-search-field']\n    },\n\n    taskList() {\n      return this.$refs['task-list']\n    },\n\n    haveDoneList() {\n      return this.$refs['done-list']\n    },\n\n    sortedTasks() {\n      const isName = this.currentSort === 'entity_name'\n      const isPriority = this.currentSort === 'priority'\n      const isDueDate = this.currentSort === 'due_date'\n      const isStartDate = this.currentSort === 'start_date'\n      const tasks = [...this.displayedPersonTasks]\n      if (isName) {\n        return tasks.sort(\n          firstBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('full_entity_name')\n        )\n      } else if (isPriority) {\n        return tasks.sort(\n          firstBy('priority', -1)\n            .thenBy((a, b) => {\n              if (!a.due_date) return 1\n              else if (!b.due_date) return -1\n              else return a.due_date.localeCompare(b.due_date)\n            })\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      } else if (isDueDate) {\n        return tasks.sort(\n          firstBy((a, b) => {\n            if (!a.due_date) return 1\n            else if (!b.due_date) return -1\n            else return a.due_date.localeCompare(b.due_date)\n          })\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      } else if (isStartDate) {\n        return tasks.sort(\n          firstBy((a, b) => {\n            if (!a.start_date) return 1\n            else if (!b.start_date) return -1\n            else return a.start_date.localeCompare(b.start_date)\n          })\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      } else {\n        return tasks.sort(\n          firstBy(this.currentSort, -1)\n            .thenBy('project_name')\n            .thenBy('task_type_name')\n            .thenBy('entity_name')\n        )\n      }\n    },\n\n    tasksStartDate() {\n      if (this.scheduleTasks.length) {\n        return getFirstStartDate(this.scheduleTasks)\n      } else {\n        return moment()\n      }\n    },\n\n    tasksEndDate() {\n      if (this.scheduleTasks.length) {\n        return getLastEndDate(this.scheduleTasks)\n      } else {\n        return moment().add(15, 'days')\n      }\n    },\n\n    scheduleTasks() {\n      return this.scheduleItems.flatMap(item => item.children)\n    },\n\n    scheduleItems() {\n      const rootMap = new Map()\n      this.sortedTasks.forEach(task => {\n        if (!rootMap.get(task.project_id)) {\n          const project = this.productionMap.get(task.project_id)\n          const rootElement = this.buildProjectScheduleItem(project)\n          rootMap.set(task.project_id, rootElement)\n        }\n        const rootElement = rootMap.get(task.project_id)\n        const taskItem = this.buildTaskScheduleItem(rootElement, task)\n        if (taskItem) rootElement.children.push(taskItem)\n      })\n\n      const rootElements = Array.from(rootMap.values())\n      rootElements.forEach(rootElement => {\n        let rootStartDate = moment()\n        let rootEndDate = moment().add(1, 'days')\n        let manDays = 0\n        if (rootElement.children.length > 0) {\n          rootStartDate = getFirstStartDate(rootElement.children)\n          rootEndDate = getLastEndDate(rootElement.children)\n        }\n        rootElement.children.forEach(task => {\n          const estimation = this.formatDuration(task.estimation)\n          if (estimation) manDays += task.estimation\n        })\n        Object.assign(rootElement, {\n          startDate: rootStartDate,\n          endDate: rootEndDate,\n          man_days: manDays\n        })\n      })\n      return rootElements\n    },\n\n    boardTasks() {\n      const tasks = this.sortedTasks.concat(this.displayedPersonDoneTasks)\n      if (this.selectedProduction) {\n        return tasks.filter(\n          task => task.project_id === this.selectedProduction.id\n        )\n      }\n      return tasks\n    },\n\n    boardStatuses() {\n      if (this.selectedProduction) {\n        return this.getBoardStatusesByProduction(this.selectedProduction)\n      }\n\n      const productionsByStatus = {}\n      this.openProductions.forEach(production => {\n        const statuses = this.getBoardStatusesByProduction(production)\n        statuses.forEach(status => {\n          if (!productionsByStatus[status.id]) {\n            productionsByStatus[status.id] = []\n          }\n          productionsByStatus[status.id].push(production.id)\n        })\n      })\n\n      return this.taskStatuses\n        .filter(status => !status.for_concept)\n        .map(status => ({\n          ...status,\n          productions: productionsByStatus[status.id] || []\n        }))\n        .filter(status => status.productions.length > 0)\n        .sort((a, b) => a.priority - b.priority)\n    },\n\n    productionList() {\n      return [{ name: this.$t('main.all') }, ...this.openProductions]\n    },\n\n    selectedProduction() {\n      return this.productionMap.get(this.productionId)\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'loadPersonTasks',\n      'setPersonTasksSearch',\n      'savePersonTasksSearch',\n      'removePersonTasksSearch',\n      'setDayOff',\n      'setPersonTasksScrollPosition',\n      'setTimeSpent',\n      'unsetDayOff',\n      'updateTask'\n    ]),\n\n    resetScheduleHeight() {\n      this.$nextTick(() => {\n        if (this.isActiveTab('schedule')) {\n          const pageHeight = this.$refs.page?.offsetHeight || 0\n          const headerHeight = this.$refs.header?.offsetHeight || 0\n          const tabsHeight = this.$refs.tabs?.offsetHeight || 0\n          const searchHeight = this.$refs.search?.offsetHeight || 0\n          const queryHeight = this.$refs.query?.offsetHeight || 0\n          this.scheduleHeight =\n            pageHeight - headerHeight - tabsHeight - searchHeight - queryHeight\n          this.$refs['schedule-widget']?.resetScheduleSize()\n        }\n      })\n    },\n\n    buildProjectScheduleItem(project) {\n      return {\n        ...project,\n        avatar: true,\n        color: colors.fromString(project.name, true),\n        priority: 1,\n        expanded: true,\n        loading: false,\n        children: [],\n        editable: false\n      }\n    },\n\n    buildTaskScheduleItem(parentElement, task) {\n      let startDate = moment()\n      let endDate\n\n      if (\n        !task.start_date &&\n        !task.real_start_date &&\n        !task.due_date &&\n        !task.end_date\n      ) {\n        return null\n      }\n\n      if (task.start_date) {\n        startDate = parseDate(task.start_date)\n      } else if (task.real_start_date) {\n        startDate = parseDate(task.real_start_date)\n      }\n\n      const estimation = task.estimation\n      if (task.due_date) {\n        endDate = parseDate(task.due_date)\n      } else if (task.end_date) {\n        endDate = parseDate(task.end_date)\n      } else if (task.estimation) {\n        endDate = startDate.clone().add(estimation, 'days')\n      }\n      if (!endDate || endDate.isBefore(startDate)) {\n        endDate = startDate.clone().add(1, 'days')\n      }\n\n      const taskType = this.taskTypeMap.get(task.task_type_id)\n      return {\n        ...task,\n        name: `${task.full_entity_name} / ${taskType.name}`,\n        startDate,\n        endDate,\n        expanded: false,\n        loading: false,\n        man_days: estimation,\n        editable: false,\n        unresizable: false,\n        parentElement,\n        color: taskType.color,\n        children: []\n      }\n    },\n\n    isActiveTab(tab) {\n      return this.activeTab === tab\n    },\n\n    onSearchChange(text) {\n      this.setPersonTasksSearch(text)\n    },\n\n    loadPerson(personId) {\n      this.person = this.personMap.get(personId)\n\n      if (!this.person) {\n        this.$router.push({ name: 'not-found' })\n        return\n      }\n\n      if (this.person.is_bot || !this.isCurrentUserAllowed) {\n        return\n      }\n\n      this.isTasksLoading = true\n      this.isTasksLoadingError = false\n\n      this.loadPersonTasks({\n        personId: this.person.id,\n        date: this.selectedDate\n      })\n        .then(() => {\n          setTimeout(() => {\n            this.$nextTick(() => {\n              this.taskList?.setScrollPosition(this.personTasksScrollPosition)\n            })\n            this.resizeHeaders()\n          }, 0)\n        })\n        .catch(err => {\n          console.error(err)\n          this.isTasksLoadingError = true\n        })\n        .finally(() => {\n          this.isTasksLoading = false\n        })\n    },\n\n    resizeHeaders() {\n      this.$nextTick(() => {\n        this.taskList?.resizeHeaders()\n        this.haveDoneList?.resizeHeaders()\n      })\n    },\n\n    changeSearch(searchQuery) {\n      this.searchField?.setValue(searchQuery.search_query)\n      this.onSearchChange(searchQuery.search_query)\n    },\n\n    saveSearchQuery(searchQuery) {\n      if (this.loading.savingSearch) {\n        return\n      }\n      this.loading.savingSearch = true\n      this.savePersonTasksSearch(searchQuery)\n        .catch(console.error)\n        .finally(() => {\n          this.loading.savingSearch = false\n        })\n    },\n\n    removeSearchQuery(searchQuery) {\n      this.removePersonTasksSearch(searchQuery).catch(err => {\n        if (err) console.error(err)\n      })\n    },\n\n    updateActiveTab() {\n      const availableTabs = ['board', 'done', 'timesheets', 'schedule']\n      const currentTab = this.$route.params.tab\n      this.activeTab = availableTabs.includes(currentTab) ? currentTab : 'todos'\n\n      if (this.activeTab === 'board') {\n        const currentProduction = this.openProductions.find(\n          ({ id }) => id === this.$route.query.productionId\n        )\n        if (currentProduction) {\n          this.productionId = currentProduction.id\n        } else {\n          this.$router.push({\n            query: {\n              productionId: this.productionId,\n              section: this.activeTab\n            }\n          })\n        }\n      }\n    },\n\n    onTimeSpentChange(timeSpentInfo) {\n      timeSpentInfo.personId = this.person.id\n      timeSpentInfo.date = this.selectedDate\n      this.setTimeSpent(timeSpentInfo)\n    },\n\n    onDateChanged(date) {\n      this.selectedDate = moment(date).format('YYYY-MM-DD')\n      this.loadPerson(this.person.id)\n    },\n\n    async onSetDayOff(dayOff) {\n      this.dayOffError = false\n      try {\n        await this.setDayOff({\n          ...dayOff,\n          personId: this.person.id\n        })\n        this.$refs['timesheet-list']?.closeSetDayOffModal()\n      } catch (error) {\n        this.dayOffError = error.body?.message || true\n      }\n    },\n\n    async onUnsetDayOff() {\n      this.dayOffError = false\n      try {\n        await this.unsetDayOff()\n        this.$refs['timesheet-list']?.closeUnsetDayOffModal()\n      } catch (error) {\n        this.dayOffError = error.body?.message || true\n      }\n    },\n\n    saveTaskScheduleItem(item) {\n      const daysLength = getBusinessDays(item.startDate, item.endDate)\n      const estimation = daysToMinutes(this.organisation, daysLength)\n      item.man_days = estimation\n      if (item.startDate && item.endDate) {\n        this.updateTask({\n          taskId: item.id,\n          data: {\n            estimation,\n            start_date: item.startDate.format('YYYY-MM-DD'),\n            due_date: item.endDate.format('YYYY-MM-DD')\n          }\n        })\n      }\n    },\n\n    getBoardStatusesByProduction(production) {\n      const statuses = this.getProductionTaskStatuses(production.id).filter(\n        status => {\n          if (status.for_concept) {\n            return false\n          }\n          const roles_for_board =\n            production.task_statuses_link?.[status.id]?.roles_for_board\n          return roles_for_board?.includes(this.user.role)\n        }\n      )\n      return sortTaskStatuses(statuses, production)\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.person?.name || '...'} - Kitsu`\n    }\n  },\n\n  watch: {\n    $route() {\n      const personId = this.$route.params.person_id\n\n      this.updateActiveTab()\n      if (this.person && this.person.id !== personId) {\n        this.loadPerson(personId)\n      }\n    },\n\n    activeTab() {\n      this.resetScheduleHeight()\n      this.$nextTick(() => {\n        this.$refs['schedule-widget']?.scrollToDate(this.tasksStartDate)\n      })\n    },\n\n    productionId() {\n      this.$router.push({\n        query: {\n          productionId: this.productionId,\n          tab: this.activeTab\n        }\n      })\n    },\n\n    zoomLevel() {\n      this.$refs['schedule-widget']?.scrollToDate(this.tasksStartDate)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.name {\n  width: 230px;\n  min-width: 230px;\n}\n\n.page {\n  overflow: hidden;\n}\n\n.email {\n  width: 210px;\n  min-width: 210px;\n}\n.phone {\n  width: 140px;\n  min-width: 140px;\n}\n.skills {\n  width: 250px;\n}\n\n.search-field {\n  margin: 25px 2em 5px 0;\n}\n\n.query-list {\n  margin-top: 0.5em;\n}\n\n.task-tabs {\n  margin-top: 2em;\n}\n\n.task-tabs ul {\n  margin: 0;\n}\n\n.data-list {\n  margin-top: 0;\n}\n\n.person {\n  display: flex;\n  flex-direction: column;\n}\n\n.columns {\n  display: flex;\n  flex-direction: row;\n  padding: 0;\n}\n\n.column {\n  overflow-y: auto;\n  padding: 0;\n}\n\n.zoom-level {\n  margin-top: -0.5em;\n}\n\n.field {\n  margin-bottom: 0;\n}\n</style>\n"],"names":["_sfc_main","formatListMixin","Combobox","ComboboxNumber","ComboboxProduction","KanbanBoard","PeopleAvatar","Schedule","SearchField","SearchQueryList","TaskInfo","TodosList","TimesheetList","moment","name","_a","_b","mapGetters","department","task","isName","isPriority","isDueDate","isStartDate","tasks","firstBy","a","b","getFirstStartDate","getLastEndDate","item","rootMap","project","rootElement","taskItem","rootElements","rootStartDate","rootEndDate","manDays","productionsByStatus","production","status","mapActions","pageHeight","headerHeight","tabsHeight","_c","searchHeight","_d","queryHeight","_e","_f","colors","parentElement","startDate","endDate","parseDate","estimation","taskType","tab","text","personId","err","searchQuery","availableTabs","currentTab","currentProduction","id","timeSpentInfo","date","dayOff","error","daysLength","getBusinessDays","daysToMinutes","statuses","roles_for_board","sortTaskStatuses"],"mappings":"wNA+OA,MAAAA,EAAA,CACA,KAAA,SAEA,OAAA,CAAAC,CAAA,EAEA,WAAA,CACA,SAAAC,EACA,eAAAC,EACA,mBAAAC,EACA,YAAAC,EACA,aAAAC,EACA,SAAAC,EACA,YAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,UAAAC,EACA,cAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,UAAA,QACA,YAAA,cACA,YAAA,GACA,eAAA,GACA,oBAAA,GACA,QAAA,CACA,aAAA,EACA,EACA,OAAA,KACA,aAAA,OACA,eAAA,EACA,aAAAC,EAAA,EAAA,OAAA,YAAA,EACA,YAAA,CACA,cACA,WACA,yBACA,aACA,WACA,aACA,mBACA,EAAA,IAAAC,IAAA,CAAA,MAAAA,EAAA,MAAAA,CAAA,EAAA,EACA,UAAA,EACA,YAAA,CACA,CAAA,MAAA,OAAA,MAAA,CAAA,EACA,CAAA,MAAA,IAAA,MAAA,CAAA,EACA,CAAA,MAAA,IAAA,MAAA,CAAA,EACA,CAAA,MAAA,IAAA,MAAA,CAAA,CACA,CACA,CACA,EAEA,SAAA,OACA,KAAA,gBAAA,EACA,KAAA,sBAAA,OAAA,KACAC,EAAA,KAAA,cAAA,MAAAA,EAAA,SAAA,KAAA,wBAEA,WAAA,IAAA,UACAA,EAAA,KAAA,cAAA,MAAAA,EAAA,SACAC,EAAA,KAAA,MAAA,iBAAA,IAAA,MAAAA,EAAA,aAAA,KAAA,eACA,EAAA,GAAA,EACA,KAAA,WAAA,KAAA,OAAA,OAAA,SAAA,EACA,OAAA,iBAAA,SAAA,KAAA,mBAAA,CACA,EAEA,cAAA,CACA,OAAA,oBAAA,SAAA,KAAA,mBAAA,EACA,KAAA,OAAA,OAAA,wBAAA,CACA,MAAA,CAAA,EACA,YAAA,CAAA,EACA,YAAA,KAAA,WACA,CAAA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CACA,uBACA,2BACA,4BACA,qBACA,uBACA,0BACA,kBACA,YACA,4BACA,wBACA,0BACA,0BACA,qBACA,uBACA,kBACA,gBACA,gBACA,eACA,cACA,MACA,CAAA,EAEA,sBAAA,CACA,OAAA,KAAA,sBAAA,KAAA,KAAA,KAAA,KAAA,OAAA,GACA,GAEA,KAAA,wBACA,KAAA,KAAA,YAAA,KACAC,GAAA,KAAA,OAAA,YAAA,SAAAA,CAAA,CACA,EAGA,EACA,EAEA,qBAAA,CACA,OAAA,KAAA,qBAAA,OAAAC,GACA,KAAA,YAAA,IAAAA,EAAA,YAAA,EAAA,aACA,CACA,EAEA,mBAAA,CACA,OAAA,KAAA,yBAAA,OAAAA,GACA,KAAA,YAAA,IAAAA,EAAA,YAAA,EAAA,aACA,CACA,EAEA,aAAA,CACA,OAAA,KAAA,MAAA,2BAAA,CACA,EAEA,UAAA,CACA,OAAA,KAAA,MAAA,WAAA,CACA,EAEA,cAAA,CACA,OAAA,KAAA,MAAA,WAAA,CACA,EAEA,aAAA,CACA,MAAAC,EAAA,KAAA,cAAA,cACAC,EAAA,KAAA,cAAA,WACAC,EAAA,KAAA,cAAA,WACAC,EAAA,KAAA,cAAA,aACAC,EAAA,CAAA,GAAA,KAAA,oBAAA,EACA,OAAAJ,EACAI,EAAA,KACAC,EAAA,cAAA,EACA,OAAA,gBAAA,EACA,OAAA,kBAAA,CACA,EACAJ,EACAG,EAAA,KACAC,EAAA,WAAA,EAAA,EACA,OAAA,CAAAC,EAAAC,IACAD,EAAA,SACAC,EAAA,SACAD,EAAA,SAAA,cAAAC,EAAA,QAAA,EADA,GADA,CAGA,EACA,OAAA,cAAA,EACA,OAAA,gBAAA,EACA,OAAA,aAAA,CACA,EACAL,EACAE,EAAA,KACAC,EAAA,CAAAC,EAAAC,IACAD,EAAA,SACAC,EAAA,SACAD,EAAA,SAAA,cAAAC,EAAA,QAAA,EADA,GADA,CAGA,EACA,OAAA,cAAA,EACA,OAAA,gBAAA,EACA,OAAA,aAAA,CACA,EACAJ,EACAC,EAAA,KACAC,EAAA,CAAAC,EAAAC,IACAD,EAAA,WACAC,EAAA,WACAD,EAAA,WAAA,cAAAC,EAAA,UAAA,EADA,GADA,CAGA,EACA,OAAA,cAAA,EACA,OAAA,gBAAA,EACA,OAAA,aAAA,CACA,EAEAH,EAAA,KACAC,EAAA,KAAA,YAAA,EAAA,EACA,OAAA,cAAA,EACA,OAAA,gBAAA,EACA,OAAA,aAAA,CACA,CAEA,EAEA,gBAAA,CACA,OAAA,KAAA,cAAA,OACAG,EAAA,KAAA,aAAA,EAEAf,EAAA,CAEA,EAEA,cAAA,CACA,OAAA,KAAA,cAAA,OACAgB,EAAA,KAAA,aAAA,EAEAhB,EAAA,EAAA,IAAA,GAAA,MAAA,CAEA,EAEA,eAAA,CACA,OAAA,KAAA,cAAA,QAAAiB,GAAAA,EAAA,QAAA,CACA,EAEA,eAAA,CACA,MAAAC,EAAA,IAAA,IACA,KAAA,YAAA,QAAAZ,GAAA,CACA,GAAA,CAAAY,EAAA,IAAAZ,EAAA,UAAA,EAAA,CACA,MAAAa,EAAA,KAAA,cAAA,IAAAb,EAAA,UAAA,EACAc,EAAA,KAAA,yBAAAD,CAAA,EACAD,EAAA,IAAAZ,EAAA,WAAAc,CAAA,CACA,CACA,MAAAA,EAAAF,EAAA,IAAAZ,EAAA,UAAA,EACAe,EAAA,KAAA,sBAAAD,EAAAd,CAAA,EACAe,GAAAD,EAAA,SAAA,KAAAC,CAAA,CACA,CAAA,EAEA,MAAAC,EAAA,MAAA,KAAAJ,EAAA,OAAA,CAAA,EACA,OAAAI,EAAA,QAAAF,GAAA,CACA,IAAAG,EAAAvB,EAAA,EACAwB,EAAAxB,EAAA,EAAA,IAAA,EAAA,MAAA,EACAyB,EAAA,EACAL,EAAA,SAAA,OAAA,IACAG,EAAAR,EAAAK,EAAA,QAAA,EACAI,EAAAR,EAAAI,EAAA,QAAA,GAEAA,EAAA,SAAA,QAAAd,GAAA,CACA,KAAA,eAAAA,EAAA,UAAA,IACAmB,GAAAnB,EAAA,WACA,CAAA,EACA,OAAA,OAAAc,EAAA,CACA,UAAAG,EACA,QAAAC,EACA,SAAAC,CACA,CAAA,CACA,CAAA,EACAH,CACA,EAEA,YAAA,CACA,MAAAX,EAAA,KAAA,YAAA,OAAA,KAAA,wBAAA,EACA,OAAA,KAAA,mBACAA,EAAA,OACAL,GAAAA,EAAA,aAAA,KAAA,mBAAA,EACA,EAEAK,CACA,EAEA,eAAA,CACA,GAAA,KAAA,mBACA,OAAA,KAAA,6BAAA,KAAA,kBAAA,EAGA,MAAAe,EAAA,CAAA,EACA,YAAA,gBAAA,QAAAC,GAAA,CACA,KAAA,6BAAAA,CAAA,EACA,QAAAC,GAAA,CACAF,EAAAE,EAAA,EAAA,IACAF,EAAAE,EAAA,EAAA,EAAA,CAAA,GAEAF,EAAAE,EAAA,EAAA,EAAA,KAAAD,EAAA,EAAA,CACA,CAAA,CACA,CAAA,EAEA,KAAA,aACA,OAAAC,GAAA,CAAAA,EAAA,WAAA,EACA,IAAAA,IAAA,CACA,GAAAA,EACA,YAAAF,EAAAE,EAAA,EAAA,GAAA,CAAA,CACA,EAAA,EACA,OAAAA,GAAAA,EAAA,YAAA,OAAA,CAAA,EACA,KAAA,CAAAf,EAAAC,IAAAD,EAAA,SAAAC,EAAA,QAAA,CACA,EAEA,gBAAA,CACA,MAAA,CAAA,CAAA,KAAA,KAAA,GAAA,UAAA,CAAA,EAAA,GAAA,KAAA,eAAA,CACA,EAEA,oBAAA,CACA,OAAA,KAAA,cAAA,IAAA,KAAA,YAAA,CACA,CACA,EAEA,QAAA,CACA,GAAAe,EAAA,CACA,kBACA,uBACA,wBACA,0BACA,YACA,+BACA,eACA,cACA,YACA,CAAA,EAEA,qBAAA,CACA,KAAA,UAAA,IAAA,iBACA,GAAA,KAAA,YAAA,UAAA,EAAA,CACA,MAAAC,IAAA5B,EAAA,KAAA,MAAA,OAAA,YAAAA,EAAA,eAAA,EACA6B,IAAA5B,EAAA,KAAA,MAAA,SAAA,YAAAA,EAAA,eAAA,EACA6B,IAAAC,EAAA,KAAA,MAAA,OAAA,YAAAA,EAAA,eAAA,EACAC,IAAAC,EAAA,KAAA,MAAA,SAAA,YAAAA,EAAA,eAAA,EACAC,IAAAC,EAAA,KAAA,MAAA,QAAA,YAAAA,EAAA,eAAA,EACA,KAAA,eACAP,EAAAC,EAAAC,EAAAE,EAAAE,GACAE,EAAA,KAAA,MAAA,iBAAA,IAAA,MAAAA,EAAA,mBACA,CACA,CAAA,CACA,EAEA,yBAAAnB,EAAA,CACA,MAAA,CACA,GAAAA,EACA,OAAA,GACA,MAAAoB,EAAA,WAAApB,EAAA,KAAA,EAAA,EACA,SAAA,EACA,SAAA,GACA,QAAA,GACA,SAAA,CAAA,EACA,SAAA,EACA,CACA,EAEA,sBAAAqB,EAAAlC,EAAA,CACA,IAAAmC,EAAAzC,EAAA,EACA0C,EAEA,GACA,CAAApC,EAAA,YACA,CAAAA,EAAA,iBACA,CAAAA,EAAA,UACA,CAAAA,EAAA,SAEA,OAAA,KAGAA,EAAA,WACAmC,EAAAE,EAAArC,EAAA,UAAA,EACAA,EAAA,kBACAmC,EAAAE,EAAArC,EAAA,eAAA,GAGA,MAAAsC,EAAAtC,EAAA,WACAA,EAAA,SACAoC,EAAAC,EAAArC,EAAA,QAAA,EACAA,EAAA,SACAoC,EAAAC,EAAArC,EAAA,QAAA,EACAA,EAAA,aACAoC,EAAAD,EAAA,MAAA,EAAA,IAAAG,EAAA,MAAA,IAEA,CAAAF,GAAAA,EAAA,SAAAD,CAAA,KACAC,EAAAD,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,GAGA,MAAAI,EAAA,KAAA,YAAA,IAAAvC,EAAA,YAAA,EACA,MAAA,CACA,GAAAA,EACA,KAAA,GAAAA,EAAA,gBAAA,MAAAuC,EAAA,IAAA,GACA,UAAAJ,EACA,QAAAC,EACA,SAAA,GACA,QAAA,GACA,SAAAE,EACA,SAAA,GACA,YAAA,GACA,cAAAJ,EACA,MAAAK,EAAA,MACA,SAAA,CAAA,CACA,CACA,EAEA,YAAAC,EAAA,CACA,OAAA,KAAA,YAAAA,CACA,EAEA,eAAAC,EAAA,CACA,KAAA,qBAAAA,CAAA,CACA,EAEA,WAAAC,EAAA,CAGA,GAFA,KAAA,OAAA,KAAA,UAAA,IAAAA,CAAA,EAEA,CAAA,KAAA,OAAA,CACA,KAAA,QAAA,KAAA,CAAA,KAAA,WAAA,CAAA,EACA,MACA,CAEA,KAAA,OAAA,QAAA,CAAA,KAAA,uBAIA,KAAA,eAAA,GACA,KAAA,oBAAA,GAEA,KAAA,gBAAA,CACA,SAAA,KAAA,OAAA,GACA,KAAA,KAAA,YACA,CAAA,EACA,KAAA,IAAA,CACA,WAAA,IAAA,CACA,KAAA,UAAA,IAAA,QACA9C,EAAA,KAAA,WAAA,MAAAA,EAAA,kBAAA,KAAA,0BACA,CAAA,EACA,KAAA,cAAA,CACA,EAAA,CAAA,CACA,CAAA,EACA,MAAA+C,GAAA,CACA,QAAA,MAAAA,CAAA,EACA,KAAA,oBAAA,EACA,CAAA,EACA,QAAA,IAAA,CACA,KAAA,eAAA,EACA,CAAA,EACA,EAEA,eAAA,CACA,KAAA,UAAA,IAAA,UACA/C,EAAA,KAAA,WAAA,MAAAA,EAAA,iBACAC,EAAA,KAAA,eAAA,MAAAA,EAAA,eACA,CAAA,CACA,EAEA,aAAA+C,EAAA,QACAhD,EAAA,KAAA,cAAA,MAAAA,EAAA,SAAAgD,EAAA,cACA,KAAA,eAAAA,EAAA,YAAA,CACA,EAEA,gBAAAA,EAAA,CACA,KAAA,QAAA,eAGA,KAAA,QAAA,aAAA,GACA,KAAA,sBAAAA,CAAA,EACA,MAAA,QAAA,KAAA,EACA,QAAA,IAAA,CACA,KAAA,QAAA,aAAA,EACA,CAAA,EACA,EAEA,kBAAAA,EAAA,CACA,KAAA,wBAAAA,CAAA,EAAA,MAAAD,GAAA,CACAA,GAAA,QAAA,MAAAA,CAAA,CACA,CAAA,CACA,EAEA,iBAAA,CACA,MAAAE,EAAA,CAAA,QAAA,OAAA,aAAA,UAAA,EACAC,EAAA,KAAA,OAAA,OAAA,IAGA,GAFA,KAAA,UAAAD,EAAA,SAAAC,CAAA,EAAAA,EAAA,QAEA,KAAA,YAAA,QAAA,CACA,MAAAC,EAAA,KAAA,gBAAA,KACA,CAAA,CAAA,GAAAC,CAAA,IAAAA,IAAA,KAAA,OAAA,MAAA,YACA,EACAD,EACA,KAAA,aAAAA,EAAA,GAEA,KAAA,QAAA,KAAA,CACA,MAAA,CACA,aAAA,KAAA,aACA,QAAA,KAAA,SACA,CACA,CAAA,CAEA,CACA,EAEA,kBAAAE,EAAA,CACAA,EAAA,SAAA,KAAA,OAAA,GACAA,EAAA,KAAA,KAAA,aACA,KAAA,aAAAA,CAAA,CACA,EAEA,cAAAC,EAAA,CACA,KAAA,aAAAxD,EAAAwD,CAAA,EAAA,OAAA,YAAA,EACA,KAAA,WAAA,KAAA,OAAA,EAAA,CACA,EAEA,MAAA,YAAAC,EAAA,SACA,KAAA,YAAA,GACA,GAAA,CACA,MAAA,KAAA,UAAA,CACA,GAAAA,EACA,SAAA,KAAA,OAAA,EACA,CAAA,GACAvD,EAAA,KAAA,MAAA,gBAAA,IAAA,MAAAA,EAAA,qBACA,OAAAwD,EAAA,CACA,KAAA,cAAAvD,EAAAuD,EAAA,OAAA,YAAAvD,EAAA,UAAA,EACA,CACA,EAEA,MAAA,eAAA,SACA,KAAA,YAAA,GACA,GAAA,CACA,MAAA,KAAA,YAAA,GACAD,EAAA,KAAA,MAAA,gBAAA,IAAA,MAAAA,EAAA,uBACA,OAAAwD,EAAA,CACA,KAAA,cAAAvD,EAAAuD,EAAA,OAAA,YAAAvD,EAAA,UAAA,EACA,CACA,EAEA,qBAAAc,EAAA,CACA,MAAA0C,EAAAC,EAAA3C,EAAA,UAAAA,EAAA,OAAA,EACA2B,EAAAiB,EAAA,KAAA,aAAAF,CAAA,EACA1C,EAAA,SAAA2B,EACA3B,EAAA,WAAAA,EAAA,SACA,KAAA,WAAA,CACA,OAAAA,EAAA,GACA,KAAA,CACA,WAAA2B,EACA,WAAA3B,EAAA,UAAA,OAAA,YAAA,EACA,SAAAA,EAAA,QAAA,OAAA,YAAA,CACA,CACA,CAAA,CAEA,EAEA,6BAAAU,EAAA,CACA,MAAAmC,EAAA,KAAA,0BAAAnC,EAAA,EAAA,EAAA,OACAC,GAAA,SACA,GAAAA,EAAA,YACA,MAAA,GAEA,MAAAmC,GACA5D,GAAAD,EAAAyB,EAAA,qBAAA,YAAAzB,EAAA0B,EAAA,MAAA,YAAAzB,EAAA,gBACA,OAAA4D,GAAA,YAAAA,EAAA,SAAA,KAAA,KAAA,KACA,CACA,EACA,OAAAC,EAAAF,EAAAnC,CAAA,CACA,CACA,EAEA,UAAA,OACA,MAAA,CACA,MAAA,KAAAzB,EAAA,KAAA,SAAA,YAAAA,EAAA,OAAA,KAAA,UACA,CACA,EAEA,MAAA,CACA,QAAA,CACA,MAAA8C,EAAA,KAAA,OAAA,OAAA,UAEA,KAAA,gBAAA,EACA,KAAA,QAAA,KAAA,OAAA,KAAAA,GACA,KAAA,WAAAA,CAAA,CAEA,EAEA,WAAA,CACA,KAAA,oBAAA,EACA,KAAA,UAAA,IAAA,QACA9C,EAAA,KAAA,MAAA,iBAAA,IAAA,MAAAA,EAAA,aAAA,KAAA,eACA,CAAA,CACA,EAEA,cAAA,CACA,KAAA,QAAA,KAAA,CACA,MAAA,CACA,aAAA,KAAA,aACA,IAAA,KAAA,SACA,CACA,CAAA,CACA,EAEA,WAAA,QACAA,EAAA,KAAA,MAAA,iBAAA,IAAA,MAAAA,EAAA,aAAA,KAAA,eACA,CACA,CACA"}