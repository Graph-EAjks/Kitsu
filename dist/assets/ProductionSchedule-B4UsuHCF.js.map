{"version":3,"file":"ProductionSchedule-B4UsuHCF.js","sources":["../../src/components/pages/ProductionSchedule.vue"],"sourcesContent":["<template>\n  <div class=\"columns fixed-page\">\n    <div class=\"column main-column\">\n      <div class=\"flexrow project-dates\">\n        <div class=\"flexrow-item\">\n          <label class=\"label\">\n            {{ $t('main.start_date') }}\n          </label>\n          <date-field :can-delete=\"false\" utc v-model=\"selectedStartDate\" />\n        </div>\n        <div class=\"flexrow-item field\">\n          <label class=\"label\">\n            {{ $t('main.end_date') }}\n          </label>\n          <date-field :can-delete=\"false\" utc v-model=\"selectedEndDate\" />\n        </div>\n        <combobox-number\n          class=\"flexrow-item zoom-level\"\n          :label=\"$t('schedule.zoom_level')\"\n          :options=\"zoomOptions\"\n          v-model=\"zoomLevel\"\n        />\n      </div>\n\n      <schedule\n        :start-date=\"startDate\"\n        :end-date=\"endDate\"\n        :hierarchy=\"scheduleItems\"\n        :zoom-level=\"zoomLevel\"\n        :is-loading=\"loading.schedule\"\n        :is-error=\"errors.schedule\"\n        :hide-man-days=\"true\"\n        :multiline=\"isTVShow\"\n        :subchildren=\"!isTVShow\"\n        @item-changed=\"scheduleItemChanged\"\n        @estimation-changed=\"estimationChanged\"\n        @root-element-expanded=\"expandTaskTypeElement\"\n      />\n    </div>\n\n    <div\n      class=\"column side-column is-hidden-mobile hide-small-screen\"\n      v-if=\"currentTask\"\n    >\n      <task-info :task=\"currentTask\" :is-loading=\"false\" />\n    </div>\n  </div>\n</template>\n\n<script>\n/*\n * Page to manage the schedule of the big steps of the production. It allows\n * to set milestones too.\n */\nimport { mapGetters, mapActions } from 'vuex'\nimport moment from 'moment-timezone'\n\nimport { getTaskTypeSchedulePath } from '@/lib/path'\nimport { sortTaskTypeScheduleItems } from '@/lib/sorting'\nimport {\n  addBusinessDays,\n  daysToMinutes,\n  minutesToDays,\n  parseDate\n} from '@/lib/time'\n\nimport ComboboxNumber from '@/components/widgets/ComboboxNumber.vue'\nimport DateField from '@/components/widgets/DateField.vue'\nimport Schedule from '@/components/widgets/Schedule.vue'\nimport TaskInfo from '@/components/sides/TaskInfo.vue'\n\nimport assetStore from '@/store/modules/assets'\nimport assetTypeStore from '@/store/modules/assettypes'\nimport shotStore from '@/store/modules/shots'\nimport taskTypeStore from '@/store/modules/tasktypes'\n\nexport default {\n  name: 'production-schedule',\n  components: {\n    ComboboxNumber,\n    DateField,\n    Schedule,\n    TaskInfo\n  },\n\n  data() {\n    return {\n      currentTask: null,\n      daysOffByPerson: [],\n      endDate: moment().add(6, 'months').endOf('day'),\n      scheduleItems: [],\n      startDate: moment().startOf('day'),\n      selectedStartDate: null,\n      selectedEndDate: null,\n      zoomLevel: 1,\n      zoomOptions: [\n        { label: this.$t('main.week'), value: 0 },\n        { label: '1', value: 1 },\n        { label: '2', value: 2 },\n        { label: '3', value: 3 }\n      ],\n      loading: {\n        schedule: false\n      },\n      errors: {\n        schedule: false\n      }\n    }\n  },\n\n  mounted() {\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'currentProduction',\n      'isCurrentUserManager',\n      'isCurrentUserSupervisor',\n      'isTVShow',\n      'organisation',\n      'personMap',\n      'user'\n    ]),\n\n    assetMap() {\n      return assetStore.cache.assetMap\n    },\n\n    assetTypeMap() {\n      return assetTypeStore.cache.assetTypeMap\n    },\n\n    shotMap() {\n      return shotStore.cache.shotMap\n    },\n\n    taskTypeMap() {\n      return taskTypeStore.cache.taskTypeMap\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'editProduction',\n      'loadAggregatedPersonDaysOff',\n      'loadAssets',\n      'loadAssetTypeScheduleItems',\n      'loadEpisodeScheduleItems',\n      'loadScheduleItems',\n      'loadSequenceScheduleItems',\n      'loadShots',\n      'loadTasks',\n      'saveScheduleItem'\n    ]),\n\n    loadData() {\n      this.loading.schedule = true\n      this.loadScheduleItems(this.currentProduction)\n        .then(scheduleItems => {\n          const scheduleStartDate = parseDate(this.selectedStartDate)\n          const scheduleEndDate = parseDate(this.selectedEndDate)\n          scheduleItems = scheduleItems.map(item => {\n            const taskType = this.taskTypeMap.get(item.task_type_id)\n            let startDate, endDate\n            if (item.start_date) {\n              startDate = parseDate(item.start_date)\n            } else {\n              startDate = moment()\n            }\n            if (startDate.isSameOrAfter(scheduleEndDate)) {\n              startDate = scheduleEndDate.clone().add(-1, 'days')\n            }\n\n            if (startDate.isBefore(scheduleStartDate)) {\n              startDate = scheduleStartDate.clone()\n            }\n\n            if (item.end_date) {\n              endDate = parseDate(item.end_date)\n            } else {\n              endDate = startDate.clone().add(1, 'days')\n            }\n            if (endDate.isSameOrAfter(scheduleEndDate)) {\n              endDate = scheduleEndDate.clone()\n            }\n\n            const path = getTaskTypeSchedulePath(\n              taskType.id,\n              this.currentProduction.id,\n              this.currentEpisode ? this.currentEpisode.id : null,\n              taskType.for_entity\n            )\n\n            return {\n              ...item,\n              color: taskType.color,\n              for_entity: taskType.for_entity,\n              name: `${taskType.for_entity} / ${taskType.name}`,\n              priority: taskType.priority,\n              startDate,\n              endDate,\n              editable: this.isInDepartment(taskType),\n              expanded: false,\n              loading: false,\n              route:\n                taskType.for_entity === 'Shot' && this.isTVShow ? null : path,\n              children: []\n            }\n          })\n          this.scheduleItems = sortTaskTypeScheduleItems(\n            scheduleItems,\n            this.currentProduction,\n            this.taskTypeMap\n          )\n          this.loading.schedule = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.schedule = false\n        })\n    },\n\n    reset() {\n      if (this.currentProduction.start_date) {\n        this.startDate = parseDate(this.currentProduction.start_date)\n      }\n      if (this.currentProduction.end_date) {\n        this.endDate = parseDate(this.currentProduction.end_date)\n      }\n      this.selectedStartDate = this.startDate.toDate()\n      this.selectedEndDate = this.endDate.toDate()\n      this.loadData()\n    },\n\n    convertScheduleItems(taskTypeElement, scheduleItems) {\n      return scheduleItems.map(item => {\n        let startDate\n        if (item.start_date) {\n          startDate = parseDate(item.start_date)\n        } else {\n          startDate = moment()\n        }\n        if (startDate.isBefore(this.startDate)) {\n          startDate = this.startDate.clone()\n        }\n        let endDate\n        if (item.end_date) {\n          endDate = parseDate(item.end_date)\n        } else {\n          endDate = startDate.clone().add(1, 'days')\n        }\n        if (endDate.isBefore(startDate)) {\n          endDate = startDate.clone().add(1, 'days')\n        }\n        if (endDate.isAfter(this.endDate)) {\n          endDate = this.endDate.clone()\n        }\n        const scheduleItem = {\n          ...item,\n          startDate,\n          endDate,\n          expanded: false,\n          loading: false,\n          editable: this.isInDepartment(\n            this.taskTypeMap.get(item.task_type_id)\n          ),\n          children: [],\n          parentElement: taskTypeElement\n        }\n        if (this.isTVShow) {\n          scheduleItem.route = getTaskTypeSchedulePath(\n            item.task_type_id,\n            this.currentProduction.id,\n            item.object_id,\n            taskTypeElement.for_entity\n          )\n        }\n        return scheduleItem\n      })\n    },\n\n    async expandTaskTypeElement(\n      taskTypeElement,\n      refreshScheduleCallBack = null\n    ) {\n      taskTypeElement.expanded = !taskTypeElement.expanded\n\n      if (taskTypeElement.expanded) {\n        try {\n          taskTypeElement.loading = true\n\n          taskTypeElement.children = []\n          taskTypeElement.people = []\n\n          const loadScheduleItems = this.isTVShow\n            ? ['Asset', 'Shot'].includes(taskTypeElement.for_entity)\n              ? this.loadEpisodeScheduleItems\n              : this.loadSequenceScheduleItems\n            : taskTypeElement.for_entity === 'Shot'\n              ? this.loadSequenceScheduleItems\n              : this.loadAssetTypeScheduleItems\n          const parameters = {\n            production: this.currentProduction,\n            taskType: this.taskTypeMap.get(taskTypeElement.task_type_id)\n          }\n          const scheduleItems = await loadScheduleItems(parameters)\n\n          let children = this.convertScheduleItems(\n            taskTypeElement,\n            scheduleItems\n          )\n          const childrenById = new Map(\n            children.map(child => [child.object_id, child])\n          )\n\n          if (this.isTVShow) {\n            taskTypeElement.children = children\n          } else {\n            // load entities\n            if (taskTypeElement.for_entity === 'Asset') {\n              await this.loadAssets({ withShared: false, withTasks: false })\n            }\n            if (taskTypeElement.for_entity === 'Shot') {\n              await this.loadShots()\n            }\n\n            // load tasks\n            const tasks = await this.loadTasks({\n              project_id: this.currentProduction.id,\n              task_type_id: taskTypeElement.task_type_id,\n              relations: 'true'\n            })\n\n            // load days off of assignees\n            const personIds = [\n              ...new Set(tasks.flatMap(task => task.assignees))\n            ]\n            await this.loadDaysOff(personIds)\n\n            // group tasks by entity type and assignee\n            const tasksByType = {}\n            const people = {}\n            tasks.forEach(task => {\n              if (!task.start_date) {\n                return\n              }\n\n              // link entity to task\n              if (taskTypeElement.for_entity === 'Asset') {\n                task.entity = this.assetMap.get(task.entity_id)\n                task.entity_type_id = task.entity.asset_type_id\n              } else if (taskTypeElement.for_entity === 'Shot') {\n                task.entity = this.shotMap.get(task.entity_id)\n                task.entity_type_id = task.entity.sequence_id\n              } else {\n                task.entity_type_id = taskTypeElement.for_entity\n              }\n              if (task.entity?.canceled) {\n                return\n              }\n\n              if (!tasksByType[task.entity_type_id]) {\n                tasksByType[task.entity_type_id] = {}\n              }\n\n              if (!task.assignees.length) {\n                task.assignees = ['unassigned']\n              }\n\n              task.assignees.forEach(assigneeId => {\n                const entityTypeItem = childrenById.get(task.entity_type_id)\n\n                // populate task with start and end dates\n                const startDate = parseDate(task.start_date)\n                if (startDate.isAfter(this.endDate)) {\n                  return\n                }\n                if (startDate.isBefore(entityTypeItem.startDate)) {\n                  entityTypeItem.startDate = startDate.clone()\n                }\n                task.startDate = startDate\n\n                let endDate\n                if (task.due_date) {\n                  endDate = parseDate(task.due_date)\n                } else if (task.end_date) {\n                  endDate = parseDate(task.end_date)\n                } else if (task.estimation) {\n                  endDate = addBusinessDays(\n                    task.startDate,\n                    Math.ceil(\n                      minutesToDays(this.organisation, task.estimation)\n                    ) - 1,\n                    this.daysOffByPerson[assigneeId]\n                  )\n                }\n                if (!endDate || endDate.isBefore(startDate)) {\n                  const nbDays = startDate.isoWeekday() === 5 ? 3 : 1\n                  endDate = startDate.clone().add(nbDays, 'days')\n                }\n                if (!endDate.isSameOrAfter(startDate)) {\n                  const nbDays = startDate.isoWeekday() === 5 ? 3 : 1\n                  endDate = startDate.clone().add(nbDays, 'days')\n                }\n                if (endDate.isBefore(this.startDate)) {\n                  return\n                }\n                if (endDate.isAfter(entityTypeItem.endDate)) {\n                  entityTypeItem.endDate = endDate.clone()\n                }\n                task.endDate = endDate\n\n                if (!tasksByType[task.entity_type_id][assigneeId]) {\n                  tasksByType[task.entity_type_id][assigneeId] = []\n                  people[assigneeId] =\n                    assigneeId !== 'unassigned'\n                      ? {\n                          ...this.personMap.get(assigneeId),\n                          daysOff: this.daysOffByPerson[assigneeId]\n                        }\n                      : {\n                          id: assigneeId,\n                          avatar: false,\n                          color: '#888',\n                          full_name: this.$t('main.unassigned')\n                        }\n                }\n\n                tasksByType[task.entity_type_id][assigneeId].push(task)\n              })\n            })\n\n            if (taskTypeElement.for_entity === 'Asset') {\n              // filtering following custom asset types workflow\n              children = children.filter(item => {\n                const assetType = this.assetTypeMap.get(item.object_id)\n                return (\n                  assetType &&\n                  (!assetType.task_types.length ||\n                    assetType.task_types.includes(taskTypeElement.task_type_id))\n                )\n              })\n            }\n\n            // sort grouped tasks\n            const sortEntitiesByUserName = ([keyA], [keyB]) => {\n              if (keyA === 'unassigned') return 1\n              if (keyB === 'unassigned') return -1\n              return people[keyA].full_name.localeCompare(\n                people[keyB].full_name\n              )\n            }\n            const sortTasksByEntityName = (a, b) =>\n              a.entity?.name.localeCompare(b.entity?.name, undefined, {\n                numeric: true\n              })\n            children.forEach(child => {\n              const items = tasksByType[child.object_id] || {}\n              const sortedChildren = new Map(\n                Object.entries(items)\n                  .sort(sortEntitiesByUserName)\n                  .map(([key, tasks]) => [\n                    key,\n                    tasks.sort(sortTasksByEntityName)\n                  ])\n              )\n\n              child.children = sortedChildren\n            })\n\n            taskTypeElement.children = children\n            taskTypeElement.people = people\n          }\n        } catch (err) {\n          console.error(err)\n          taskTypeElement.children = []\n          taskTypeElement.people = []\n        } finally {\n          taskTypeElement.loading = false\n        }\n\n        if (refreshScheduleCallBack) {\n          refreshScheduleCallBack(taskTypeElement)\n        }\n      }\n    },\n\n    async loadDaysOff(personIds) {\n      this.daysOffByPerson = []\n      for (const personId of personIds) {\n        // load sequentially to avoid too many requests\n        const daysOff = await this.loadAggregatedPersonDaysOff({\n          personId\n        }).catch(\n          () => [] // fallback if not allowed to fetch days off\n        )\n        this.daysOffByPerson[personId] = daysOff\n      }\n    },\n\n    estimationChanged({ item, days }) {\n      item.man_days = daysToMinutes(this.organisation, days)\n      this.saveScheduleItem(item)\n    },\n\n    scheduleItemChanged(item) {\n      if (item.startDate && item.endDate && item.parentElement) {\n        item.parentElement.startDate = this.getMinDate(item.parentElement)\n        item.parentElement.endDate = this.getMaxDate(item.parentElement)\n        this.saveScheduleItem(item.parentElement)\n      } else if (!item.parentElement) {\n        const minDate = this.getMinDate(item)\n        const maxDate = this.getMaxDate(item)\n        if (item.startDate.isAfter(minDate)) item.startDate = minDate\n        if (item.endDate.isBefore(maxDate)) {\n          item.endDate = maxDate.add(-1, 'days')\n        }\n      }\n      this.saveScheduleItem(item)\n    },\n\n    getMinDate(parentElement) {\n      let minDate = this.endDate.clone()\n      parentElement.children.forEach(item => {\n        if (item.startDate && item.startDate.isBefore(minDate)) {\n          minDate = item.startDate\n        }\n      })\n      return minDate.clone()\n    },\n\n    getMaxDate(parentElement) {\n      let maxDate = this.startDate.clone()\n      parentElement.children.forEach(item => {\n        if (item.endDate && item.endDate.isAfter(maxDate)) {\n          maxDate = item.endDate\n        }\n      })\n      return maxDate.clone()\n    },\n\n    isInDepartment(taskType) {\n      if (this.isCurrentUserManager) {\n        return true\n      } else if (this.isCurrentUserSupervisor) {\n        if (this.user.departments.length === 0) {\n          return true\n        } else {\n          return (\n            taskType.department_id &&\n            this.user.departments.includes(taskType.department_id)\n          )\n        }\n      } else {\n        return false\n      }\n    }\n  },\n\n  watch: {\n    selectedStartDate() {\n      this.startDate = parseDate(this.selectedStartDate)\n      const start_date = this.startDate.format('YYYY-MM-DD')\n      if (\n        this.currentProduction.start_date &&\n        this.currentProduction.start_date !== start_date\n      ) {\n        this.editProduction({\n          ...this.currentProduction,\n          start_date\n        })\n      }\n    },\n\n    selectedEndDate() {\n      this.endDate = parseDate(this.selectedEndDate)\n      const end_date = this.endDate.format('YYYY-MM-DD')\n      if (\n        this.currentProduction.end_date &&\n        this.currentProduction.end_date !== end_date\n      ) {\n        this.editProduction({\n          ...this.currentProduction,\n          end_date\n        })\n      }\n    },\n\n    currentProduction() {\n      this.reset()\n    }\n  },\n\n  head() {\n    return {\n      title:\n        `${this.currentProduction.name} ` +\n        `| ${this.$t('schedule.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .project-dates {\n    color: $white-grey;\n    border-bottom: 1px solid $grey;\n  }\n}\n\n.project-dates {\n  border-bottom: 1px solid #eee;\n  padding-bottom: 1em;\n\n  .field {\n    padding-bottom: 0;\n    margin-bottom: 0;\n  }\n}\n\n.fixed-page {\n  padding: 1em;\n  padding-top: 90px;\n  padding-left: 2em;\n}\n\n.main-column {\n  display: flex;\n  border: 0;\n  overflow: hidden;\n  flex-direction: column;\n}\n\n.zoom-level {\n  margin-top: -10px;\n}\n</style>\n"],"names":["_sfc_main","ComboboxNumber","DateField","Schedule","TaskInfo","moment","mapGetters","assetStore","assetTypeStore","shotStore","taskTypeStore","mapActions","scheduleItems","scheduleStartDate","parseDate","scheduleEndDate","item","taskType","startDate","endDate","path","getTaskTypeSchedulePath","sortTaskTypeScheduleItems","err","taskTypeElement","scheduleItem","refreshScheduleCallBack","loadScheduleItems","parameters","children","childrenById","child","tasks","personIds","task","tasksByType","people","_a","assigneeId","entityTypeItem","addBusinessDays","minutesToDays","nbDays","assetType","sortEntitiesByUserName","keyA","keyB","sortTasksByEntityName","a","b","_b","items","sortedChildren","key","personId","daysOff","days","daysToMinutes","minDate","maxDate","parentElement","start_date","end_date","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_ctx","_createVNode","_component_date_field","$data","_cache","$event","_component_combobox_number","_component_schedule","$options","_hoisted_8","_component_task_info","_createCommentVNode"],"mappings":"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"}