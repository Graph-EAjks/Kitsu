{"version":3,"file":"ProductionSchedule-BSJ1ZsNa.js","sources":["../../node_modules/lucide-vue-next/dist/esm/icons/grip-vertical.js","../../node_modules/lucide-vue-next/dist/esm/icons/list-restart.js","../../src/components/pages/ProductionSchedule.vue"],"sourcesContent":["/**\n * @license lucide-vue-next v0.515.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst GripVertical = createLucideIcon(\"grip-vertical\", [\n  [\"circle\", { cx: \"9\", cy: \"12\", r: \"1\", key: \"1vctgf\" }],\n  [\"circle\", { cx: \"9\", cy: \"5\", r: \"1\", key: \"hp0tcf\" }],\n  [\"circle\", { cx: \"9\", cy: \"19\", r: \"1\", key: \"fkjjf6\" }],\n  [\"circle\", { cx: \"15\", cy: \"12\", r: \"1\", key: \"1tmaij\" }],\n  [\"circle\", { cx: \"15\", cy: \"5\", r: \"1\", key: \"19l28e\" }],\n  [\"circle\", { cx: \"15\", cy: \"19\", r: \"1\", key: \"f4zoj3\" }]\n]);\n\nexport { GripVertical as default };\n//# sourceMappingURL=grip-vertical.js.map\n","/**\n * @license lucide-vue-next v0.515.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ListRestart = createLucideIcon(\"list-restart\", [\n  [\"path\", { d: \"M21 6H3\", key: \"1jwq7v\" }],\n  [\"path\", { d: \"M7 12H3\", key: \"13ou7f\" }],\n  [\"path\", { d: \"M7 18H3\", key: \"1sijw9\" }],\n  [\n    \"path\",\n    {\n      d: \"M12 18a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L11 14\",\n      key: \"qth677\"\n    }\n  ],\n  [\"path\", { d: \"M11 10v4h4\", key: \"172dkj\" }]\n]);\n\nexport { ListRestart as default };\n//# sourceMappingURL=list-restart.js.map\n","<template>\n  <div class=\"columns fixed-page\">\n    <div class=\"column main-column\">\n      <div class=\"flexrow project-dates\">\n        <div class=\"flexrow-item\">\n          <label class=\"label\">\n            {{ $t('main.start_date') }}\n          </label>\n          <date-field :can-delete=\"false\" utc v-model=\"selectedStartDate\" />\n        </div>\n        <div class=\"flexrow-item\">\n          <label class=\"label\">\n            {{ $t('main.end_date') }}\n          </label>\n          <date-field :can-delete=\"false\" utc v-model=\"selectedEndDate\" />\n        </div>\n        <combobox-number\n          class=\"flexrow-item zoom-level\"\n          :label=\"$t('schedule.zoom_level')\"\n          :options=\"zoomOptions\"\n          v-model=\"zoomLevel\"\n        />\n        <div class=\"filler\"></div>\n        <div class=\"flexrow\">\n          <button-simple\n            class=\"flexrow-item\"\n            icon=\"clock\"\n            :text=\"$t('schedule.today')\"\n            @click=\"scrollScheduleToToday\"\n          />\n        </div>\n      </div>\n\n      <schedule\n        ref=\"schedule\"\n        :start-date=\"startDate\"\n        :end-date=\"endDate\"\n        :hierarchy=\"scheduleItems\"\n        :zoom-level=\"zoomLevel\"\n        :is-loading=\"loading.schedule\"\n        :is-error=\"errors.schedule\"\n        is-estimation-linked\n        hide-man-days\n        :multiline=\"isTVShow\"\n        :reassignable=\"true\"\n        :subchildren=\"!isTVShow\"\n        @item-assign=\"onScheduleItemAssigned\"\n        @item-changed=\"onScheduleItemChanged\"\n        @item-drop=\"onScheduleItemDropped\"\n        @item-selected=\"selectTaskTypeElement\"\n        @item-unassign=\"onScheduleItemUnassigned\"\n        @root-element-expanded=\"expandTaskTypeElement\"\n        @root-element-selected=\"selectParentElement\"\n        @task-selected=\"selectTaskElement\"\n      />\n    </div>\n\n    <div class=\"column side-column\" v-if=\"selectedTaskType\">\n      <div class=\"side\">\n        <a class=\"close-button\" @click=\"closeSidePanel\">\n          <x-icon class=\"align-middle\" :size=\"16\" />\n        </a>\n        <h2 class=\"mt1\">\n          {{\n            assignments.item === 'task'\n              ? $t('schedule.edit_task')\n              : $t('menu.assign_tasks')\n          }}\n        </h2>\n        <div class=\"details\">\n          <task-type-name\n            class=\"task-type\"\n            :production-id=\"currentProduction.id\"\n            :task-type=\"selectedTaskType\"\n          />\n          <button-simple\n            icon=\"user-check\"\n            :is-on=\"assignments.assigned\"\n            :title=\"$t('schedule.show_assigned')\"\n            @click=\"assignments.assigned = !assignments.assigned\"\n            v-if=\"!assignments.item\"\n          />\n        </div>\n        <div class=\"mt2\" v-if=\"assignments.loading\">\n          <spinner class=\"mauto\" :size=\"20\" />\n        </div>\n        <ul class=\"assignments mt1\" v-else-if=\"!assignments.item\">\n          <li\n            :key=\"entityType.id\"\n            v-for=\"entityType in assignments.entityTypes\"\n          >\n            <div\n              class=\"assignment-item\"\n              draggable=\"true\"\n              @dragstart=\"\n                onAssignmentItemDragStart($event, entityType, selectedTaskType)\n              \"\n            >\n              <grip-vertical-icon class=\"icon\" />\n              <span class=\"name\">\n                {{ entityType.name }}\n                ({{ filteredAssignments(entityType.children).length }})\n              </span>\n              <span\n                class=\"expand\"\n                @click=\"entityType.expanded = !entityType.expanded\"\n              >\n                <chevron-right-icon v-if=\"!entityType.expanded\" />\n                <chevron-down-icon v-else />\n              </span>\n            </div>\n            <ul class=\"assignments\" v-if=\"entityType.expanded\">\n              <li\n                :key=\"child.id\"\n                v-for=\"child in filteredAssignments(entityType.children)\"\n              >\n                <div\n                  class=\"assignment-item\"\n                  draggable=\"true\"\n                  @dragstart=\"\n                    onAssignmentItemDragStart(\n                      $event,\n                      { ...entityType, children: [child] },\n                      selectedTaskType\n                    )\n                  \"\n                >\n                  <grip-vertical-icon class=\"icon\" />\n                  <span class=\"name\">{{ child.name }}</span>\n                </div>\n              </li>\n            </ul>\n          </li>\n        </ul>\n        <div class=\"assignments mt1\" v-else>\n          <form class=\"mt1\" @submit.prevent=\"submitAssignments()\">\n            <div class=\"flexrow\">\n              <div class=\"flexrow-item\">\n                <date-field\n                  :can-delete=\"false\"\n                  :disabled=\"assignments.item !== 'dropped'\"\n                  :label=\"$t('main.start_date')\"\n                  utc\n                  v-model=\"assignments.startDate\"\n                />\n              </div>\n              <div class=\"flexrow-item\">\n                <date-field\n                  :can-delete=\"false\"\n                  :disabled=\"assignments.item !== 'dropped'\"\n                  :label=\"$t('main.end_date')\"\n                  utc\n                  v-model=\"assignments.endDate\"\n                />\n              </div>\n            </div>\n            <div :key=\"item.id\" v-for=\"item in draggedEntities\">\n              <div\n                class=\"dragged-type\"\n                :style=\"{\n                  background: selectedTaskType.color\n                }\"\n              >\n                {{ item.name }}\n              </div>\n              <div v-if=\"!item.children.length\">\n                {{ $t('schedule.no_entity') }}\n              </div>\n              <ul class=\"dragged-items\" v-else>\n                <li\n                  class=\"dragged-item\"\n                  :key=\"child.id\"\n                  :style=\"{\n                    background: `color-mix(in srgb, ${selectedTaskType.color} 40%, transparent)`,\n                    'border-left': `4px solid ${selectedTaskType.color}`\n                  }\"\n                  v-for=\"child in item.children\"\n                >\n                  {{ item.name }} / {{ child.name }}\n                </li>\n              </ul>\n              <hr />\n            </div>\n            <table class=\"assignees\">\n              <thead>\n                <tr>\n                  <td>\n                    {{ $t('schedule.assign') }}\n                    <a\n                      class=\"reset-assignees\"\n                      :title=\"$t('schedule.reset_list')\"\n                      @click=\"assignments.excludes = []\"\n                      v-if=\"assignments.excludes.length\"\n                    >\n                      <list-restart-icon\n                        class=\"align-middle\"\n                        :size=\"18\"\n                        :stroke-width=\"1.5\"\n                      />\n                    </a>\n                  </td>\n                </tr>\n              </thead>\n              <tbody v-if=\"!availablePersons.length\">\n                <tr>\n                  <td class=\"has-text-centered\">\n                    {{ $t('schedule.no_assignee') }}\n                  </td>\n                </tr>\n              </tbody>\n              <tbody v-else>\n                <tr :key=\"person.id\" v-for=\"person in availablePersons\">\n                  <td class=\"assignee\">\n                    <div class=\"person\">\n                      <people-avatar\n                        :is-link=\"false\"\n                        :font-size=\"14\"\n                        :person=\"person\"\n                        :size=\"28\"\n                      />\n                      <people-name :person=\"person\" />\n                    </div>\n                    <button-simple\n                      class=\"is-small\"\n                      icon=\"minus\"\n                      :title=\"\n                        $t('main.avatar.unassign', {\n                          personName: person.name\n                        })\n                      \"\n                      type=\"button\"\n                      @click=\"removeFromAssignments(person)\"\n                    />\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <checkbox\n              class=\"pa05\"\n              :disabled=\"!availablePersons.length\"\n              :label=\"$t('schedule.force_unassign')\"\n              :toggle=\"true\"\n              v-model=\"assignments.unassign\"\n              v-if=\"assignments.item === 'dropped'\"\n            />\n            <div class=\"flexrow mt2\" v-if=\"assignments.item === 'dropped'\">\n              <label class=\"mr05\">\n                {{ $t('schedule.forced_daily_quotas') }}\n              </label>\n              <text-field\n                class=\"mb0 daily-quotas\"\n                input-class=\" is-small\"\n                :step=\"0.01\"\n                type=\"number\"\n                v-model=\"assignments.forcedDailyQuota\"\n              />\n              <a\n                class=\"reset-quotas ml05\"\n                @click=\"assignments.forcedDailyQuota = null\"\n                v-if=\"assignments.forcedDailyQuota\"\n              >\n                <trash-icon class=\"align-middle\" :size=\"14\" />\n              </a>\n            </div>\n            <div class=\"mt2\" v-if=\"assignments.item === 'dropped'\">\n              {{ $t('schedule.estimated_daily_quotas') }}\n              {{ estimatedDailyQuota.toFixed(2) }}\n            </div>\n            <div class=\"flexrow mt2\" v-if=\"assignments.item === 'task'\">\n              <div class=\"flexrow-item\">\n                <date-field\n                  :can-delete=\"false\"\n                  :label=\"$t('main.start_date')\"\n                  utc\n                  :with-margin=\"false\"\n                  v-model=\"assignments.task.startDate\"\n                />\n              </div>\n              <div class=\"flexrow-item\">\n                <date-field\n                  :can-delete=\"false\"\n                  disabled\n                  :label=\"$t('main.end_date')\"\n                  utc\n                  :with-margin=\"false\"\n                  v-model=\"assignments.task.endDate\"\n                />\n              </div>\n            </div>\n            <div class=\"flexrow mt2\" v-if=\"assignments.item === 'task'\">\n              <text-field\n                class=\"mb0 estimation mr05\"\n                input-class=\" thin\"\n                :label=\"$t('main.estimation')\"\n                :step=\"0.01\"\n                placeholder=\"0.00\"\n                type=\"number\"\n                :unit-label=\"$t('schedule.md')\"\n                v-model=\"assignments.task.estimation\"\n              />\n            </div>\n            <div class=\"mt2 has-text-right\">\n              <template v-if=\"assignments.item === 'dropped'\">\n                <button-simple\n                  :disabled=\"!hasDraggedEntities || !availablePersons.length\"\n                  :is-loading=\"assignments.saving\"\n                  is-primary\n                  :text=\"$t('main.apply')\"\n                  type=\"submit\"\n                />\n                <button\n                  class=\"button is-link ml05\"\n                  :disabled=\"assignments.saving\"\n                  :text=\"$t('main.cancel')\"\n                  type=\"button\"\n                  @click=\"assignments.item = null\"\n                >\n                  {{ $t('main.cancel') }}\n                </button>\n              </template>\n              <template v-if=\"assignments.item === 'task'\">\n                <button-simple\n                  :disabled=\"!assignments.task.estimation\"\n                  :is-loading=\"assignments.saving\"\n                  is-primary\n                  :text=\"$t('main.apply')\"\n                  type=\"submit\"\n                />\n                <button class=\"button is-link ml05\" @click=\"closeSidePanel\">\n                  {{ $t('main.cancel') }}\n                </button>\n              </template>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n/*\n * Page to manage the schedule of the big steps of the production. It allows\n * to set milestones too.\n */\n\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  GripVerticalIcon,\n  ListRestartIcon,\n  TrashIcon,\n  XIcon\n} from 'lucide-vue-next'\nimport moment from 'moment-timezone'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { getTaskTypeSchedulePath } from '@/lib/path'\nimport {\n  sortByName,\n  sortPeople,\n  sortTaskTypeScheduleItems\n} from '@/lib/sorting'\nimport {\n  addBusinessDays,\n  daysToMinutes,\n  getBusinessDays,\n  getDatesFromStartDate,\n  minutesToDays,\n  parseDate,\n  parseSimpleDate\n} from '@/lib/time'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple.vue'\nimport Checkbox from '@/components/widgets/Checkbox.vue'\nimport ComboboxNumber from '@/components/widgets/ComboboxNumber.vue'\nimport DateField from '@/components/widgets/DateField.vue'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar.vue'\nimport PeopleName from '@/components/widgets/PeopleName.vue'\nimport Schedule from '@/components/widgets/Schedule.vue'\nimport Spinner from '@/components/widgets/Spinner.vue'\nimport TaskTypeName from '@/components/widgets/TaskTypeName.vue'\nimport TextField from '@/components/widgets/TextField.vue'\n\nimport assetStore from '@/store/modules/assets'\nimport assetTypeStore from '@/store/modules/assettypes'\nimport shotStore from '@/store/modules/shots'\nimport taskTypeStore from '@/store/modules/tasktypes'\n\nexport default {\n  name: 'production-schedule',\n\n  components: {\n    ButtonSimple,\n    Checkbox,\n    ChevronDownIcon,\n    ChevronRightIcon,\n    ComboboxNumber,\n    DateField,\n    GripVerticalIcon,\n    ListRestartIcon,\n    PeopleAvatar,\n    PeopleName,\n    Schedule,\n    Spinner,\n    TrashIcon,\n    TaskTypeName,\n    TextField,\n    XIcon\n  },\n\n  data() {\n    return {\n      assignments: {\n        assigned: false,\n        entityTypes: null,\n        excludes: [],\n        forcedDailyQuota: null,\n        item: null,\n        loading: false,\n        saving: false,\n        startDate: null,\n        endDate: null,\n        task: {},\n        unassign: false\n      },\n      daysOffByPerson: [],\n      draggedEntities: [],\n      endDate: moment().add(6, 'months').endOf('day'),\n      scheduleItems: [],\n      startDate: moment().startOf('day'),\n      selectedStartDate: null,\n      selectedEndDate: null,\n      selectedTaskType: null,\n      zoomLevel: 1,\n      zoomOptions: [\n        { label: this.$t('main.week'), value: 0 },\n        { label: '1', value: 1 },\n        { label: '2', value: 2 },\n        { label: '3', value: 3 }\n      ],\n      loading: {\n        schedule: false\n      },\n      errors: {\n        schedule: false\n      }\n    }\n  },\n\n  mounted() {\n    this.reset()\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'currentProduction',\n      'isCurrentUserManager',\n      'isCurrentUserSupervisor',\n      'isTVShow',\n      'organisation',\n      'personMap',\n      'productionAssetTypes',\n      'user'\n    ]),\n\n    estimatedDailyQuota() {\n      const startDate = parseSimpleDate(this.assignments.startDate)\n      const endDate = parseSimpleDate(this.assignments.endDate)\n      const nbDays = getBusinessDays(startDate, endDate)\n      const nbEntities = this.draggedEntities.reduce(\n        (sum, entity) => sum + (entity.children?.length ?? 0),\n        0\n      )\n      const nbAssignees = this.availablePersons.length\n\n      return nbDays && nbAssignees ? nbEntities / nbDays / nbAssignees : 0\n    },\n\n    assetMap() {\n      return assetStore.cache.assetMap\n    },\n\n    assets() {\n      return assetStore.cache.assets\n    },\n\n    assetTypeMap() {\n      return assetTypeStore.cache.assetTypeMap\n    },\n\n    availablePersons() {\n      const taskType = this.taskTypeMap.get(this.selectedTaskType.task_type_id)\n      return this.team.filter(\n        person =>\n          !this.assignments.excludes.includes(person.id) &&\n          person.role !== 'client' &&\n          (['admin', 'manager'].includes(person.role) ||\n            !person.departments.length ||\n            person.departments.includes(taskType?.department_id))\n      )\n    },\n\n    hasDraggedEntities() {\n      return this.draggedEntities.some(entity => entity.children.length)\n    },\n\n    shotMap() {\n      return shotStore.cache.shotMap\n    },\n\n    shots() {\n      return shotStore.cache.shots\n    },\n\n    taskTypeMap() {\n      return taskTypeStore.cache.taskTypeMap\n    },\n\n    team() {\n      return sortPeople(\n        this.currentProduction.team\n          .map(personId => this.personMap.get(personId))\n          .filter(person => person && !person.is_bot)\n      )\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'assignSelectedTasks',\n      'editProduction',\n      'loadAggregatedPersonDaysOff',\n      'loadAssets',\n      'loadAssetTypeScheduleItems',\n      'loadEpisodeScheduleItems',\n      'loadScheduleItems',\n      'loadSequenceScheduleItems',\n      'loadShots',\n      'loadTasks',\n      'saveScheduleItem',\n      'unassignPersonFromTask',\n      'unassignSelectedTasks',\n      'updateTask'\n    ]),\n\n    loadData() {\n      this.loading.schedule = true\n      this.loadScheduleItems(this.currentProduction)\n        .then(scheduleItems => {\n          const scheduleStartDate = parseDate(this.selectedStartDate)\n          const scheduleEndDate = parseDate(this.selectedEndDate)\n          scheduleItems = scheduleItems.map(item => {\n            const taskType = this.taskTypeMap.get(item.task_type_id)\n            let startDate, endDate\n            if (item.start_date) {\n              startDate = parseDate(item.start_date)\n            } else {\n              startDate = moment()\n            }\n            if (startDate.isSameOrAfter(scheduleEndDate)) {\n              startDate = scheduleEndDate.clone().add(-1, 'days')\n            }\n\n            if (startDate.isBefore(scheduleStartDate)) {\n              startDate = scheduleStartDate.clone()\n            }\n\n            if (item.end_date) {\n              endDate = parseDate(item.end_date)\n            } else {\n              endDate = startDate.clone().add(1, 'days')\n            }\n            if (endDate.isSameOrAfter(scheduleEndDate)) {\n              endDate = scheduleEndDate.clone()\n            }\n\n            const path = getTaskTypeSchedulePath(\n              taskType.id,\n              this.currentProduction.id,\n              this.currentEpisode ? this.currentEpisode.id : null,\n              taskType.for_entity\n            )\n\n            return {\n              ...item,\n              color: taskType.color,\n              for_entity: taskType.for_entity,\n              name: `${taskType.for_entity} / ${taskType.name}`,\n              priority: taskType.priority,\n              startDate,\n              endDate,\n              editable: this.isInDepartment(taskType),\n              expanded: false,\n              loading: false,\n              route:\n                taskType.for_entity === 'Shot' && this.isTVShow ? null : path,\n              children: []\n            }\n          })\n          this.scheduleItems = sortTaskTypeScheduleItems(\n            scheduleItems,\n            this.currentProduction,\n            this.taskTypeMap\n          )\n          this.loading.schedule = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.schedule = false\n        })\n    },\n\n    reset() {\n      this.closeSidePanel()\n\n      if (this.currentProduction.start_date) {\n        this.startDate = parseDate(this.currentProduction.start_date)\n      }\n      if (this.currentProduction.end_date) {\n        this.endDate = parseDate(this.currentProduction.end_date)\n      }\n      this.selectedStartDate = this.startDate.toDate()\n      this.selectedEndDate = this.endDate.toDate()\n      this.loadData()\n    },\n\n    convertScheduleItems(taskTypeElement, scheduleItems) {\n      return scheduleItems.map(item => {\n        let startDate\n        if (item.start_date) {\n          startDate = parseDate(item.start_date)\n        } else {\n          startDate = moment()\n        }\n        if (startDate.isBefore(this.startDate)) {\n          startDate = this.startDate.clone()\n        }\n        if (startDate.isAfter(this.endDate)) {\n          startDate = this.endDate.clone()\n        }\n        let endDate\n        if (item.end_date) {\n          endDate = parseDate(item.end_date)\n        } else {\n          endDate = startDate.clone().add(1, 'days')\n        }\n        if (endDate.isBefore(startDate)) {\n          endDate = startDate.clone().add(1, 'days')\n        }\n        if (endDate.isAfter(this.endDate)) {\n          endDate = this.endDate.clone()\n        }\n        const scheduleItem = {\n          ...item,\n          startDate,\n          endDate,\n          expanded: false,\n          loading: false,\n          editable: this.isInDepartment(\n            this.taskTypeMap.get(item.task_type_id)\n          ),\n          children: [],\n          parentElement: taskTypeElement\n        }\n        if (this.isTVShow) {\n          scheduleItem.route = getTaskTypeSchedulePath(\n            item.task_type_id,\n            this.currentProduction.id,\n            item.object_id,\n            taskTypeElement.for_entity\n          )\n        }\n        return scheduleItem\n      })\n    },\n\n    async expandTaskTypeElement(\n      taskTypeElement,\n      refreshScheduleCallBack = null,\n      expanded = false,\n      resetAssignments = true\n    ) {\n      taskTypeElement.expanded = expanded || !taskTypeElement.expanded\n\n      if (taskTypeElement.expanded) {\n        try {\n          taskTypeElement.loading = true\n\n          this.selectedTaskType = !this.isTVShow ? taskTypeElement : null\n          this.assignments.loading = resetAssignments\n\n          taskTypeElement.children = []\n          taskTypeElement.people = {}\n          taskTypeElement.entitiesByType = {}\n\n          const loadScheduleItems = this.isTVShow\n            ? ['Asset', 'Shot'].includes(taskTypeElement.for_entity)\n              ? this.loadEpisodeScheduleItems\n              : this.loadSequenceScheduleItems\n            : taskTypeElement.for_entity === 'Shot'\n              ? this.loadSequenceScheduleItems\n              : this.loadAssetTypeScheduleItems\n          const parameters = {\n            production: this.currentProduction,\n            taskType: this.taskTypeMap.get(taskTypeElement.task_type_id)\n          }\n          const scheduleItems = await loadScheduleItems(parameters)\n\n          let children = this.convertScheduleItems(\n            taskTypeElement,\n            scheduleItems\n          )\n          const childrenById = new Map(\n            children.map(child => [child.object_id, child])\n          )\n\n          if (this.isTVShow) {\n            taskTypeElement.children = children\n          } else {\n            // load entities\n            if (taskTypeElement.for_entity === 'Asset') {\n              await this.loadAssets({ withShared: false, withTasks: false })\n            }\n            if (taskTypeElement.for_entity === 'Shot') {\n              await this.loadShots()\n            }\n\n            const tasks = await this.loadTasks({\n              project_id: this.currentProduction.id,\n              task_type_id: taskTypeElement.task_type_id,\n              relations: 'true'\n            })\n\n            // load days off of assignees\n            const personIds = [\n              ...new Set(tasks.flatMap(task => task.assignees))\n            ]\n            await this.loadDaysOff(personIds)\n\n            // group tasks by entity type and assignee\n            const tasksByType = {}\n            const people = {}\n            tasks.forEach(task => {\n              if (!task.start_date) {\n                return\n              }\n\n              // link entity to task\n              if (taskTypeElement.for_entity === 'Asset') {\n                task.entity = this.assetMap.get(task.entity_id)\n                task.entity_type_id = task.entity.asset_type_id\n              } else if (taskTypeElement.for_entity === 'Shot') {\n                task.entity = this.shotMap.get(task.entity_id)\n                task.entity_type_id = task.entity.sequence_id\n              } else {\n                task.entity_type_id = taskTypeElement.for_entity\n              }\n              if (task.entity?.canceled) {\n                return\n              }\n\n              if (!tasksByType[task.entity_type_id]) {\n                tasksByType[task.entity_type_id] = {}\n              }\n\n              if (!task.assignees.length) {\n                task.assignees = ['unassigned']\n              }\n\n              task.assignees.forEach(assigneeId => {\n                const entityTypeItem = childrenById.get(task.entity_type_id)\n\n                // populate task with start and end dates\n                const startDate = parseDate(task.start_date)\n                if (startDate.isAfter(this.endDate)) {\n                  return\n                }\n                if (startDate.isBefore(entityTypeItem.startDate)) {\n                  entityTypeItem.startDate = startDate.clone()\n                }\n                task.startDate = startDate\n\n                let endDate\n                if (task.due_date) {\n                  endDate = parseDate(task.due_date)\n                } else if (task.end_date) {\n                  endDate = parseDate(task.end_date)\n                } else if (task.estimation) {\n                  endDate = addBusinessDays(\n                    task.startDate,\n                    Math.ceil(\n                      minutesToDays(this.organisation, task.estimation)\n                    ) - 1,\n                    this.daysOffByPerson[assigneeId]\n                  )\n                }\n                if (!endDate || endDate.isBefore(startDate)) {\n                  const nbDays = startDate.isoWeekday() === 5 ? 3 : 1\n                  endDate = startDate.clone().add(nbDays, 'days')\n                }\n                if (!endDate.isSameOrAfter(startDate)) {\n                  const nbDays = startDate.isoWeekday() === 5 ? 3 : 1\n                  endDate = startDate.clone().add(nbDays, 'days')\n                }\n                if (endDate.isBefore(this.startDate)) {\n                  return\n                }\n                if (endDate.isAfter(entityTypeItem.endDate)) {\n                  entityTypeItem.endDate = endDate.clone()\n                }\n                task.endDate = endDate\n\n                if (!tasksByType[task.entity_type_id][assigneeId]) {\n                  tasksByType[task.entity_type_id][assigneeId] = []\n                  people[assigneeId] =\n                    assigneeId !== 'unassigned'\n                      ? {\n                          ...this.personMap.get(assigneeId),\n                          daysOff: this.daysOffByPerson[assigneeId]\n                        }\n                      : {\n                          id: assigneeId,\n                          avatar: false,\n                          color: '#888',\n                          full_name: this.$t('main.unassigned')\n                        }\n                }\n\n                task.editable = true\n                task.unresizable = false\n                task.parentElement = entityTypeItem\n\n                tasksByType[task.entity_type_id][assigneeId].push(task)\n              })\n            })\n\n            if (taskTypeElement.for_entity === 'Asset') {\n              // filtering following custom asset types workflow\n              children = children.filter(item => {\n                const assetType = this.assetTypeMap.get(item.object_id)\n                return (\n                  assetType &&\n                  (!assetType.task_types.length ||\n                    assetType.task_types.includes(taskTypeElement.task_type_id))\n                )\n              })\n            }\n\n            // sort grouped tasks\n            const sortEntitiesByUserName = ([keyA], [keyB]) => {\n              if (keyA === 'unassigned') return 1\n              if (keyB === 'unassigned') return -1\n              return people[keyA].full_name.localeCompare(\n                people[keyB].full_name\n              )\n            }\n            const sortTasksByEntityName = (a, b) =>\n              a.entity?.name.localeCompare(b.entity?.name, undefined, {\n                numeric: true\n              })\n            children.forEach(child => {\n              const items = tasksByType[child.object_id] || {}\n              const sortedChildren = new Map(\n                Object.entries(items)\n                  .sort(sortEntitiesByUserName)\n                  .map(([key, tasks]) => [\n                    key,\n                    tasks.sort(sortTasksByEntityName)\n                  ])\n              )\n\n              child.children = sortedChildren\n            })\n\n            taskTypeElement.children = sortByName(children)\n            taskTypeElement.people = people\n\n            // group all assigned entities by type\n            taskTypeElement.entitiesByType = Object.fromEntries(\n              Object.entries(tasksByType).map(([entityTypeId, byAssignee]) => [\n                entityTypeId,\n                Object.entries(byAssignee)\n                  .flatMap(([assignee, items]) =>\n                    assignee !== 'unassigned'\n                      ? items.map(item => item.entity_id)\n                      : undefined\n                  )\n                  .filter(Boolean)\n              ])\n            )\n          }\n        } catch (err) {\n          console.error(err)\n          taskTypeElement.children = []\n          taskTypeElement.people = []\n        } finally {\n          taskTypeElement.loading = false\n        }\n\n        if (refreshScheduleCallBack) {\n          refreshScheduleCallBack(taskTypeElement)\n        }\n\n        this.selectTaskTypeElement(taskTypeElement, null, resetAssignments)\n      }\n    },\n\n    async loadDaysOff(personIds) {\n      this.daysOffByPerson = []\n      for (const personId of personIds) {\n        // load sequentially to avoid too many requests\n        const daysOff = await this.loadAggregatedPersonDaysOff({\n          personId\n        }).catch(\n          () => [] // fallback if not allowed to fetch days off\n        )\n        this.daysOffByPerson[personId] = daysOff\n      }\n    },\n\n    filteredAssignments(items) {\n      return this.assignments.assigned\n        ? items\n        : items.filter(item => !item.assigned)\n    },\n\n    saveTaskChanged(task) {\n      return this.updateTask({\n        taskId: task.id,\n        data: {\n          estimation: task.estimation,\n          start_date: task.startDate.format('YYYY-MM-DD'),\n          due_date: task.endDate.format('YYYY-MM-DD')\n        }\n      })\n    },\n\n    async onScheduleItemChanged(item) {\n      if (item.type === 'Task') {\n        // update dates with weekends and days off\n        const daysOff = item.assignees\n          .flatMap(assigneeId => this.daysOffByPerson[assigneeId])\n          .filter(Boolean)\n        item.startDate = addBusinessDays(item.startDate, 0, daysOff)\n        item.endDate = addBusinessDays(\n          item.startDate,\n          Math.ceil(minutesToDays(this.organisation, item.estimation)) - 1,\n          daysOff\n        )\n        // update parents\n        if (item.startDate.isBefore(item.parentElement.startDate)) {\n          item.parentElement.startDate = item.startDate.clone()\n          this.updateScheduleItem(item.parentElement)\n          if (\n            item.parentElement.startDate.isBefore(\n              item.parentElement.parentElement.startDate\n            )\n          ) {\n            item.parentElement.parentElement.startDate =\n              item.parentElement.startDate.clone()\n            this.updateScheduleItem(item.parentElement.parentElement)\n          }\n        }\n        if (item.endDate.isAfter(item.parentElement.endDate)) {\n          item.parentElement.endDate = item.endDate.clone()\n          this.updateScheduleItem(item.parentElement)\n          if (\n            item.parentElement.endDate.isAfter(\n              item.parentElement.parentElement.endDate\n            )\n          ) {\n            item.parentElement.parentElement.endDate =\n              item.parentElement.endDate.clone()\n            this.updateScheduleItem(item.parentElement.parentElement)\n          }\n        }\n        await this.saveTaskChanged(item)\n        return\n      }\n\n      if (item.startDate && item.endDate && item.parentElement) {\n        item.parentElement.startDate = this.getMinDate(item.parentElement)\n        item.parentElement.endDate = this.getMaxDate(item.parentElement)\n        this.saveScheduleItem(item.parentElement)\n      } else if (!item.parentElement) {\n        const minDate = this.getMinDate(item)\n        const maxDate = this.getMaxDate(item)\n        if (item.startDate.isAfter(minDate)) {\n          item.startDate = minDate\n        }\n        if (item.endDate.isBefore(maxDate)) {\n          item.endDate = maxDate\n        }\n      }\n\n      await this.updateScheduleItem(item)\n    },\n\n    updateScheduleItem(item) {\n      const scheduleItem = this.scheduleItems.find(\n        scheduleItem => scheduleItem === item\n      )\n      if (scheduleItem) {\n        scheduleItem.startDate = item.startDate\n        scheduleItem.start_date = item.startDate.format('YYYY-MM-DD')\n        scheduleItem.endDate = item.endDate\n        scheduleItem.end_date = item.endDate.format('YYYY-MM-DD')\n      }\n      this.saveScheduleItem(item)\n    },\n\n    getMinDate(parentElement) {\n      let minDate = this.endDate.clone()\n      parentElement.children.forEach(item => {\n        if (item.startDate && item.startDate.isBefore(minDate)) {\n          minDate = item.startDate\n        }\n      })\n      return minDate.clone()\n    },\n\n    getMaxDate(parentElement) {\n      let maxDate = this.startDate.clone()\n      parentElement.children.forEach(item => {\n        if (item.endDate && item.endDate.isAfter(maxDate)) {\n          maxDate = item.endDate\n        }\n      })\n      return maxDate.clone()\n    },\n\n    isInDepartment(taskType) {\n      if (this.isCurrentUserManager) {\n        return true\n      } else if (this.isCurrentUserSupervisor) {\n        if (this.user.departments.length === 0) {\n          return true\n        } else {\n          return (\n            taskType.department_id &&\n            this.user.departments.includes(taskType.department_id)\n          )\n        }\n      } else {\n        return false\n      }\n    },\n\n    scrollScheduleToToday() {\n      this.$refs.schedule?.scrollToToday()\n    },\n\n    resetSidePanel() {\n      this.assignments = {\n        ...this.assignments,\n        entityTypes: null,\n        excludes: [],\n        forcedDailyQuota: null,\n        item: null,\n        loading: false,\n        saving: false,\n        startDate: null,\n        endDate: null,\n        task: {},\n        unassign: false\n      }\n    },\n\n    selectParentElement(element) {\n      if (!element.expanded) {\n        this.expandTaskTypeElement(element, () => {\n          this.$refs.schedule?.refreshItemPositions(element)\n        })\n      } else {\n        this.selectTaskTypeElement(element)\n      }\n    },\n\n    async selectTaskTypeElement(\n      taskType,\n      selectedEntityType = undefined,\n      resetAssignments = true\n    ) {\n      if (this.isTVShow) {\n        return\n      }\n\n      this.selectedTaskType = taskType\n\n      if (resetAssignments) {\n        this.resetSidePanel()\n      }\n\n      this.assignments.loading = true\n\n      // load tasks\n      const tasks = await this.loadTasks({\n        project_id: this.currentProduction.id,\n        task_type_id: this.selectedTaskType.task_type_id,\n        relations: 'true'\n      })\n\n      // load entity types\n      if (taskType.for_entity === 'Asset') {\n        await this.loadAssets({ withShared: false, withTasks: false })\n\n        this.assignments.entityTypes = this.productionAssetTypes\n          .filter(assetType => {\n            // filtering following custom asset types workflow\n            return (\n              !assetType.task_types.length ||\n              assetType.task_types.includes(taskType.task_type_id)\n            )\n          })\n          .map((assetType, index) => {\n            return {\n              id: assetType.id,\n              name: assetType.name,\n              for_entity: taskType.for_entity,\n              expanded: assetType.id === selectedEntityType?.object_id,\n              entity_type_id: assetType.id,\n              children: this.assets\n                .filter(\n                  asset =>\n                    asset.asset_type_id === assetType.id &&\n                    !asset.canceled &&\n                    !asset.shared &&\n                    tasks.some(task => task.entity_id === asset.id)\n                )\n                .map(asset => ({\n                  ...asset,\n                  assigned: taskType.entitiesByType[assetType.id]?.includes(\n                    asset.id\n                  )\n                }))\n            }\n          })\n      } else if (taskType.for_entity === 'Shot') {\n        await this.loadShots()\n\n        const shotsBySequence = this.shots\n          .filter(shot => tasks.some(task => task.entity_id === shot.id))\n          .reduce((acc, shot) => {\n            if (!acc[shot.parent_id]) {\n              acc[shot.parent_id] = []\n            }\n            shot.assigned = taskType.entitiesByType[shot.parent_id]?.includes(\n              shot.id\n            )\n            acc[shot.parent_id].push(shot)\n            return acc\n          }, {})\n\n        this.assignments.entityTypes = Object.keys(shotsBySequence).map(\n          sequenceId => {\n            const shots = shotsBySequence[sequenceId]\n            return {\n              id: sequenceId,\n              name: shots[0].sequence_name,\n              for_entity: taskType.for_entity,\n              expanded: sequenceId === selectedEntityType?.object_id,\n              children: shots\n            }\n          }\n        )\n      }\n      this.assignments.loading = false\n    },\n\n    selectTaskElement(taskType, entityType, task, selection) {\n      if (selection.length !== 1) {\n        this.closeSidePanel()\n        return\n      }\n\n      this.resetSidePanel()\n\n      this.selectedTaskType = taskType\n      this.draggedEntities = [{ ...entityType, children: [{ ...task.entity }] }]\n\n      this.assignments.item = 'task'\n\n      const start_date = event.start_date || taskType.start_date\n      const end_date = parseDate(start_date).isAfter(taskType.end_date)\n        ? start_date\n        : taskType.end_date\n      this.assignments.startDate = start_date\n      this.assignments.endDate = end_date\n      this.assignments.task = {\n        ...task,\n        estimation: minutesToDays(this.organisation, task.estimation),\n        startDate: task.startDate.format('YYYY-MM-DD'),\n        endDate: task.endDate.format('YYYY-MM-DD')\n      }\n      this.assignments.excludes = this.team\n        .filter(person => !task.assignees.includes(person.id))\n        .map(person => person.id)\n      this.assignments.unassign = true\n    },\n\n    closeSidePanel() {\n      this.selectedTaskType = null\n      this.resetSidePanel()\n    },\n\n    onAssignmentItemDragStart(event, item, type) {\n      event.stopPropagation()\n      event.dataTransfer.dropEffect = 'move'\n      event.dataTransfer.effectAllowed = 'move'\n      event.dataTransfer.setData(`task-type-${type.task_type_id}`, true) // use for hack on drag over (must be lowercase)\n      event.dataTransfer.setData('taskTypeId', type.task_type_id)\n      event.dataTransfer.setData('entityId', item.id)\n\n      item.children = this.filteredAssignments(item.children)\n      this.draggedEntities = [item]\n    },\n\n    onScheduleItemDropped(event, item) {\n      this.assignments.item = 'dropped'\n      const start_date = event.start_date || item.start_date\n      const end_date = parseDate(start_date).isAfter(item.end_date)\n        ? start_date\n        : item.end_date\n      this.assignments.startDate = start_date\n      this.assignments.endDate = end_date\n    },\n\n    removeFromAssignments(person) {\n      this.assignments.excludes.push(person.id)\n    },\n\n    submitAssignments(event) {\n      if (this.assignments.item === 'dropped') {\n        this.saveAssignments()\n      } else if (this.assignments.item === 'task') {\n        this.saveTask()\n      }\n    },\n\n    async saveAssignments() {\n      this.assignments.saving = true\n\n      // load tasks\n      const tasks = await this.loadTasks({\n        project_id: this.currentProduction.id,\n        task_type_id: this.selectedTaskType.task_type_id,\n        relations: 'true'\n      })\n\n      const dailyQuota =\n        this.assignments.forcedDailyQuota ?? this.estimatedDailyQuota\n      const taskEstimation = 1 / dailyQuota\n\n      // assign each selected entity to each selected assignee\n      for (const taskType of this.draggedEntities) {\n        const startDate = parseDate(this.assignments.startDate)\n        const endDate = parseDate(this.assignments.endDate)\n\n        let cumulatedTasks = 0\n        let nextAssigneeIndex = 0\n        let nextStartDate = startDate.clone()\n\n        // distribute the task assignments according to the daily quotas, the task type duration and people's availability.\n        for (const entity of taskType.children) {\n          const task = tasks.find(task => task.entity_id === entity.id)\n          if (!task) {\n            continue // no task found for this entity\n          }\n\n          if (this.assignments.unassign) {\n            await this.unassignSelectedTasks({ taskIds: [task.id] })\n          }\n\n          cumulatedTasks++\n\n          let taskStartDate = nextStartDate\n          let taskEndDate = null\n          let taskAssignee = null\n          while (nextAssigneeIndex < this.availablePersons.length) {\n            taskAssignee = this.availablePersons[nextAssigneeIndex]\n\n            taskStartDate = addBusinessDays(\n              taskStartDate,\n              0,\n              this.daysOffByPerson[taskAssignee.id]\n            )\n\n            const { due_date } = getDatesFromStartDate(\n              this.organisation,\n              startDate,\n              taskEndDate,\n              cumulatedTasks * taskEstimation,\n              this.daysOffByPerson[taskAssignee.id]\n            )\n            taskEndDate = parseDate(due_date)\n\n            if (taskEndDate.isAfter(endDate)) {\n              // try to assign the task to the next available person\n              nextAssigneeIndex++\n              cumulatedTasks = 1\n              taskStartDate = startDate.clone()\n              taskEndDate = null\n            } else {\n              await Promise.all([\n                // assign task to the current assignee\n                this.assignSelectedTasks({\n                  personId: taskAssignee.id,\n                  taskIds: [task.id]\n                }),\n                // save task dates & estimation\n                this.updateTask({\n                  taskId: task.id,\n                  data: {\n                    estimation: daysToMinutes(\n                      this.organisation,\n                      taskEstimation\n                    ),\n                    start_date: taskStartDate.format('YYYY-MM-DD'),\n                    due_date: taskEndDate.format('YYYY-MM-DD')\n                  }\n                })\n              ])\n              // set next start date\n              if ((cumulatedTasks * taskEstimation) % 1 !== 0) {\n                nextStartDate = taskEndDate.clone()\n              } else {\n                nextStartDate = taskEndDate.clone().add(1, 'days')\n              }\n              break // jump to next task\n            }\n          }\n        }\n\n        // refresh schedule\n        this.expandTaskTypeElement(\n          this.selectedTaskType,\n          () => {\n            this.$refs.schedule?.refreshItemPositions(this.selectedTaskType)\n          },\n          true,\n          false\n        )\n      }\n\n      this.assignments.saving = false\n    },\n\n    async saveTask() {\n      this.assignments.saving = true\n      try {\n        const task = {\n          ...this.assignments.task,\n          startDate: parseDate(this.assignments.task.startDate),\n          endDate: parseDate(this.assignments.task.endDate),\n          estimation: daysToMinutes(\n            this.organisation,\n            this.assignments.task.estimation\n          ),\n          assignees: this.availablePersons.map(person => person.id)\n        }\n        // update task and assignments\n        await this.onScheduleItemChanged(task)\n        await this.unassignSelectedTasks({ taskIds: [task.id] })\n        await Promise.all(\n          task.assignees.map(personId =>\n            this.assignSelectedTasks({\n              personId,\n              taskIds: [task.id]\n            })\n          )\n        )\n        // refresh task in side panel\n        this.assignments.task.startDate = task.startDate.format('YYYY-MM-DD')\n        this.assignments.task.endDate = task.endDate.format('YYYY-MM-DD')\n        // refresh schedule\n        this.expandTaskTypeElement(\n          this.selectedTaskType,\n          () => {\n            this.$refs.schedule?.refreshItemPositions(this.selectedTaskType)\n          },\n          true,\n          false\n        )\n      } catch (err) {\n        console.error(err)\n      } finally {\n        this.assignments.saving = false\n      }\n    },\n\n    async onScheduleItemAssigned(task, personId) {\n      // update task to refresh the schedule\n      task.assignees.push(personId)\n      task.parentElement.children.get(personId).push(task)\n\n      // save change\n      await this.assignSelectedTasks({\n        personId,\n        taskIds: [task.id]\n      })\n    },\n\n    async onScheduleItemUnassigned(task, personId) {\n      // update task to refresh the schedule\n      task.assignees = task.assignees.filter(id => id !== personId)\n      const tasks = task.parentElement.children.get(personId)\n      tasks.splice(tasks.indexOf(task), 1)\n\n      // save change\n      await this.unassignPersonFromTask({\n        person: { id: personId },\n        task\n      })\n    }\n  },\n\n  watch: {\n    selectedStartDate() {\n      this.startDate = parseDate(this.selectedStartDate)\n      const start_date = this.startDate.format('YYYY-MM-DD')\n      if (\n        this.currentProduction.start_date &&\n        this.currentProduction.start_date !== start_date\n      ) {\n        this.editProduction({\n          ...this.currentProduction,\n          start_date\n        })\n      }\n    },\n\n    selectedEndDate() {\n      this.endDate = parseDate(this.selectedEndDate)\n      const end_date = this.endDate.format('YYYY-MM-DD')\n      if (\n        this.currentProduction.end_date &&\n        this.currentProduction.end_date !== end_date\n      ) {\n        this.editProduction({\n          ...this.currentProduction,\n          end_date\n        })\n      }\n    },\n\n    currentProduction() {\n      this.reset()\n    }\n  },\n\n  head() {\n    return {\n      title:\n        `${this.currentProduction.name} ` +\n        `| ${this.$t('schedule.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .project-dates {\n    color: $white-grey;\n    border-bottom: 1px solid $grey;\n  }\n}\n\n.project-dates {\n  border-bottom: 1px solid #eee;\n  padding-bottom: 1em;\n\n  .field {\n    padding-bottom: 0;\n    margin-bottom: 0;\n  }\n}\n\n.fixed-page {\n  padding: 1em;\n  padding-top: 90px;\n  padding-left: 2em;\n}\n\n.main-column {\n  display: flex;\n  border: 0;\n  overflow: hidden;\n  flex-direction: column;\n}\n\n.zoom-level {\n  margin-top: -10px;\n}\n\n.ml2 {\n  margin-left: 2em;\n}\n\n.side-column {\n  position: relative;\n  top: -30px;\n  right: -14px;\n  height: calc(100% + 44px);\n  margin-top: 0;\n  padding: 0 1em 1em 1em;\n  background: var(--background-alt);\n  min-height: 100%;\n\n  .close-button {\n    position: absolute;\n    right: 1em;\n  }\n\n  .details {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n}\n\n.assignments {\n  list-style-type: none;\n  margin-left: 0;\n\n  .assignments {\n    margin-left: 2em;\n  }\n\n  .assignment-item {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: var(--background-selectable);\n    border: 1px solid $grey;\n    margin-top: -1px;\n    padding: 1em 1em 1em 0.5em;\n    cursor: grab;\n\n    .icon {\n      color: $grey;\n      margin-right: 0.5em;\n    }\n\n    .name {\n      flex: 1;\n    }\n\n    .expand {\n      cursor: pointer;\n      opacity: 0.5;\n      height: 24px;\n\n      &:hover {\n        opacity: 1;\n      }\n    }\n  }\n\n  li:nth-child(even) .assignment-item {\n    background: color-mix(in srgb, var(--background-selectable) 70%, white 30%);\n  }\n\n  .dragged-type {\n    font-size: 12px;\n    font-weight: 600;\n    padding: 5px;\n    margin-bottom: 1em;\n    border-radius: 0.2em;\n    text-align: center;\n  }\n\n  .dragged-items {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.5em;\n    list-style: none;\n    margin: 0;\n  }\n\n  .dragged-item {\n    padding: 0 0.7em;\n    border-radius: 0.2em;\n  }\n\n  .assignees {\n    .reset-assignees {\n      position: absolute;\n      right: 1.5em;\n      opacity: 0.5;\n\n      &:hover {\n        opacity: 1;\n      }\n    }\n    td {\n      padding: 0.5em;\n    }\n    tbody {\n      background: var(--background);\n\n      tr {\n        border: 1px solid var(--border);\n      }\n    }\n    .assignee {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .person {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n    }\n  }\n\n  .daily-quotas {\n    width: 50px;\n  }\n  .reset-quotas {\n    opacity: 0.5;\n\n    &:hover {\n      opacity: 1;\n    }\n  }\n\n  .estimation {\n    :deep(.input) {\n      font-size: 1rem;\n      padding: 0 1rem;\n      width: 90px;\n    }\n  }\n}\n</style>\n"],"names":["GripVertical","createLucideIcon","ListRestart","_sfc_main","ButtonSimple","Checkbox","ChevronDownIcon","ChevronRightIcon","ComboboxNumber","DateField","GripVerticalIcon","ListRestartIcon","PeopleAvatar","PeopleName","Schedule","Spinner","TrashIcon","TaskTypeName","TextField","XIcon","moment","mapGetters","startDate","parseSimpleDate","endDate","nbDays","getBusinessDays","nbEntities","sum","entity","nbAssignees","assetStore","assetTypeStore","taskType","person","shotStore","taskTypeStore","sortPeople","personId","mapActions","scheduleItems","scheduleStartDate","parseDate","scheduleEndDate","item","path","getTaskTypeSchedulePath","sortTaskTypeScheduleItems","err","taskTypeElement","scheduleItem","refreshScheduleCallBack","expanded","resetAssignments","loadScheduleItems","parameters","children","childrenById","child","tasks","personIds","task","tasksByType","people","assigneeId","entityTypeItem","addBusinessDays","minutesToDays","assetType","sortEntitiesByUserName","keyA","keyB","sortTasksByEntityName","a","b","items","sortedChildren","key","sortByName","entityTypeId","byAssignee","assignee","daysOff","minDate","maxDate","parentElement","element","selectedEntityType","index","asset","shotsBySequence","shot","acc","sequenceId","shots","entityType","selection","start_date","end_date","event","type","taskEstimation","cumulatedTasks","nextAssigneeIndex","nextStartDate","taskStartDate","taskEndDate","taskAssignee","due_date","getDatesFromStartDate","daysToMinutes","id","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_19","_hoisted_20","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_27","_hoisted_28","_hoisted_30","_hoisted_32","_hoisted_33","_hoisted_35","_hoisted_38","_hoisted_39","_hoisted_41","_hoisted_42","_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_ctx","_createVNode","_component_date_field","$data","_cache","$event","_component_combobox_number","_component_button_simple","$options","_component_schedule","_hoisted_9","args","_component_x_icon","_component_task_type_name","_createCommentVNode","_createBlock","_hoisted_13","_component_spinner","_hoisted_21","_withModifiers","_Fragment","_renderList","_normalizeStyle","_hoisted_26","_hoisted_25","_createTextVNode","_component_list_restart_icon","_hoisted_31","_component_people_avatar","_component_people_name","_hoisted_29","_component_checkbox","_hoisted_34","_component_text_field","_component_trash_icon","_hoisted_36","_hoisted_37","_hoisted_40","_hoisted_14","_component_grip_vertical_icon","_component_chevron_down_icon","_component_chevron_right_icon","_hoisted_18"],"mappings":"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","x_google_ignoreList":[0,1]}