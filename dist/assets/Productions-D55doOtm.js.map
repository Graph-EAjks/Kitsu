{"version":3,"file":"Productions-D55doOtm.js","sources":["../../src/components/widgets/ButtonLink.vue","../../src/components/pages/production/ProductionStats.vue","../../src/components/lists/ProductionList.vue","../../src/components/pages/Productions.vue"],"sourcesContent":["<template>\n  <router-link class=\"button\" :title=\"title\" :to=\"path\">\n    <span class=\"icon is-small\" v-if=\"icon.length > 0 && icon.startsWith('fa')\">\n      <i :class=\"'fa ' + icon\"></i>\n    </span>\n    <plus-icon\n      :class=\"{\n        icon: true,\n        'is-small': true,\n        'only-icon': !isText\n      }\"\n      v-if=\"icon === 'plus'\"\n    />\n    <download-icon\n      :class=\"{\n        icon: true,\n        'is-small': true,\n        'only-icon': !isText\n      }\"\n      v-if=\"icon === 'download'\"\n    />\n    <upload-icon\n      :class=\"{\n        icon: true,\n        'is-small': true,\n        'only-icon': !isText\n      }\"\n      v-if=\"icon === 'upload'\"\n    />\n    <edit-icon\n      :class=\"{\n        icon: true,\n        'is-small': true,\n        'only-icon': !isText\n      }\"\n      v-if=\"icon === 'edit'\"\n    />\n    <trash-icon\n      :class=\"{\n        icon: true,\n        'is-small': true,\n        'only-icon': !isText\n      }\"\n      v-if=\"icon === 'delete'\"\n    />\n    <rotate-ccw-icon\n      :class=\"{\n        icon: true,\n        'is-small': true,\n        'only-icon': !isText\n      }\"\n      v-if=\"icon === 'restore'\"\n    />\n\n    <span\n      :class=\"{\n        text: true,\n        'is-hidden-touch': isResponsive\n      }\"\n      v-if=\"isText\"\n    >\n      {{ text }}\n    </span>\n  </router-link>\n</template>\n\n<script>\nimport {\n  DownloadIcon,\n  EditIcon,\n  PlusIcon,\n  RotateCcwIcon,\n  TrashIcon,\n  UploadIcon\n} from 'vue-feather-icons'\n\nexport default {\n  name: 'button-link',\n  components: {\n    DownloadIcon,\n    EditIcon,\n    PlusIcon,\n    RotateCcwIcon,\n    TrashIcon,\n    UploadIcon\n  },\n  props: {\n    text: {\n      default: '',\n      type: String\n    },\n    title: {\n      default: '',\n      type: String\n    },\n    path: {\n      default: ''\n    },\n    icon: {\n      default: '',\n      type: String\n    },\n    isResponsive: {\n      default: false,\n      type: Boolean\n    }\n  },\n  computed: {\n    isText() {\n      return this.text && this.text.length > 0\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.button .icon.is-small.only-icon {\n  margin-right: 0;\n}\n</style>\n","<template>\n  <div class=\"project-stats\" :class=\"{ expandable }\" @click=\"expandStats\">\n    <div class=\"nb-tasks\">\n      <span class=\"tag\">\n        {{ stats.amount_done || 0 }} {{ $t('tasks.done') }}\n        /\n        {{ stats.amount || 0 }} {{ $t('tasks.tasks') }}\n      </span>\n      <span class=\"tag\">\n        {{ formatDuration(stats.total_duration) }}\n        {{ $tc('main.days_spent', formatDuration(stats.total_duration)) }}\n        /\n        {{ formatDuration(stats.total_estimation) }}\n        {{ $tc('main.days_estimated', formatDuration(stats.total_estimation)) }}\n      </span>\n    </div>\n    <div class=\"color-wrapper\">\n      <div\n        class=\"stat\"\n        :style=\"{\n          backgroundColor: taskStatusMap.get(statusId).color,\n          width: `${(statsByStatus[statusId] / stats.amount) * 100}%`\n        }\"\n        :key=\"statusId\"\n        :title=\"`${taskStatusMap.get(statusId).name} - ${statsByStatus[statusId]} tasks`\"\n        v-for=\"statusId in statusIds\"\n      ></div>\n    </div>\n\n    <div class=\"task-type-stats\" v-if=\"expanded\">\n      <div\n        class=\"flexrow task-type-stat\"\n        :key=\"taskType.id\"\n        v-for=\"taskType in taskTypes\"\n      >\n        <div class=\"task-type-wrapper flexrow-item\">\n          <task-type-name\n            class=\"flexrow-item task-type-name\"\n            :task-type=\"taskType\"\n          />\n        </div>\n        <div class=\"task-type-wrapper flexrow-item\">\n          {{ taskTypeStatsMap[taskType.id].amount_done }}\n          /\n          {{ taskTypeStatsMap[taskType.id].amount }} {{ $t('tasks.tasks') }}\n        </div>\n        <div class=\"task-type-wrapper flexrow-item\">\n          {{ formatDuration(taskTypeStatsMap[taskType.id].total_duration) }}\n          /\n          {{ formatDuration(taskTypeStatsMap[taskType.id].total_estimation) }}\n          {{ $tc('main.days') }}\n        </div>\n        <div class=\"color-wrapper flexrow-item\">\n          <div\n            class=\"stat\"\n            :style=\"{\n              backgroundColor: taskStatusMap.get(statusStats.task_status_id)\n                .color,\n              width: `${(statsByStatus[statusStats.task_status_id] / taskTypeStatsMap[taskType.id].amount) * 100}%`\n            }\"\n            :key=\"taskType.id + statusStats.task_status_id\"\n            :title=\"`${taskStatusMap.get(statusStats.task_status_id).name} - ${statusStats.amount} tasks`\"\n            v-for=\"statusStats in sortStatuses(\n              taskTypeStatsMap[taskType.id].task_statuses\n            )\"\n          ></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n/*\n  This component displays the stats of a given production.\n  It shows the number of tasks done, the number of tasks in total, the total\n  duration spent on tasks and the total estimation of the tasks.\n  It also shows the repartition of the tasks by status as colored line.\n  When expanded, it shows the repartition of the tasks by task type.\n*/\nimport { mapGetters } from 'vuex'\n\nimport { formatListMixin } from '@/components/mixins/format'\nimport TaskTypeName from '@/components/widgets/TaskTypeName.vue'\n\nexport default {\n  name: 'production-stats',\n\n  mixins: [formatListMixin],\n\n  components: {\n    TaskTypeName\n  },\n\n  props: {\n    stats: {\n      type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      expanded: false\n    }\n  },\n\n  computed: {\n    ...mapGetters(['taskStatusMap', 'taskTypeMap']),\n\n    expandable() {\n      return this.stats.task_types?.length > 0\n    },\n\n    statusIds() {\n      return Object.keys(this.statsByStatus).sort((a, b) => {\n        return (\n          this.taskStatusMap.get(a).priority <\n          this.taskStatusMap.get(b).priority\n        )\n      })\n    },\n\n    taskTypes() {\n      const entityPriority = {\n        Asset: 1,\n        Shot: 2,\n        Sequence: 3,\n        Episode: 4,\n        Edit: 5,\n        Concept: 6\n      }\n      return Object.keys(this.taskTypeStatsMap)\n        .map(taskTypeId => {\n          return this.taskTypeMap.get(taskTypeId)\n        })\n        .sort((a, b) => {\n          if (a.for_entity !== b.for_entity) {\n            return entityPriority[a.for_entity] > entityPriority[b.for_entity]\n          } else {\n            return a.priority > b.priority\n          }\n        })\n    },\n\n    taskTypeStatsMap() {\n      const taskTypeStatsMap = {}\n      this.stats.task_types?.forEach(taskTypeStat => {\n        if (!taskTypeStatsMap[taskTypeStat.task_type_id]) {\n          taskTypeStatsMap[taskTypeStat.task_type_id] = {\n            task_type_id: taskTypeStat.task_type_id,\n            amount: 0,\n            amount_done: 0,\n            total_duration: 0,\n            total_estimation: 0,\n            task_statuses: []\n          }\n        }\n        taskTypeStatsMap[taskTypeStat.task_type_id].amount +=\n          taskTypeStat.amount\n        taskTypeStatsMap[taskTypeStat.task_type_id].amount_done +=\n          taskTypeStat.amount_done\n        taskTypeStatsMap[taskTypeStat.task_type_id].total_duration +=\n          taskTypeStat.total_duration\n        taskTypeStatsMap[taskTypeStat.task_type_id].total_estimation +=\n          taskTypeStat.total_estimation\n        taskTypeStatsMap[taskTypeStat.task_type_id].task_statuses.push(\n          taskTypeStat\n        )\n      })\n      return taskTypeStatsMap\n    },\n\n    statsByStatus() {\n      const statsByStatus = {}\n      this.stats.task_types?.forEach(taskTypeStat => {\n        if (!statsByStatus[taskTypeStat.task_status_id]) {\n          statsByStatus[taskTypeStat.task_status_id] = 0\n        }\n        statsByStatus[taskTypeStat.task_status_id] += taskTypeStat.amount\n      })\n      return statsByStatus\n    }\n  },\n\n  methods: {\n    expandStats() {\n      if (this.expandable) {\n        this.expanded = !this.expanded\n      }\n    },\n\n    sortStatuses(statuses) {\n      return statuses.sort((a, b) => {\n        return (\n          this.taskStatusMap.get(a.task_status_id).priority <\n          this.taskStatusMap.get(b.task_status_id).priority\n        )\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.project-stats {\n  background: var(--background);\n  padding: 1em;\n  border-radius: 5px;\n\n  &.expandable {\n    cursor: pointer;\n  }\n}\n\n.color-wrapper {\n  border: 1px solid var(--border-alt);\n  border-radius: 5px;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 14px;\n\n  .dark & {\n    border: 1px solid var(--border);\n  }\n}\n\n.stat {\n  &:first-child {\n    border-top-left-radius: 5px;\n    border-bottom-left-radius: 5px;\n  }\n\n  &:last-child {\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n  }\n}\n\n.nb-tasks .tag {\n  background: var(--background-selected);\n  color: $black;\n  margin: 0 0.5em 0.5em 0;\n\n  .dark & {\n    color: $white;\n  }\n}\n\n.tag {\n  border: 1px solid var(--border);\n}\n\n.task-type-stats {\n  margin-top: 1em;\n}\n\n.task-type-wrapper {\n  margin-right: 1em;\n  margin-top: 0.5em;\n  min-width: 120px;\n}\n</style>\n","<template>\n  <div class=\"data-list\">\n    <div class=\"datatable-wrapper\">\n      <table class=\"datatable multi-section\">\n        <thead class=\"datatable-head\">\n          <tr>\n            <th scope=\"col\" class=\"name datatable-row-header\">\n              {{ $t('productions.fields.name') }}\n            </th>\n            <th scope=\"col\" class=\"type\">\n              {{ $t('productions.fields.type') }}\n            </th>\n            <th scope=\"col\" class=\"style\">\n              {{ $t('productions.fields.style') }}\n            </th>\n            <th scope=\"col\" class=\"fps\">{{ $t('productions.fields.fps') }}</th>\n            <th scope=\"col\" class=\"ratio\">\n              {{ $t('productions.fields.ratio') }}\n            </th>\n            <th scope=\"col\" class=\"resolution\">\n              {{ $t('productions.fields.resolution') }}\n            </th>\n            <th scope=\"col\" class=\"actions\"></th>\n          </tr>\n        </thead>\n        <tbody class=\"datatable-body\">\n          <tr class=\"datatable-type-header\">\n            <th scope=\"rowgroup\" colspan=\"6\">\n              <span class=\"datatable-row-header\">\n                {{ $t('productions.status.open') }}\n              </span>\n            </th>\n          </tr>\n          <template v-for=\"entry in openProductions\">\n            <tr class=\"datatable-row\" :key=\"entry.id\">\n              <th class=\"name datatable-row-header\" scope=\"row\">\n                <production-name-cell\n                  :with-avatar=\"true\"\n                  :entry=\"entry\"\n                  :last-production-screen=\"lastProductionScreen\"\n                />\n              </th>\n              <td class=\"type\">\n                {{ $t(`productions.type.${entry.production_type || 'short'}`) }}\n              </td>\n              <td class=\"style\">\n                {{\n                  $t(\n                    `productions.style.${\n                      getProductionStyleLabel(entry.production_style) || '2d3d'\n                    }`\n                  )\n                }}\n              </td>\n              <td class=\"fps\">\n                {{ entry.fps }}\n              </td>\n              <td class=\"ratio\">\n                {{ entry.ratio }}\n              </td>\n              <td class=\"resolution\">\n                {{ entry.resolution }}\n              </td>\n              <row-actions-cell\n                :entry-id=\"entry.id\"\n                @edit-clicked=\"$emit('edit-clicked', entry)\"\n                :hide-delete=\"true\"\n              />\n            </tr>\n            <tr\n              class=\"datatable-row\"\n              :key=\"entry.id + '-stats'\"\n              v-if=\"Object.keys(productionStats).length > 0\"\n            >\n              <td :colspan=\"7\" class=\"datatable-row-stats\">\n                <production-stats :stats=\"productionStatsMap[entry.id] || {}\" />\n              </td>\n            </tr>\n          </template>\n        </tbody>\n        <tbody v-if=\"closedProductions.length > 0\">\n          <tr class=\"datatable-type-header\">\n            <th scope=\"rowgroup\" colspan=\"6\">\n              <span class=\"datatable-row-header\">\n                {{ $t('productions.status.closed') }}\n              </span>\n            </th>\n          </tr>\n          <tr\n            class=\"datatable-row\"\n            v-for=\"entry in closedProductions\"\n            :key=\"entry.id\"\n          >\n            <th class=\"name datatable-row-header\" scope=\"row\">\n              <production-name-cell\n                :with-avatar=\"true\"\n                :entry=\"entry\"\n                :last-production-screen=\"lastProductionScreen\"\n                :is-link=\"false\"\n              />\n            </th>\n            <td class=\"type\">\n              {{ $t(`productions.type.${entry.production_type || 'short'}`) }}\n            </td>\n            <td class=\"style\">\n              {{\n                $t(\n                  `productions.style.${\n                    getProductionStyleLabel(entry.production_style) || '2d3d'\n                  }`\n                )\n              }}\n            </td>\n            <td class=\"fps\">\n              {{ entry.fps }}\n            </td>\n            <td class=\"ratio\">\n              {{ entry.ratio }}\n            </td>\n            <td class=\"resolution\">\n              {{ entry.resolution }}\n            </td>\n            <row-actions-cell\n              :entry-id=\"entry.id\"\n              @edit-clicked=\"$emit('edit-clicked', entry)\"\n              @delete-clicked=\"$emit('delete-clicked', entry)\"\n            />\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <table-info :is-loading=\"isLoading\" :is-error=\"isError\"> </table-info>\n\n    <p class=\"has-text-centered nb-productions\">\n      {{ entries.length }} {{ $tc('productions.number', entries.length) }}\n    </p>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nimport ProductionNameCell from '@/components/cells/ProductionNameCell'\nimport ProductionStats from '@/components/pages/production/ProductionStats'\nimport RowActionsCell from '@/components/cells/RowActionsCell'\nimport TableInfo from '@/components/widgets/TableInfo'\n\nimport { PRODUCTION_STYLE_OPTIONS } from '@/lib/productions'\n\nexport default {\n  name: 'production-list',\n\n  props: {\n    entries: {\n      type: Array,\n      default: () => []\n    },\n    productionStats: {\n      type: Object,\n      default: () => {}\n    },\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    isLoading: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {}\n  },\n\n  components: {\n    ProductionNameCell,\n    ProductionStats,\n    RowActionsCell,\n    TableInfo\n  },\n\n  computed: {\n    ...mapGetters(['openProductions', 'lastProductionScreen']),\n\n    closedProductions() {\n      return this.entries.filter(p => p.project_status_name === 'Closed')\n    },\n\n    productionStatsMap() {\n      return this.productionStats\n    }\n  },\n\n  methods: {\n    ...mapActions([]),\n\n    // Convert a database status to a locale key.\n    getStatusLocale(originalStatus) {\n      const statusMap = {\n        Active: 'productions.status.open', // Shotgun compatibility\n        Open: 'productions.status.open',\n        Closed: 'productions.status.closed'\n      }\n      return statusMap[originalStatus]\n    },\n\n    getProductionStyleLabel(value) {\n      return PRODUCTION_STYLE_OPTIONS.find(style => style.value === value)\n        ?.label\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.name {\n  min-width: 250px;\n  width: 250px;\n}\n\n.type {\n  min-width: 120px;\n  width: 120px;\n}\n\n.style {\n  min-width: 150px;\n  width: 150px;\n}\n\n.status {\n  min-width: 100px;\n  width: 100px;\n}\n\n.actions {\n  min-width: 100px;\n}\n\n.fps,\n.ratio,\n.resolution {\n  width: 100px;\n  min-width: 100px;\n}\n\n.fps,\n.ratio {\n  text-align: right;\n}\n</style>\n","<template>\n  <div class=\"productions page fixed-page\">\n    <div class=\"flexrow page-header\">\n      <page-title :text=\"$t('productions.title')\" />\n      <div class=\"filler\"></div>\n      <button-simple\n        class=\"flexrow-item\"\n        :text=\"$t('productions.load_stats')\"\n        :is-loading=\"loading.stats\"\n        @click=\"reloadStats\"\n      />\n      <button-link\n        class=\"flexrow-item\"\n        :text=\"$t('productions.new_production')\"\n        icon=\"plus\"\n        :path=\"{ name: 'new-production' }\"\n      />\n    </div>\n\n    <production-list\n      :entries=\"productions\"\n      :production-stats=\"productionStats\"\n      :is-loading=\"isProductionsLoading\"\n      :is-error=\"isProductionsLoadingError\"\n      @delete-clicked=\"onDeleteClicked\"\n      @edit-clicked=\"onEditClicked\"\n    />\n\n    <edit-production-modal\n      :active=\"modals.isNewDisplayed\"\n      :is-loading=\"loading.edit\"\n      :is-error=\"errors.edit\"\n      :production-to-edit=\"productionToEdit\"\n      @cancel=\"modals.isNewDisplayed = false\"\n      @fileselected=\"onProductionPictureSelected\"\n      @confirm=\"confirmEditProduction\"\n    />\n\n    <hard-delete-modal\n      :active=\"modals.isDeleteDisplayed\"\n      :is-loading=\"loading.del\"\n      :is-error=\"errors.del\"\n      :text=\"deleteText()\"\n      :error-text=\"$t('productions.delete_error')\"\n      :lock-text=\"currentLockText\"\n      @cancel=\"modals.isDeleteDisplayed = false\"\n      @confirm=\"confirmDeleteProduction\"\n    />\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport ButtonLink from '@/components/widgets/ButtonLink'\nimport ButtonSimple from '@/components/widgets/ButtonSimple'\nimport EditProductionModal from '@/components/modals/EditProductionModal'\nimport HardDeleteModal from '@/components/modals/HardDeleteModal'\nimport ProductionList from '@/components/lists/ProductionList'\nimport PageTitle from '@/components/widgets/PageTitle'\n\nexport default {\n  name: 'productions',\n\n  components: {\n    ButtonLink,\n    ButtonSimple,\n    HardDeleteModal,\n    EditProductionModal,\n    PageTitle,\n    ProductionList\n  },\n\n  data() {\n    return {\n      errors: {\n        del: false,\n        edit: false\n      },\n      loading: {\n        del: false,\n        edit: false,\n        stats: false\n      },\n      modals: {\n        isNewDisplayed: false,\n        isDeleteDisplayed: false\n      },\n      productionStats: {},\n      productionToDelete: null,\n      productionToEdit: null,\n      choices: []\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'isProductionsLoading',\n      'isProductionsLoadingError',\n      'productionAvatarFormData',\n      'productions'\n    ]),\n\n    currentLockText() {\n      return this.productionToDelete?.name || ''\n    }\n  },\n\n  async created() {\n    await this.loadProductions()\n  },\n\n  methods: {\n    ...mapActions([\n      'deleteProduction',\n      'loadProductions',\n      'loadProductionStats',\n      'storeProductionPicture',\n      'uploadProductionAvatar'\n    ]),\n\n    // Actions\n\n    confirmEditProduction(form) {\n      let action = 'newProduction'\n      const isEditing = this.productionToEdit && this.productionToEdit.id\n      if (isEditing) {\n        action = 'editProduction'\n        form.id = this.productionToEdit.id\n      }\n\n      this.loading.edit = true\n      this.errors.edit = false\n      this.$store\n        .dispatch(action, form)\n        .then(() => {\n          if (isEditing && this.productionAvatarFormData) {\n            return this.uploadProductionAvatar(form.id)\n          } else {\n            return Promise.resolve()\n          }\n        })\n        .then(() => {\n          this.modals.isNewDisplayed = false\n          this.loading.edit = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.edit = false\n          this.errors.edit = true\n        })\n    },\n\n    confirmDeleteProduction() {\n      this.loading.del = true\n      this.errors.del = false\n      this.deleteProduction(this.productionToDelete)\n        .then(() => {\n          this.modals.isDeleteDisplayed = false\n          this.loading.del = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.del = true\n          this.loading.del = false\n        })\n    },\n\n    deleteText() {\n      const production = this.productionToDelete\n      if (production) {\n        return this.$t('productions.delete_text', { name: production.name })\n      } else {\n        return ''\n      }\n    },\n\n    // Events\n\n    onEditClicked(production) {\n      this.productionToEdit = production\n      this.modals.isNewDisplayed = true\n    },\n\n    onDeleteClicked(production) {\n      this.productionToDelete = production\n      this.modals.isDeleteDisplayed = true\n    },\n\n    onNewClicked(production) {\n      this.productionToEdit = {}\n      this.modals.isNewDisplayed = true\n    },\n\n    onProductionPictureSelected(formData) {\n      this.storeProductionPicture(formData)\n    },\n\n    async reloadStats() {\n      this.loading.stats = true\n      this.productionStats = await this.loadProductionStats()\n      this.loading.stats = false\n    }\n  },\n\n  watch: {},\n\n  metaInfo() {\n    return {\n      title: `${this.$t('productions.title')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped></style>\n"],"names":["_sfc_main","DownloadIcon","EditIcon","PlusIcon","RotateCcwIcon","TrashIcon","UploadIcon","formatListMixin","TaskTypeName","mapGetters","_a","a","b","entityPriority","taskTypeId","taskTypeStatsMap","taskTypeStat","statsByStatus","statuses","ProductionNameCell","ProductionStats","RowActionsCell","TableInfo","p","mapActions","originalStatus","value","PRODUCTION_STYLE_OPTIONS","style","ButtonLink","ButtonSimple","HardDeleteModal","EditProductionModal","PageTitle","ProductionList","form","action","isEditing","err","production","formData"],"mappings":"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"}