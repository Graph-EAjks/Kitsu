{"version":3,"file":"Task-fcb5c144.js","sources":["../../src/components/widgets/SubscribeButton.vue","../../src/components/pages/Task.vue"],"sourcesContent":["<template>\n  <button class=\"button\" :title=\"buttonTitle\" @click=\"$emit('click')\">\n    <eye-icon class=\"icon is-small only-icon\" v-if=\"subscribed\" />\n    <eye-off-icon class=\"icon is-small only-icon\" v-else />\n  </button>\n</template>\n\n<script>\nimport { EyeIcon, EyeOffIcon } from 'vue-feather-icons'\n\nexport default {\n  name: 'subscribe-button',\n  components: {\n    EyeIcon,\n    EyeOffIcon\n  },\n  props: {\n    subscribed: {\n      default: false,\n      type: Boolean\n    }\n  },\n\n  computed: {\n    buttonTitle() {\n      if (!this.subscribed) {\n        return this.$t('tasks.subscribe_notifications')\n      } else {\n        return this.$t('tasks.unsubscribe_notifications')\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.button .icon.is-small.only-icon {\n  margin-right: 0;\n}\n</style>\n","<template>\n  <div class=\"fixed-page columns xyz-in\" xyz=\"fade\">\n    <div class=\"page column main-column\">\n      <div class=\"page-header pa1 mb0\" xyz=\"fade\">\n        <div class=\"flexrow header-title\" v-if=\"task\">\n          <task-type-name\n            class=\"flexrow-item task-type block\"\n            :task-type=\"taskType\"\n            :production-id=\"currentProduction.id\"\n            v-if=\"taskType\"\n          />\n\n          <span class=\"flexrow-item ml2\">\n            <entity-thumbnail\n              class=\"entity-thumbnail\"\n              :entity=\"currentEntity\"\n              :empty-width=\"100\"\n              :empty-height=\"60\"\n              :width=\"100\"\n              :with-link=\"true\"\n            />\n          </span>\n\n          <h1 class=\"title flexrow-item\">\n            <router-link :to=\"taskEntityPath\">\n              {{ task ? title : 'Loading...' }}\n            </router-link>\n          </h1>\n\n          <div class=\"flexrow-item flexrow block\">\n            <span class=\"flexrow-item\">\n              {{ $t('tasks.current_status') }}\n            </span>\n            <validation-tag\n              class=\"is-medium flexrow-item\"\n              :task=\"task\"\n              :is-static=\"true\"\n              v-if=\"task\"\n            />\n            <span\n              class=\"flexrow-item\"\n              v-if=\"task.assignees.length > 0 && !isCurrentUserClient\"\n            >\n              {{ $t('tasks.fields.assignees') }}:\n            </span>\n            <span\n              class=\"flexrow-item avatar-wrapper\"\n              :key=\"personId\"\n              v-for=\"personId in task.assignees\"\n              v-if=\"!isCurrentUserClient\"\n            >\n              <people-avatar\n                class=\"flexrow-item\"\n                :key=\"personId\"\n                :person=\"personMap.get(personId)\"\n                :size=\"30\"\n                :font-size=\"16\"\n              />\n            </span>\n            <subscribe-button\n              class=\"flexrow-item action-button\"\n              :subscribed=\"isAssigned || task.is_subscribed\"\n              @click=\"toggleSubscribe\"\n              v-if=\"!isAssigned\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div class=\"task-columns\" ref=\"task-columns\">\n        <div class=\"task-column preview-column\">\n          <div class=\"preview-column-content block\">\n            <div class=\"flexrow preview-header\">\n              <div class=\"flexrow-item\" v-if=\"isPreviews\">\n                <combobox-styled\n                  class=\"preview-combo flexrow-item\"\n                  :options=\"previewOptions\"\n                  is-preview\n                  v-model=\"selectedPreviewId\"\n                />\n              </div>\n              <div v-else>\n                <em>\n                  {{ $t('tasks.no_preview') }}\n                </em>\n              </div>\n\n              <div class=\"set-main-preview flexrow-item flexrow pull-right\">\n                <button\n                  :class=\"{\n                    button: true,\n                    'flexrow-item': true,\n                    'is-loading': loading.setPreview\n                  }\"\n                  @click=\"setPreview\"\n                  v-if=\"isCurrentUserManager\"\n                >\n                  <image-icon class=\"icon\" />\n                  <span class=\"text\">\n                    {{ $t('tasks.set_preview') }}\n                  </span>\n                </button>\n                <span class=\"error flexrow-item\" v-if=\"errors.setPreview\">\n                  {{ $t('tasks.set_preview_error') }}\n                </span>\n              </div>\n            </div>\n\n            <div class=\"preview-area mt1\">\n              <div v-if=\"isPreviews\">\n                <preview-player\n                  ref=\"preview-player\"\n                  :extra-wide=\"true\"\n                  :last-preview-files=\"taskPreviews || []\"\n                  :previews=\"currentPreview.previews\"\n                  :read-only=\"isPreviewPlayerReadOnly\"\n                  :task=\"task\"\n                  :task-type-map=\"taskTypeMap\"\n                  @add-extra-preview=\"onAddExtraPreviewClicked\"\n                  @annotation-changed=\"onAnnotationChanged\"\n                  @change-current-preview=\"changeCurrentPreview\"\n                  @remove-extra-preview=\"onRemoveExtraPreviewClicked\"\n                  @previews-order-changed=\"onPreviewsOrderChanged\"\n                  @time-updated=\"onTimeUpdated\"\n                  v-if=\"currentPreview\"\n                />\n              </div>\n            </div>\n          </div>\n          <div class=\"flexrow-item block mt1 mr0 info-block\">\n            <page-subtitle :text=\"$t('main.info')\" />\n            <div class=\"table-body mt1\">\n              <table class=\"datatable no-header\" v-if=\"task\">\n                <tbody class=\"table-body\">\n                  <tr class=\"datatable-row\">\n                    <td class=\"field-label\">\n                      {{ $t('tasks.fields.estimation') }}\n                    </td>\n                    <td>{{ task.estimation }}</td>\n                  </tr>\n                  <tr class=\"datatable-row\">\n                    <td class=\"field-label\">\n                      {{ $t('tasks.fields.duration') }}\n                    </td>\n                    <td>{{ formatDuration(task.duration) }}</td>\n                  </tr>\n                  <tr class=\"datatable-row\">\n                    <td class=\"field-label\">\n                      {{ $t('tasks.fields.retake_count') }}\n                    </td>\n                    <td>{{ task.retake_count }}</td>\n                  </tr>\n                  <tr class=\"datatable-row\">\n                    <td class=\"field-label\">\n                      {{ $t('tasks.fields.start_date') }}\n                    </td>\n                    <td>{{ formatSimpleDate(task.start_date) }}</td>\n                  </tr>\n                  <tr class=\"datatable-row\">\n                    <td class=\"field-label\">\n                      {{ $t('tasks.fields.due_date') }}\n                    </td>\n                    <td>{{ formatSimpleDate(task.due_date) }}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n          <div class=\"pa2\"></div>\n        </div>\n\n        <div class=\"task-column comments-column\">\n          <div v-if=\"task\">\n            <div>\n              <add-comment\n                ref=\"add-comment\"\n                :is-error=\"errors.addComment\"\n                :is-max-retakes-error=\"errors.addCommentMaxRetakes\"\n                :is-loading=\"loading.addComment\"\n                :is-movie=\"isMovie\"\n                :user=\"user\"\n                :team=\"currentTeam\"\n                :task=\"task\"\n                :task-status=\"taskStatusForCurrentUser\"\n                :preview-forms=\"previewForms\"\n                :fps=\"parseInt(currentFps)\"\n                :time=\"currentTime\"\n                :revision=\"currentRevision\"\n                @add-comment=\"addComment\"\n                @add-preview=\"onAddPreviewClicked\"\n                @duplicate-comment=\"onDuplicateComment\"\n                @file-drop=\"selectFile\"\n                @clear-files=\"clearPreviewFiles\"\n                @annotation-snapshots-requested=\"extractAnnotationSnapshots\"\n                @remove-preview=\"onPreviewFormRemoved\"\n                v-if=\"isCommentingAllowed\"\n              />\n              <div\n                class=\"comments\"\n                v-if=\"taskComments && taskComments.length > 0\"\n              >\n                <XyzTransitionGroup\n                  appear\n                  v-xyz=\"{ fade: false, up: false, 'flip-up': false }\"\n                >\n                  <comment\n                    :key=\"comment.id\"\n                    :comment=\"comment\"\n                    :team=\"currentTeam\"\n                    :task=\"task\"\n                    :highlighted=\"false\"\n                    :current-user=\"user\"\n                    :editable=\"\n                      (comment.person && user.id === comment.person.id) ||\n                      isCurrentUserAdmin\n                    \"\n                    :is-first=\"index === 0\"\n                    :is-last=\"index === pinnedCount\"\n                    :is-change=\"isStatusChange(index)\"\n                    @ack-comment=\"ackComment\"\n                    @pin-comment=\"onPinComment\"\n                    @edit-comment=\"onEditComment\"\n                    @delete-comment=\"onDeleteComment\"\n                    @checklist-updated=\"saveComment\"\n                    @time-code-clicked=\"timeCodeClicked\"\n                    v-for=\"(comment, index) in taskComments\"\n                  />\n                </XyzTransitionGroup>\n              </div>\n              <div class=\"no-comment\" v-else>\n                <em>\n                  {{ $t('tasks.no_comment') }}\n                </em>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"has-text-centered\" v-else>\n            <spinner />\n          </div>\n        </div>\n      </div>\n\n      <add-preview-modal\n        ref=\"add-preview-modal\"\n        :active=\"modals.addPreview\"\n        :is-loading=\"loading.addPreview\"\n        :is-error=\"errors.addPreview\"\n        :form-data=\"addPreviewFormData\"\n        :title=\"\n          task\n            ? `${task.entity_name} / ${taskTypeMap.get(task.task_type_id).name}`\n            : ''\n        \"\n        @cancel=\"closeAddPreviewModal\"\n        @confirm=\"confirmAddPreviewModal\"\n      />\n\n      <add-preview-modal\n        ref=\"add-extra-preview-modal\"\n        :active=\"modals.addExtraPreview\"\n        :is-loading=\"loading.addExtraPreview\"\n        :is-error=\"errors.addExtraPreview\"\n        :form-data=\"addExtraPreviewFormData\"\n        :title=\"\n          task\n            ? `${task.entity_name} / ${taskTypeMap.get(task.task_type_id).name}`\n            : ''\n        \"\n        @cancel=\"hideExtraPreviewModal\"\n        @confirm=\"createExtraPreview\"\n      />\n\n      <edit-comment-modal\n        :active=\"modals.editComment\"\n        :is-loading=\"loading.editComment\"\n        :is-error=\"errors.editComment\"\n        :comment-to-edit=\"commentToEdit\"\n        :team=\"currentTeam\"\n        @confirm=\"confirmEditTaskComment\"\n        @cancel=\"onCancelEditComment\"\n      />\n\n      <delete-modal\n        :active=\"modals.deleteComment\"\n        :is-loading=\"loading.deleteComment\"\n        :is-error=\"errors.deleteComment\"\n        :text=\"$t('tasks.delete_comment')\"\n        :error-text=\"$t('tasks.delete_comment_error')\"\n        @confirm=\"confirmDeleteTaskComment\"\n        @cancel=\"onCancelDeleteComment\"\n      />\n\n      <delete-modal\n        :active=\"modals.deleteExtraPreview\"\n        :is-loading=\"loading.deleteExtraPreview\"\n        :is-error=\"errors.deleteExtraPreview\"\n        :text=\"$t('tasks.delete_preview')\"\n        :error-text=\"$t('tasks.delete_preview_error')\"\n        @cancel=\"hideRemoveExtraPreviewModal\"\n        @confirm=\"confirmDeleteTaskPreview\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\nimport { ImageIcon } from 'vue-feather-icons'\n\nimport { getTaskEntityPath } from '@/lib/path'\nimport drafts from '@/lib/drafts'\nimport { formatListMixin } from '@/components/mixins/format'\nimport { taskMixin } from '@/components/mixins/task'\n\nimport AddComment from '@/components/widgets/AddComment'\nimport AddPreviewModal from '@/components/modals/AddPreviewModal'\nimport Comment from '@/components/widgets/Comment'\nimport ComboboxStyled from '@/components/widgets/ComboboxStyled.vue'\nimport DeleteModal from '@/components/modals/DeleteModal'\nimport EditCommentModal from '@/components/modals/EditCommentModal'\nimport EntityThumbnail from '@/components/widgets/EntityThumbnail'\nimport PageSubtitle from '@/components/widgets/PageSubtitle'\nimport PeopleAvatar from '@/components/widgets/PeopleAvatar'\nimport Spinner from '@/components/widgets/Spinner'\nimport SubscribeButton from '@/components/widgets/SubscribeButton'\nimport TaskTypeName from '@/components/widgets/TaskTypeName'\nimport ValidationTag from '@/components/widgets/ValidationTag'\nimport PreviewPlayer from '@/components/previews/PreviewPlayer'\n\nexport default {\n  name: 'task',\n  mixins: [formatListMixin, taskMixin],\n  components: {\n    AddComment,\n    AddPreviewModal,\n    ComboboxStyled,\n    Comment,\n    DeleteModal,\n    EditCommentModal,\n    EntityThumbnail,\n    ImageIcon,\n    PageSubtitle,\n    PeopleAvatar,\n    PreviewPlayer,\n    Spinner,\n    SubscribeButton,\n    TaskTypeName,\n    ValidationTag\n  },\n\n  data() {\n    return {\n      previewForms: [],\n      currentTime: 0,\n      selectedTab: 'validation',\n      taskLoading: {\n        isLoading: true,\n        isError: false\n      },\n      modals: {\n        addPreview: false,\n        addExtraPreview: false,\n        deleteExtraPreview: false,\n        deleteTask: false,\n        deleteComment: false,\n        editComment: false\n      },\n      loading: {\n        addComment: false,\n        addPreview: false,\n        addExtraPreview: false,\n        setPreview: false,\n        deleteTask: false,\n        deleteComment: false,\n        editComment: false\n      },\n      errors: {\n        addComment: false,\n        addCommentMaxRetakes: false,\n        addPreview: false,\n        addExtraPreview: false,\n        setPreview: false,\n        deleteTask: false,\n        deleteComment: false,\n        editComment: false\n      },\n      addPreviewFormData: null,\n      addExtraPreviewFormData: null,\n      task: null,\n      taskComments: [],\n      taskPreviews: [],\n      commentToEdit: null,\n      selectedPreviewId: null\n    }\n  },\n\n  created() {\n    this.clearSelectedTasks()\n  },\n\n  mounted() {\n    this.loadTaskData().then(() => {\n      this.reset()\n    })\n    this.$nextTick(() => {\n      if (this.$refs['task-columns']) {\n        this.$refs['task-columns'].scrollTop = 100\n        window.scrollTo(0, 0)\n      }\n    })\n  },\n\n  beforeDestroy() {\n    if (this.$refs['add-comment']) {\n      const task = this.getTask()\n      const lastComment = `${this.$refs['add-comment'].text}`\n      const previousDraft = drafts.getTaskDraft(task.id)\n      if (lastComment !== previousDraft && !this.$options.drafted) {\n        drafts.setTaskDraft(task.id, lastComment)\n      }\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'currentEpisode',\n      'currentProduction',\n      'displayedShots',\n      'displayedAssets',\n      'getTaskComments',\n      'getTaskPreviews',\n      'getTaskComment',\n      'isCurrentUserAdmin',\n      'isCurrentUserSupervisor',\n      'isCurrentUserClient',\n      'isCurrentUserManager',\n      'isSingleEpisode',\n      'isTVShow',\n      'personMap',\n      'productionMap',\n      'route',\n      'taskEntityPreviews',\n      'taskStatus',\n      'taskStatusForCurrentUser',\n      'taskMap',\n      'taskTypeMap',\n      'user'\n    ]),\n\n    currentEntity() {\n      return this.task && this.task.entity\n    },\n\n    previewOptions() {\n      return this.taskPreviews.map(preview => {\n        return {\n          label: `v${preview.revision}`,\n          value: preview.id\n        }\n      })\n    },\n\n    isPreviewButtonVisible() {\n      return (\n        this.isCurrentUserManager &&\n        this.task &&\n        this.task.entity &&\n        this.task.entity.preview_file_id !== this.currentPreviewId &&\n        ['png', 'mp4'].includes(this.extension)\n      )\n    },\n\n    isMovie() {\n      return this.extension === 'mp4'\n    },\n\n    isPreviewPlayerReadOnly() {\n      if (this.task) {\n        if (this.isCurrentUserManager || this.isCurrentUserClient) {\n          return false\n        } else if (this.isCurrentUserSupervisor) {\n          if (this.user.departments.length === 0) {\n            return false\n          } else {\n            const taskType = this.taskTypeMap.get(this.task.task_type_id)\n            return !(\n              taskType.department_id &&\n              this.user.departments.includes(taskType.department_id)\n            )\n          }\n        }\n      }\n      return true\n    },\n\n    extension() {\n      return this.currentPreview ? this.currentPreview.extension : ''\n    },\n\n    currentPreviewId() {\n      return this.currentPreview ? this.currentPreview.id : ''\n    },\n\n    currentPreview() {\n      if (this.isPreviews) {\n        let currentPreview = this.taskPreviews[0]\n        const previewId = this.route.params.preview_id\n        if (this.selectedPreviewId) {\n          currentPreview = this.taskPreviews.find(preview => {\n            return preview.id === previewId\n          })\n        }\n        return currentPreview\n      } else {\n        return null\n      }\n    },\n\n    currentFps() {\n      return this.productionMap.get(this.task.project_id).fps || '25'\n    },\n\n    currentRevision() {\n      return this.currentPreview ? this.currentPreview.revision : 0\n    },\n\n    isCommentingAllowed() {\n      return (\n        this.isCurrentUserManager ||\n        this.isCurrentUserClient ||\n        this.task.assignees.find(personId => personId === this.user.id)\n      )\n    },\n\n    taskTypeBorder() {\n      let border = 'transparent'\n      if (this.task) border = this.task.task_type_color\n      return {\n        'border-left': `4px solid ${border}`\n      }\n    },\n\n    deleteTaskPath() {\n      return this.taskPath(this.task, 'task-delete')\n    },\n\n    isPreviews() {\n      return this.taskPreviews && this.taskPreviews.length > 0\n    },\n\n    taskEntityPath() {\n      if (this.task) {\n        const episodeId = this.currentEpisode\n          ? this.currentEpisode.id\n          : this.$route.params.episode_id\n        return getTaskEntityPath(this.task, episodeId)\n      } else {\n        return {\n          name: 'open-productions'\n        }\n      }\n    },\n\n    entityList() {\n      const entity = this.displayedShots.find(entity => {\n        return entity.id === this.task.entity_id\n      })\n      if (entity) {\n        return this.displayedShots\n      } else {\n        return this.displayedAssets\n      }\n    },\n\n    previousEntity() {\n      if (this.task) {\n        const taskTypeId = this.task.task_type_id\n        const entityIndex = this.entityList.findIndex(entity => {\n          return entity.id === this.task.entity_id\n        })\n        let firstTraversal = false\n\n        let previousEntityIndex = entityIndex - 1\n        if (previousEntityIndex < 0) {\n          previousEntityIndex = this.entityList.length - 1\n        }\n\n        let taskId = null\n        while (!taskId) {\n          if (this.entityList[previousEntityIndex]) {\n            const entity = this.entityList[previousEntityIndex]\n            taskId = entity.tasks.find(ctaskId => {\n              const task = this.taskMap.get(taskId)\n              if (task) {\n                return task.task_type_id === taskTypeId\n              } else {\n                return false\n              }\n            })\n          } else {\n            taskId = this.task.id\n          }\n\n          if (!taskId) {\n            previousEntityIndex--\n            if (previousEntityIndex < 0) {\n              previousEntityIndex = this.entityList.length\n              if (firstTraversal) {\n                return null\n              }\n              firstTraversal = true\n            }\n          }\n        }\n\n        return this.taskPath({ id: taskId })\n      } else {\n        return {\n          name: 'open-productions'\n        }\n      }\n    },\n\n    nextEntity() {\n      if (this.task) {\n        const taskTypeId = this.task.task_type_id\n        let firstTraversal = false\n        const entityIndex = this.entityList.findIndex(entity => {\n          return entity.id === this.task.entity_id\n        })\n\n        let nextEntityIndex = entityIndex + 1\n        if (nextEntityIndex >= this.entityList.length) {\n          nextEntityIndex = 0\n        }\n\n        let taskId = null\n        while (!taskId) {\n          if (this.entityList[nextEntityIndex]) {\n            const entity = this.entityList[nextEntityIndex]\n            taskId = entity.tasks.find(ctaskId => {\n              const task = this.taskMap.get(taskId)\n              if (task) {\n                return task.task_type_id === taskTypeId\n              } else {\n                return false\n              }\n            })\n          } else {\n            taskId = this.task.id\n          }\n\n          if (!taskId) {\n            nextEntityIndex++\n            if (nextEntityIndex >= this.entityList.length) {\n              nextEntityIndex = 0\n\n              if (firstTraversal) {\n                return null\n              }\n              firstTraversal = true\n            }\n          }\n        }\n\n        return this.taskPath({ id: taskId })\n      } else {\n        return {\n          name: 'open-productions'\n        }\n      }\n    },\n\n    title() {\n      if (this.task) {\n        const type = this.task.entity_type_name\n        let entityName = this.task.full_entity_name || this.task.entity_name\n        if (this.isTVShow && type === 'Shot') {\n          entityName = entityName.split('/').splice(1).join('/')\n        }\n        if (this.isTVShow && type === 'Episode') {\n          entityName = this.task.entity_name\n        }\n        return `${entityName}`\n      } else {\n        return 'Loading...'\n      }\n    },\n\n    windowTitle() {\n      if (this.task) {\n        const taskTypeName = this.task.task_type_name\n        return `${this.title} / ${taskTypeName}`\n      } else {\n        return 'Loading...'\n      }\n    },\n\n    deleteText() {\n      if (this.task) {\n        const taskType = this.taskTypeMap.get(this.task.task_type_id)\n        return this.$t('main.delete_text', {\n          name: `${this.task.entity_name} / ${taskType.name}`\n        })\n      } else {\n        return ''\n      }\n    },\n\n    isAssigned() {\n      if (this.task) {\n        return this.task.assignees.some(assigneeId => {\n          return assigneeId === this.user.id\n        })\n      } else {\n        return false\n      }\n    },\n\n    taskType() {\n      if (this.task) {\n        return this.taskTypeMap.get(this.task.task_type_id)\n      } else {\n        return null\n      }\n    },\n\n    currentTeam() {\n      return this.currentProduction.team.map(id => this.personMap.get(id))\n    },\n\n    pinnedCount() {\n      return this.taskComments.filter(c => c.pinned).length\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'addAttachmentToComment',\n      'ackComment',\n      'addCommentPreview',\n      'addCommentExtraPreview',\n      'commentTask',\n      'commentTaskWithPreview',\n      'changeCommentPreview',\n      'clearSelectedTasks',\n      'deleteAttachment',\n      'deleteTask',\n      'deleteTaskPreview',\n      'deleteTaskComment',\n      'editTaskComment',\n      'loadEpisodes',\n      'loadTask',\n      'loadShots',\n      'loadAssets',\n      'loadPreviewFileFormData',\n      'loadTaskComments',\n      'refreshComment',\n      'refreshPreview',\n      'pinComment',\n      'subscribeToTask',\n      'setCurrentEpisode',\n      'unsubscribeFromTask',\n      'updatePreviewAnnotation'\n    ]),\n\n    loadTaskData() {\n      const task = this.getCurrentTask()\n      if (!task) {\n        this.taskLoading = { isLoading: true, isError: false }\n        return this.loadTask({ taskId: this.route.params.task_id }).then(\n          task => {\n            let loadingFunction = callback => {\n              this.loadAssets().then(callback)\n            }\n\n            if (task.entity_type_name === 'Shot') {\n              loadingFunction = callback => {\n                this.loadEpisodes()\n                  .then(() => {\n                    if (this.isTVShow) {\n                      this.setCurrentEpisode(task.episode.id)\n                    }\n                    this.loadShots(callback)\n                  })\n                  .catch(callback)\n              }\n            }\n            loadingFunction(() => {\n              this.task = task\n              return this.loadTaskComments({\n                taskId: task.id,\n                entityId: task.entity_id\n              })\n                .then(() => {\n                  this.reset()\n                  this.taskLoading = { isLoading: false, isError: false }\n                  return Promise.resolve()\n                })\n                .catch(err => {\n                  console.error(err)\n                  this.taskLoading = { isLoading: false, isError: true }\n                })\n            })\n          }\n        )\n      } else {\n        const taskId = this.route.params.task_id\n        this.task = task\n        return this.loadTaskComments({\n          taskId,\n          entityId: task.entity_id\n        })\n          .then(() => {\n            this.reset()\n            return Promise.resolve()\n          })\n          .catch(err => {\n            console.error(err)\n            this.taskLoading.isError = true\n          })\n      }\n    },\n\n    getCurrentTask() {\n      return this.taskMap.get(this.route.params.task_id)\n    },\n\n    getCurrentComment() {\n      if (this.route.params.comment_id) {\n        return this.getTaskComment(\n          this.route.params.task_id,\n          this.route.params.comment_id\n        )\n      }\n    },\n\n    getCurrentTaskComments() {\n      return this.getTaskComments(this.route.params.task_id)\n    },\n\n    getCurrentTaskPreviews() {\n      return this.getTaskPreviews(this.route.params.task_id)\n    },\n\n    addComment(\n      comment,\n      attachment,\n      checklist,\n      taskStatusId,\n      revision = undefined\n    ) {\n      const params = {\n        taskId: this.task.id,\n        taskStatusId: taskStatusId,\n        comment,\n        revision,\n        checklist,\n        attachment\n      }\n      let action = 'commentTask'\n      if (this.previewForms.length > 0) action = 'commentTaskWithPreview'\n      this.loading.addComment = true\n      this.errors.addComment = false\n      this.errors.addCommentMaxRetakes = false\n      this.$store\n        .dispatch(action, params)\n        .then(() => {\n          drafts.clearTaskDraft(this.task.id)\n          this.reset()\n          this.loading.addComment = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.addComment = true\n          this.loading.addComment = false\n          const isRetakeError =\n            err.response &&\n            err.response.body.message &&\n            err.response.body.message.indexOf('retake') > 0\n          this.errors.addComment = !isRetakeError\n          this.errors.addCommentMaxRetakes = isRetakeError\n        })\n    },\n\n    reset() {\n      this.resetModals()\n      this.resetPreview(false)\n      this.clearPreviewFiles()\n      this.taskComments = this.getCurrentTaskComments()\n      this.taskPreviews = this.getCurrentTaskPreviews()\n      this.task = this.getCurrentTask()\n      this.resetDraft()\n      setTimeout(() => {\n        if (this.$route.params.preview_id) {\n          this.selectedPreviewId = this.$route.params.preview_id\n        }\n      }, 200)\n    },\n\n    selectFile(forms) {\n      this.previewForms = this.previewForms.concat(forms)\n      this.loadPreviewFileFormData(this.previewForms)\n    },\n\n    clearPreviewFiles() {\n      this.previewForms = []\n      this.loadPreviewFileFormData(this.previewForms)\n      this.$store.commit('CLEAR_UPLOAD_PROGRESS')\n    },\n\n    isHighlighted(comment) {\n      return comment.preview && comment.preview.id === this.currentPreviewId\n    },\n\n    createExtraPreview(forms) {\n      this.selectFile(forms)\n\n      const previews = this.taskPreviews\n      const preview = previews.length > 0 ? previews[0] : null\n      this.errors.addExtraPreview = false\n      this.loading.addExtraPreview = true\n      const comment = this.getCurrentTaskComments().find(comment => {\n        return comment.previews.findIndex(p => p.id === preview.id) >= 0\n      })\n      this.addCommentExtraPreview({\n        taskId: this.task.id,\n        previewId: this.currentPreview.id,\n        commentId: comment.id\n      })\n        .then(() => {\n          this.loading.addExtraPreview = false\n          this.modals.addExtraPreview = false\n          this.$refs['add-extra-preview-modal'].reset()\n          this.clearPreviewFiles()\n          setTimeout(() => {\n            this.$refs['preview-player'].displayLast()\n          }, 0)\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.addExtraPreview = true\n          this.loading.addExtraPreview = false\n        })\n    },\n\n    resetPreview(changeRoute = true) {\n      const previews = this.taskPreviews || []\n      const preview = previews.length > 0 ? previews[0] : null\n      this.taskComments = this.getCurrentTaskComments()\n      this.taskPreviews = this.getCurrentTaskPreviews()\n      if (preview && changeRoute) {\n        this.$router.push(this.previewPath(preview.id))\n      }\n    },\n\n    setPreview() {\n      this.loading.setPreview = true\n      this.errors.setPreview = false\n      const previewPlayer = this.$refs['preview-player']\n      const previewId = previewPlayer.currentPreview.id\n      this.$store\n        .dispatch('setPreview', {\n          taskId: this.task.id,\n          entityId: this.task.entity.id,\n          previewId\n        })\n        .then(() => {\n          this.loading.setPreview = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.errors.setPreview = true\n        })\n    },\n\n    saveComment(comment, checklist) {\n      this.editTaskComment({\n        taskId: this.task.id,\n        comment,\n        checklist\n      })\n    },\n\n    confirmDeleteTaskComment() {\n      this.loading.deleteComment = true\n      this.errors.deleteComment = false\n      const commentId = this.commentToEdit.id\n\n      this.deleteTaskComment({\n        taskId: this.task.id,\n        commentId\n      })\n        .then(() => {\n          this.loading.deleteComment = false\n          this.reset()\n          if (this.isPreviews) this.resetPreview()\n          this.modals.deleteComment = false\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.deleteComment = false\n          this.errors.deleteComment = true\n        })\n    },\n\n    confirmDeleteTaskPreview() {\n      this.loading.deleteExtraPreview = true\n      this.errors.deleteExtraPreview = false\n      const previewId = this.currentPreviewId\n      const comment = this.getCurrentTaskComments().find(comment => {\n        return comment.previews.findIndex(p => p.id === previewId) >= 0\n      })\n\n      this.$refs['preview-player'].displayFirst()\n      this.deleteTaskPreview({\n        taskId: this.task.id,\n        commentId: comment.id,\n        previewId: this.currentExtraPreviewId\n      })\n        .then(() => {\n          this.loading.deleteExtraPreview = false\n          this.resetPreview()\n          this.hideRemoveExtraPreviewModal()\n        })\n        .catch(err => {\n          console.error(err)\n          this.loading.deleteExtraPreview = false\n          this.errors.deleteExtraPreview = true\n        })\n    },\n\n    onPreviewAdded(eventData) {\n      const taskId = eventData.task_id\n      const commentId = eventData.comment_id\n      const previewId = eventData.preview_file_id\n      const revision = eventData.revision\n      const extension = eventData.extension\n      const comment = this.$store.getters.getTaskComment(taskId, commentId)\n\n      if (\n        this.task &&\n        comment &&\n        (comment.previews.length === 0 ||\n          comment.previews[0].id !== previewId) &&\n        taskId === this.task.id\n      ) {\n        this.$store.commit('ADD_PREVIEW_END', {\n          preview: {\n            id: previewId,\n            revision,\n            extension: extension\n          },\n          taskId,\n          commentId,\n          comment\n        })\n        this.resetPreview()\n      }\n    },\n\n    toggleSubscribe() {\n      if (this.task && !this.isAssigned) {\n        if (this.task.is_subscribed) {\n          this.unsubscribeFromTask(this.task.id)\n        } else {\n          this.subscribeToTask(this.task.id)\n        }\n      }\n    },\n\n    taskPath(task, section = 'task') {\n      if (!task) {\n        task = this.task\n      } else {\n        task.project_id = this.task.project_id\n        task.episode_id = this.task.episode_id\n      }\n\n      let route = { name: 'open-productions' }\n      if (task) {\n        route = {\n          name: section,\n          params: {\n            production_id: task.project_id,\n            task_id: task.id\n          }\n        }\n\n        if (this.isTVShow && this.currentEpisode) {\n          route.name = `episode-${section}`\n          route.params.episode_id = task.episode_id || this.currentEpisode.id\n        }\n      }\n      return route\n    },\n\n    previewPath(previewId) {\n      const route = this.taskPath(this.task, 'task-preview')\n      if (this.isTVShow) {\n        const taskType = this.taskTypeMap.get(this.task.task_type_id)\n        route.name = 'episode-task-preview'\n        if (taskType.for_entity === 'Episode') {\n          route.name = 'episode-episode-task-preview'\n        }\n      }\n      if (route.params) {\n        route.params.preview_id = previewId\n      }\n      return route\n    },\n\n    onAnnotationChanged({ preview, additions, deletions, updates }) {\n      const taskId = this.task.id\n      this.updatePreviewAnnotation({\n        taskId,\n        preview,\n        additions,\n        deletions,\n        updates\n      })\n    },\n\n    onAddExtraPreviewClicked() {\n      this.clearPreviewFiles()\n      this.modals.addExtraPreview = true\n    },\n\n    onRemoveExtraPreviewClicked(preview) {\n      this.showRemoveExtraPreviewModal(preview)\n    },\n\n    hideExtraPreviewModal() {\n      this.modals.addExtraPreview = false\n    },\n\n    showRemoveExtraPreviewModal(preview) {\n      this.currentExtraPreviewId = preview.id\n      this.modals.deleteExtraPreview = true\n    },\n\n    hideRemoveExtraPreviewModal() {\n      this.modals.deleteExtraPreview = false\n    },\n\n    onAddPreviewClicked() {\n      this.modals.addPreview = true\n    },\n\n    closeAddPreviewModal() {\n      this.modals.addPreview = false\n    },\n\n    confirmAddPreviewModal(forms) {\n      this.selectFile(forms)\n      this.closeAddPreviewModal()\n    },\n\n    onDuplicateComment(comment) {\n      this.$refs['add-comment'].setValue(comment)\n    },\n\n    onPinComment(comment) {\n      this.pinComment(comment)\n    },\n\n    onEditComment(comment) {\n      this.commentToEdit = comment\n      this.modals.editComment = true\n    },\n\n    onDeleteComment(comment) {\n      this.commentToEdit = comment\n      this.modals.deleteComment = true\n    },\n\n    onCancelEditComment(comment) {\n      this.modals.editComment = false\n    },\n\n    onCancelDeleteComment(comment) {\n      this.modals.deleteComment = false\n    },\n\n    onTimeUpdated(time) {\n      this.currentTime = time\n    },\n\n    onPreviewFormRemoved(previewForm) {\n      this.previewForms = this.previewForms.filter(f => f !== previewForm)\n      this.loadPreviewFileFormData(this.previewForms)\n    },\n\n    changeCurrentPreview(preview) {\n      this.$router.push(this.previewPath(preview.id))\n    },\n\n    onRemoteAcknowledge(eventData, type) {\n      if (this.task) {\n        const comment = this.taskComments.find(\n          c => c.id === eventData.comment_id\n        )\n        const user = this.personMap.get(eventData.person_id)\n        if (comment && user) {\n          if (this.user.id === user.id) {\n            if (\n              (type === 'ack' && !comment.acknowledgements.includes(user.id)) ||\n              (type === 'unack' && comment.acknowledgements.includes(user.id))\n            ) {\n              this.$store.commit('ACK_COMMENT', { comment, user })\n            }\n          } else {\n            this.$store.commit('ACK_COMMENT', { comment, user })\n          }\n        }\n      }\n    },\n\n    isStatusChange(index) {\n      const comments = this.taskComments\n      const comment = comments[index]\n      return (\n        index === comments.length - 1 ||\n        comment.task_status_id !== comments[index + 1].task_status_id\n      )\n    },\n\n    timeCodeClicked({\n      versionRevision,\n      minutes,\n      seconds,\n      milliseconds,\n      frame\n    }) {\n      this.changeCurrentPreview(\n        this.taskPreviews.find(p => p.revision === parseInt(versionRevision))\n      )\n      setTimeout(() => {\n        this.$refs['preview-player'].setCurrentFrame(frame)\n        this.$refs['preview-player'].focus()\n      }, 100)\n    },\n\n    onPreviewsOrderChanged() {\n      this.taskPreviews = this.getCurrentTaskPreviews()\n    },\n\n    async extractAnnotationSnapshots() {\n      this.$refs['add-comment'].showAnnotationLoading()\n      const files =\n        await this.$refs['preview-player'].extractAnnotationSnapshots()\n      this.$refs['add-comment'].setAnnotationSnapshots(files)\n      this.$refs['add-comment'].hideAnnotationLoading()\n      return files\n    }\n  },\n\n  watch: {\n    $route() {\n      if (this.$route.params.task_id !== this.task.id) {\n        this.loadTaskData()\n      }\n      if (this.$route.params.preview_id !== this.selectedPreviewId) {\n        this.selectedPreviewId = this.$route.params.preview_id\n      }\n    },\n\n    selectedPreviewId() {\n      if (this.task) {\n        this.$router.push(this.previewPath(this.selectedPreviewId))\n      }\n    }\n  },\n\n  socket: {\n    events: {\n      'preview-file:add-file'(eventData) {\n        this.onPreviewAdded(eventData)\n      },\n\n      'preview-file:update'(eventData) {\n        const comment = this.taskComments.find(\n          c =>\n            c.previews &&\n            c.previews.length > 0 &&\n            c.previews[0].id === eventData.preview_file_id\n        )\n        if (comment && this.task) {\n          this.refreshPreview({\n            taskId: this.task.id,\n            previewId: eventData.preview_file_id\n          }).then(preview => {\n            comment.previews[0].validation_status = preview.validation_status\n          })\n        }\n      },\n\n      'comment:acknowledge'(eventData) {\n        this.onRemoteAcknowledge(eventData, 'ack')\n      },\n\n      'comment:unacknowledge'(eventData) {\n        this.onRemoteAcknowledge(eventData, 'unack')\n      },\n\n      'comment:new'(eventData) {\n        setTimeout(() => {\n          if (\n            this.getCurrentTaskComments().length !== this.taskComments.length\n          ) {\n            this.taskComments = this.getCurrentTaskComments()\n            this.taskPreviews = this.getCurrentTaskPreviews()\n          }\n        }, 1000)\n      },\n\n      'comment:reply'(eventData) {\n        if (this.task) {\n          const comment = this.taskComments.find(\n            c => c.id === eventData.comment_id\n          )\n          if (comment) {\n            if (!comment.replies) comment.replies = []\n            const reply = comment.replies.find(r => r.id === eventData.reply_id)\n            if (!reply) {\n              this.refreshComment({\n                taskId: this.task.id,\n                commentId: eventData.comment_id\n              })\n                .then(remoteComment => {\n                  comment.replies = remoteComment.replies\n                })\n                .catch(console.error)\n            }\n          }\n        }\n      },\n\n      'comment:delete'(eventData) {\n        const task = this.getTask()\n        if (task) {\n          const comments = this.getComments()\n          const comment = comments.find(c => c.id === eventData.comment_id)\n          if (comment) {\n            this.$store.commit('REMOVE_TASK_COMMENT', { task, comment })\n            this.taskComments = this.getCurrentTaskComments()\n            this.taskPreviews = this.getCurrentTaskPreviews()\n          }\n        }\n      },\n\n      'comment:delete-reply'(eventData) {\n        if (this.task) {\n          const comment = this.taskComments.find(\n            c => c.id === eventData.comment_id\n          )\n          if (comment) {\n            if (!comment.replies) comment.replies = []\n            this.$store.commit('REMOVE_REPLY_FROM_COMMENT', {\n              comment,\n              reply: { id: eventData.reply_id }\n            })\n          }\n        }\n      },\n\n      'preview-file:annotation-update'(eventData) {\n        const previewPlayer = this.$refs['preview-player']\n        const isValid = previewPlayer.isValidPreviewModification(\n          eventData.preview_file_id,\n          eventData.updated_at\n        )\n        if (isValid && previewPlayer) {\n          this.refreshPreview({\n            previewId: previewPlayer.currentPreview.id,\n            taskId: previewPlayer.currentPreview.task_id\n          }).then(preview => {\n            if (!previewPlayer.notSaved) {\n              this.taskPreviews = this.getCurrentTaskPreviews()\n              this.$nextTick(() => {\n                previewPlayer.reloadAnnotations()\n                previewPlayer.loadAnnotation()\n              })\n            }\n          })\n        }\n      }\n    }\n  },\n\n  metaInfo() {\n    let title = 'Loading task... - Kitsu'\n    if (this.task) {\n      const taskTypeName = this.taskTypeMap.get(this.task.task_type_id).name\n      title = `${this.title} / ${taskTypeName} - Kitsu`\n    }\n    return { title }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark .task-information,\n.dark .add-comment,\n.dark .comment,\n.dark .no-comment,\n.dark .column {\n  background: #46494f;\n  border-color: $dark-grey;\n  box-shadow: 0px 0px 6px #333;\n}\n\nh2.subtitle {\n  border: 0;\n  margin: 0;\n  padding: 0;\n}\n\n.page {\n  background: #f9f9f9;\n  margin-top: 60px;\n  padding: 0;\n}\n\n.page.column {\n  background: var(--background-page);\n  padding-bottom: 1em;\n}\n\n.page-header {\n  margin: 1em 1em 0 1em;\n  padding-right: 0;\n}\n\n.navigation-buttons {\n  font-size: 1em;\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n}\n\n.navigation-buttons .arrow {\n  font-size: 1.2em;\n  font-weight: bold;\n}\n\n.navigation-buttons a {\n  color: $grey;\n}\n\n.selected {\n  border: 0;\n}\n\n.source {\n  color: #aaa;\n  font-size: 0.8em;\n}\n\nvideo {\n  width: 100%;\n}\n\n.validation-buttons button {\n  width: 100%;\n  margin-bottom: 0.3em;\n  border-width: 2px;\n  font-weight: bold;\n}\n\n.preview-row {\n  margin-bottom: 0.5em;\n}\n\n.add-comment {\n  margin-bottom: 1em;\n  padding: 1em;\n  box-shadow: 0px 0px 6px #e0e0e0;\n}\n\n.no-comment {\n  background: white;\n  box-shadow: 0px 0px 6px #e0e0e0;\n  padding: 1em;\n  border-radius: 5px;\n}\n\n.comment {\n  box-shadow: 0px 0px 6px #e0e0e0;\n  margin-top: 0.3em;\n}\n\n.task-columns {\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n}\n\n.task-column {\n  padding: 1em;\n}\n\n.comments-column {\n  flex: 1;\n}\n\n.preview-column {\n  overflow: auto;\n  flex: 2;\n}\n\n.preview-column-content {\n  overflow-x: hidden;\n}\n\n.preview-list {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.page-header .tag {\n  border-radius: 0;\n  font-weight: bold;\n  margin-right: 0.5em;\n}\n\n.assignees {\n  display: flex;\n}\n\n.assignees span {\n  margin-right: 0.2em;\n}\n\n.avatar-wrapper {\n  margin-right: 0.5em;\n}\n\n.entity-thumbnail {\n  margin-right: 0.3em;\n}\n\n.title {\n  margin: 0;\n  flex: 1;\n}\n\n.pull-right {\n  margin-left: auto;\n}\n\n.title a {\n  color: inherit;\n}\n\n.set-main-preview {\n  height: 30px;\n}\n\n.back-link {\n  padding-top: 6px;\n}\n\n.main-column {\n  display: flex;\n  flex-direction: column;\n  max-height: calc(100% - 60px);\n}\n\n.task-columns {\n  display: flex;\n  max-height: 100%;\n  overflow: hidden;\n}\n\n.task-column {\n  overflow-y: auto;\n}\n\n.info-block {\n  margin-right: 0;\n}\n\n.task-type.block {\n  margin-bottom: 0;\n}\n\n.entity-thumbnail {\n  margin-top: 5px;\n}\n\n.field-label {\n  width: 130px;\n  max-width: 130px;\n}\n\n.title {\n  margin: 0;\n  flex: 1;\n  line-height: 1.5em;\n  font-weight: 500;\n  color: $grey;\n}\n\n@media screen and (max-width: 768px) {\n  .action-button {\n    display: none;\n  }\n\n  .title {\n    font-size: 1.3em;\n    line-height: 1.5em;\n  }\n\n  .header-title {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  .header-title .flexrow-item {\n    margin-bottom: 0.5em;\n  }\n\n  .task-column {\n    width: 100%;\n    overflow-y: initial;\n  }\n}\n</style>\n"],"names":["_sfc_main","EyeIcon","EyeOffIcon","formatListMixin","taskMixin","AddComment","AddPreviewModal","ComboboxStyled","Comment","DeleteModal","EditCommentModal","EntityThumbnail","ImageIcon","PageSubtitle","PeopleAvatar","PreviewPlayer","Spinner","SubscribeButton","TaskTypeName","ValidationTag","task","lastComment","previousDraft","drafts","mapGetters","preview","taskType","currentPreview","previewId","personId","border","episodeId","getTaskEntityPath","entity","taskTypeId","entityIndex","firstTraversal","previousEntityIndex","taskId","ctaskId","nextEntityIndex","type","entityName","taskTypeName","assigneeId","id","c","mapActions","err","loadingFunction","callback","comment","attachment","checklist","taskStatusId","revision","params","action","isRetakeError","forms","previews","p","changeRoute","commentId","eventData","extension","section","route","additions","deletions","updates","time","previewForm","f","user","index","comments","versionRevision","minutes","seconds","milliseconds","frame","files","r","remoteComment","previewPlayer","title"],"mappings":"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"}