{"version":3,"file":"TeamSchedule-AeDHrEJW.js","sources":["../../src/components/pages/TeamSchedule.vue"],"sourcesContent":["<template>\n  <div class=\"columns fixed-page\">\n    <div class=\"column main-column\">\n      <div class=\"flexrow project-dates\">\n        <div class=\"flexrow-item\">\n          <label class=\"label\">\n            {{ $t('main.start_date') }}\n          </label>\n          <datepicker\n            wrapper-class=\"datepicker\"\n            input-class=\"date-input input short\"\n            :language=\"locale\"\n            :monday-first=\"true\"\n            :typeable=\"true\"\n            format=\"yyyy-MM-dd\"\n            @selected=\"onUpdateSelectedStartDate\"\n            v-model=\"selectedStartDate\"\n          />\n        </div>\n        <div class=\"flexrow-item\">\n          <label class=\"label\">\n            {{ $t('main.end_date') }}\n          </label>\n          <datepicker\n            wrapper-class=\"datepicker\"\n            input-class=\"date-input input short\"\n            :language=\"locale\"\n            :monday-first=\"true\"\n            :typeable=\"true\"\n            format=\"yyyy-MM-dd\"\n            @selected=\"onUpdateSelectedEndDate\"\n            v-model=\"selectedEndDate\"\n          />\n        </div>\n        <combobox-number\n          class=\"flexrow-item zoom-level\"\n          :label=\"$t('schedule.zoom_level')\"\n          :options=\"zoomOptions\"\n          v-model=\"zoomLevel\"\n        />\n        <combobox-department\n          class=\"flexrow-item\"\n          :label=\"$t('main.department')\"\n          v-model=\"selectedDepartment\"\n        />\n        <div class=\"flexrow-item people-filter\">\n          <label class=\"label\">\n            {{ $t('main.person') }}\n          </label>\n          <people-field\n            ref=\"people-field\"\n            :people=\"selectablePeople\"\n            :placeholder=\"$t('team_schedule.person_placeholder')\"\n            wide\n            v-model=\"selectedPerson\"\n          />\n        </div>\n        <div class=\"filler\"></div>\n        <div class=\"button\" @click=\"$refs.schedule.scrollToToday()\">\n          {{ $t('schedule.today') }}\n        </div>\n      </div>\n\n      <schedule\n        ref=\"schedule\"\n        :end-date=\"endDate\"\n        :hide-man-days=\"true\"\n        :hierarchy=\"scheduleItems\"\n        :is-error=\"errors.schedule\"\n        :is-estimation-linked=\"true\"\n        :is-loading=\"loading.schedule\"\n        :multiline=\"true\"\n        :reassignable=\"true\"\n        :start-date=\"startDate\"\n        :with-milestones=\"false\"\n        :zoom-level=\"zoomLevel\"\n        @item-changed=\"onScheduleItemChanged\"\n        @item-assign=\"onScheduleItemAssigned\"\n        @item-unassign=\"onScheduleItemUnassigned\"\n        @root-element-expanded=\"expandPersonElement\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\n/*\n * Page to manage the schedule of all the people in the studio\n */\nimport { mapGetters, mapActions } from 'vuex'\nimport moment from 'moment-timezone'\nimport { firstBy } from 'thenby'\nimport { en, fr } from 'vuejs-datepicker/dist/locale'\nimport Datepicker from 'vuejs-datepicker'\n\nimport { getPersonTabPath } from '@/lib/path'\nimport { addBusinessDays, minutesToDays, parseSimpleDate } from '@/lib/time'\nimport colors from '@/lib/colors'\n\nimport { formatListMixin } from '@/components/mixins/format'\n\nimport ComboboxDepartment from '@/components/widgets/ComboboxDepartment.vue'\nimport ComboboxNumber from '@/components/widgets/ComboboxNumber.vue'\nimport PeopleField from '@/components/widgets/PeopleField.vue'\nimport Schedule from '@/components/widgets/Schedule.vue'\n\nexport default {\n  name: 'team-schedule',\n  mixins: [formatListMixin],\n  components: {\n    ComboboxDepartment,\n    ComboboxNumber,\n    Datepicker,\n    PeopleField,\n    Schedule\n  },\n\n  data() {\n    return {\n      endDate: moment().add(3, 'months'),\n      personDates: {},\n      scheduleItems: [],\n      selectedDepartment: null,\n      selectedEndDate: null,\n      selectedPerson: null,\n      selectedStartDate: null,\n      startDate: moment(),\n      zoomLevel: 1,\n      zoomOptions: [\n        // { label: 'Week', value: 0 },\n        { label: '1', value: 1 },\n        { label: '2', value: 2 },\n        { label: '3', value: 3 }\n      ],\n      loading: {\n        schedule: false\n      },\n      errors: {\n        schedule: false\n      }\n    }\n  },\n\n  mounted() {\n    this.init()\n  },\n\n  computed: {\n    ...mapGetters(['daysOff', 'displayedPeople', 'taskTypeMap', 'user']),\n\n    locale() {\n      if (this.user.locale === 'fr_FR') {\n        return fr\n      } else {\n        return en\n      }\n    },\n\n    daysOffByPerson() {\n      return this.daysOff.reduce((acc, dayOff) => {\n        if (!acc[dayOff.person_id]) {\n          acc[dayOff.person_id] = []\n        }\n        acc[dayOff.person_id].push(dayOff)\n        return acc\n      }, {})\n    },\n\n    selectablePeople() {\n      const displayedPeople = this.displayedPeople.filter(\n        person => !person.is_bot\n      )\n      if (this.selectedDepartment) {\n        return displayedPeople.filter(person =>\n          person.departments.includes(this.selectedDepartment)\n        )\n      }\n      return displayedPeople\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'assignSelectedTasks',\n      'fetchPersonTasks',\n      'getPersonsTasksDates',\n      'loadDaysOff',\n      'loadPeople',\n      'unassignPersonFromTask',\n      'updateTask'\n    ]),\n\n    async init() {\n      this.loading.schedule = true\n      await this.loadPeople()\n      await this.loadPersonDates()\n      await this.loadDaysOff()\n\n      this.refreshSchedule()\n\n      this.startDate = moment()\n      this.endDate = moment().add(3, 'months')\n      Object.values(this.personDates).forEach(dates => {\n        if (dates.startDate.isBefore(this.startDate)) {\n          this.startDate = dates.startDate.clone()\n        }\n        if (dates.endDate.isAfter(this.endDate)) {\n          this.endDate = dates.endDate.clone()\n        }\n      })\n\n      this.selectedStartDate = this.startDate.toDate()\n      this.selectedEndDate = this.endDate.toDate()\n    },\n\n    async loadPersonDates(syncSchedule = false) {\n      const personDatesList = await this.getPersonsTasksDates()\n      this.personDates = {}\n      personDatesList.forEach(p => {\n        this.personDates[p.person_id] = {\n          endDate: parseSimpleDate(p.max_date),\n          startDate: parseSimpleDate(p.min_date)\n        }\n      })\n\n      if (syncSchedule) {\n        this.scheduleItems.forEach(scheduleItem => {\n          const personDates = this.personDates[scheduleItem.id]\n          if (personDates) {\n            scheduleItem.startDate = personDates.startDate\n            scheduleItem.endDate = personDates.endDate\n          }\n        })\n      }\n    },\n\n    refreshSchedule() {\n      const people = this.selectedPerson\n        ? [this.selectedPerson]\n        : this.selectablePeople\n      this.scheduleItems = this.convertScheduleItems(people)\n    },\n\n    convertScheduleItems(scheduleItems) {\n      return scheduleItems.map(item => {\n        let startDate = moment()\n        let endDate = moment()\n        const personDates = this.personDates[item.id]\n        if (personDates && personDates.startDate && personDates.endDate) {\n          startDate = parseSimpleDate(personDates.startDate)\n          endDate = parseSimpleDate(personDates.endDate)\n        }\n        return {\n          ...item,\n          avatar: true,\n          color: item.color || colors.fromString(item.name, true),\n          startDate,\n          endDate,\n          expanded: false,\n          loading: false,\n          editable: false,\n          route: getPersonTabPath(item.id, 'schedule'),\n          children: [],\n          daysOff: this.daysOffByPerson[item.id]\n        }\n      })\n    },\n\n    buildTaskScheduleItem(parentElement, task) {\n      let startDate = moment()\n      let endDate\n\n      if (!task.start_date || !task.due_date) {\n        return null\n      }\n\n      if (task.start_date) {\n        startDate = parseSimpleDate(task.start_date)\n      }\n\n      if (task.due_date) {\n        endDate = parseSimpleDate(task.due_date)\n      } else if (task.end_date) {\n        endDate = parseSimpleDate(task.end_date)\n      } else if (task.estimation) {\n        endDate = addBusinessDays(\n          task.startDate,\n          Math.ceil(minutesToDays(this.organisation, task.estimation)) - 1,\n          task.parentElement.daysOff\n        )\n      }\n\n      if (!endDate || endDate.isBefore(startDate)) {\n        endDate = startDate.clone().add(1, 'days')\n      }\n      const taskType = this.taskTypeMap.get(task.task_type_id)\n      return {\n        ...task,\n        name: `${task.full_entity_name} / ${taskType.name}`,\n        startDate,\n        endDate,\n        loading: false,\n        man_days: task.estimation,\n        editable: true,\n        unresizable: false,\n        color: taskType.color,\n        parentElement\n      }\n    },\n\n    saveTaskScheduleItem(task) {\n      return this.updateTask({\n        taskId: task.id,\n        data: {\n          start_date: task.startDate.format('YYYY-MM-DD'),\n          due_date: task.endDate.format('YYYY-MM-DD'),\n          estimation: task.estimation\n        }\n      })\n    },\n\n    async onScheduleItemChanged(item) {\n      if (item.type === 'Task') {\n        if (item.estimation) {\n          item.endDate = addBusinessDays(\n            item.startDate,\n            Math.ceil(minutesToDays(this.organisation, item.estimation)) - 1,\n            item.parentElement.daysOff\n          )\n        }\n        await this.saveTaskScheduleItem(item)\n        await this.loadPersonDates(true)\n        await this.loadDaysOff()\n      }\n    },\n\n    onScheduleItemAssigned(item, person) {\n      if (item.type === 'Task') {\n        this.assignSelectedTasks({\n          personId: person.id,\n          taskIds: [item.id]\n        })\n      }\n    },\n\n    onScheduleItemUnassigned(item, person) {\n      if (item.type === 'Task') {\n        this.unassignPersonFromTask({\n          person,\n          task: item\n        })\n      }\n    },\n\n    async expandPersonElement(element, refreshScheduleCallBack) {\n      element.expanded = !element.expanded\n\n      if (!element.expanded) {\n        return\n      }\n\n      element.loading = true\n      element.children = []\n      try {\n        const tasks = await this.fetchPersonTasks(element.id)\n        element.children = tasks\n          .map(task => this.buildTaskScheduleItem(element, task))\n          .filter(Boolean)\n          .sort(firstBy('startDate').thenBy('project_name').thenBy('name'))\n\n        if (refreshScheduleCallBack) {\n          refreshScheduleCallBack(element)\n        }\n      } catch (err) {\n        console.error(err)\n      }\n      element.loading = false\n    },\n\n    onUpdateSelectedStartDate(date) {\n      this.startDate = parseSimpleDate(date)\n    },\n\n    onUpdateSelectedEndDate(date) {\n      this.endDate = parseSimpleDate(date)\n    }\n  },\n\n  socket: {},\n\n  watch: {\n    selectedDepartment() {\n      if (\n        this.selectedPerson &&\n        !this.selectablePeople.includes(this.selectedPerson)\n      ) {\n        this.$refs['people-field'].clear()\n      }\n      this.refreshSchedule()\n    },\n    selectedPerson() {\n      this.refreshSchedule()\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('team_schedule.title_main')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .project-dates {\n    color: $white-grey;\n    border-bottom: 1px solid $grey;\n  }\n}\n\n.project-dates {\n  border-bottom: 1px solid #eee;\n  padding-bottom: 1em;\n\n  .field {\n    padding-bottom: 0;\n    margin-bottom: 0;\n  }\n\n  .overall-man-days {\n    width: 120px;\n    font-size: 0.9em;\n    margin-right: 1em;\n  }\n}\n\n.fixed-page {\n  padding: 1em;\n  padding-top: 90px;\n  padding-left: 2em;\n}\n\n.main-column {\n  display: flex;\n  border: 0;\n  overflow: hidden;\n  flex-direction: column;\n}\n\n.zoom-level {\n  margin-top: -10px;\n  white-space: nowrap;\n}\n\n.people-filter {\n  min-width: 250px;\n}\n</style>\n"],"names":["_sfc_main","formatListMixin","ComboboxDepartment","ComboboxNumber","Datepicker","PeopleField","Schedule","moment","mapGetters","fr","en","acc","dayOff","displayedPeople","person","mapActions","dates","syncSchedule","personDatesList","p","parseSimpleDate","scheduleItem","personDates","people","scheduleItems","item","startDate","endDate","colors","getPersonTabPath","parentElement","task","addBusinessDays","minutesToDays","taskType","element","refreshScheduleCallBack","tasks","firstBy","err","date"],"mappings":"kKA0GA,MAAAA,EAAA,CACA,KAAA,gBACA,OAAA,CAAAC,CAAA,EACA,WAAA,CACA,mBAAAC,EACA,eAAAC,EACA,WAAAC,EACA,YAAAC,EACA,SAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,QAAAC,EAAA,EAAA,IAAA,EAAA,QAAA,EACA,YAAA,CAAA,EACA,cAAA,CAAA,EACA,mBAAA,KACA,gBAAA,KACA,eAAA,KACA,kBAAA,KACA,UAAAA,EAAA,EACA,UAAA,EACA,YAAA,CAEA,CAAA,MAAA,IAAA,MAAA,CAAA,EACA,CAAA,MAAA,IAAA,MAAA,CAAA,EACA,CAAA,MAAA,IAAA,MAAA,CAAA,CACA,EACA,QAAA,CACA,SAAA,EACA,EACA,OAAA,CACA,SAAA,EACA,CACA,CACA,EAEA,SAAA,CACA,KAAA,KAAA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CAAA,UAAA,kBAAA,cAAA,MAAA,CAAA,EAEA,QAAA,CACA,OAAA,KAAA,KAAA,SAAA,QACAC,EAAA,GAEAC,EAAA,EAEA,EAEA,iBAAA,CACA,OAAA,KAAA,QAAA,OAAA,CAAAC,EAAAC,KACAD,EAAAC,EAAA,SAAA,IACAD,EAAAC,EAAA,SAAA,EAAA,CAAA,GAEAD,EAAAC,EAAA,SAAA,EAAA,KAAAA,CAAA,EACAD,GACA,EAAA,CACA,EAEA,kBAAA,CACA,MAAAE,EAAA,KAAA,gBAAA,OACAC,GAAA,CAAAA,EAAA,MACA,EACA,OAAA,KAAA,mBACAD,EAAA,OAAAC,GACAA,EAAA,YAAA,SAAA,KAAA,kBAAA,CACA,EAEAD,CACA,CACA,EAEA,QAAA,CACA,GAAAE,EAAA,CACA,sBACA,mBACA,uBACA,cACA,aACA,yBACA,YACA,CAAA,EAEA,MAAA,MAAA,CACA,KAAA,QAAA,SAAA,GACA,MAAA,KAAA,WAAA,EACA,MAAA,KAAA,gBAAA,EACA,MAAA,KAAA,YAAA,EAEA,KAAA,gBAAA,EAEA,KAAA,UAAAR,EAAA,EACA,KAAA,QAAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EACA,OAAA,OAAA,KAAA,WAAA,EAAA,QAAAS,GAAA,CACAA,EAAA,UAAA,SAAA,KAAA,SAAA,IACA,KAAA,UAAAA,EAAA,UAAA,MAAA,GAEAA,EAAA,QAAA,QAAA,KAAA,OAAA,IACA,KAAA,QAAAA,EAAA,QAAA,MAAA,EAEA,CAAA,EAEA,KAAA,kBAAA,KAAA,UAAA,OAAA,EACA,KAAA,gBAAA,KAAA,QAAA,OAAA,CACA,EAEA,MAAA,gBAAAC,EAAA,GAAA,CACA,MAAAC,EAAA,MAAA,KAAA,qBAAA,EACA,KAAA,YAAA,CAAA,EACAA,EAAA,QAAAC,GAAA,CACA,KAAA,YAAAA,EAAA,SAAA,EAAA,CACA,QAAAC,EAAAD,EAAA,QAAA,EACA,UAAAC,EAAAD,EAAA,QAAA,CACA,CACA,CAAA,EAEAF,GACA,KAAA,cAAA,QAAAI,GAAA,CACA,MAAAC,EAAA,KAAA,YAAAD,EAAA,EAAA,EACAC,IACAD,EAAA,UAAAC,EAAA,UACAD,EAAA,QAAAC,EAAA,QAEA,CAAA,CAEA,EAEA,iBAAA,CACA,MAAAC,EAAA,KAAA,eACA,CAAA,KAAA,cAAA,EACA,KAAA,iBACA,KAAA,cAAA,KAAA,qBAAAA,CAAA,CACA,EAEA,qBAAAC,EAAA,CACA,OAAAA,EAAA,IAAAC,GAAA,CACA,IAAAC,EAAAnB,EAAA,EACAoB,EAAApB,EAAA,EACA,MAAAe,EAAA,KAAA,YAAAG,EAAA,EAAA,EACA,OAAAH,GAAAA,EAAA,WAAAA,EAAA,UACAI,EAAAN,EAAAE,EAAA,SAAA,EACAK,EAAAP,EAAAE,EAAA,OAAA,GAEA,CACA,GAAAG,EACA,OAAA,GACA,MAAAA,EAAA,OAAAG,EAAA,WAAAH,EAAA,KAAA,EAAA,EACA,UAAAC,EACA,QAAAC,EACA,SAAA,GACA,QAAA,GACA,SAAA,GACA,MAAAE,EAAAJ,EAAA,GAAA,UAAA,EACA,SAAA,CAAA,EACA,QAAA,KAAA,gBAAAA,EAAA,EAAA,CACA,CACA,CAAA,CACA,EAEA,sBAAAK,EAAAC,EAAA,CACA,IAAAL,EAAAnB,EAAA,EACAoB,EAEA,GAAA,CAAAI,EAAA,YAAA,CAAAA,EAAA,SACA,OAAA,KAGAA,EAAA,aACAL,EAAAN,EAAAW,EAAA,UAAA,GAGAA,EAAA,SACAJ,EAAAP,EAAAW,EAAA,QAAA,EACAA,EAAA,SACAJ,EAAAP,EAAAW,EAAA,QAAA,EACAA,EAAA,aACAJ,EAAAK,EACAD,EAAA,UACA,KAAA,KAAAE,EAAA,KAAA,aAAAF,EAAA,UAAA,CAAA,EAAA,EACAA,EAAA,cAAA,OACA,IAGA,CAAAJ,GAAAA,EAAA,SAAAD,CAAA,KACAC,EAAAD,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,GAEA,MAAAQ,EAAA,KAAA,YAAA,IAAAH,EAAA,YAAA,EACA,MAAA,CACA,GAAAA,EACA,KAAA,GAAAA,EAAA,gBAAA,MAAAG,EAAA,IAAA,GACA,UAAAR,EACA,QAAAC,EACA,QAAA,GACA,SAAAI,EAAA,WACA,SAAA,GACA,YAAA,GACA,MAAAG,EAAA,MACA,cAAAJ,CACA,CACA,EAEA,qBAAAC,EAAA,CACA,OAAA,KAAA,WAAA,CACA,OAAAA,EAAA,GACA,KAAA,CACA,WAAAA,EAAA,UAAA,OAAA,YAAA,EACA,SAAAA,EAAA,QAAA,OAAA,YAAA,EACA,WAAAA,EAAA,UACA,CACA,CAAA,CACA,EAEA,MAAA,sBAAAN,EAAA,CACAA,EAAA,OAAA,SACAA,EAAA,aACAA,EAAA,QAAAO,EACAP,EAAA,UACA,KAAA,KAAAQ,EAAA,KAAA,aAAAR,EAAA,UAAA,CAAA,EAAA,EACAA,EAAA,cAAA,OACA,GAEA,MAAA,KAAA,qBAAAA,CAAA,EACA,MAAA,KAAA,gBAAA,EAAA,EACA,MAAA,KAAA,YAAA,EAEA,EAEA,uBAAAA,EAAAX,EAAA,CACAW,EAAA,OAAA,QACA,KAAA,oBAAA,CACA,SAAAX,EAAA,GACA,QAAA,CAAAW,EAAA,EAAA,CACA,CAAA,CAEA,EAEA,yBAAAA,EAAAX,EAAA,CACAW,EAAA,OAAA,QACA,KAAA,uBAAA,CACA,OAAAX,EACA,KAAAW,CACA,CAAA,CAEA,EAEA,MAAA,oBAAAU,EAAAC,EAAA,CAGA,GAFAD,EAAA,SAAA,CAAAA,EAAA,SAEA,EAAAA,EAAA,SAIA,CAAAA,EAAA,QAAA,GACAA,EAAA,SAAA,CAAA,EACA,GAAA,CACA,MAAAE,EAAA,MAAA,KAAA,iBAAAF,EAAA,EAAA,EACAA,EAAA,SAAAE,EACA,IAAAN,GAAA,KAAA,sBAAAI,EAAAJ,CAAA,CAAA,EACA,OAAA,OAAA,EACA,KAAAO,EAAAA,QAAA,WAAA,EAAA,OAAA,cAAA,EAAA,OAAA,MAAA,CAAA,EAEAF,GACAA,EAAAD,CAAA,CAEA,OAAAI,EAAA,CACA,QAAA,MAAAA,CAAA,CACA,CACAJ,EAAA,QAAA,GACA,EAEA,0BAAAK,EAAA,CACA,KAAA,UAAApB,EAAAoB,CAAA,CACA,EAEA,wBAAAA,EAAA,CACA,KAAA,QAAApB,EAAAoB,CAAA,CACA,CACA,EAEA,OAAA,CAAA,EAEA,MAAA,CACA,oBAAA,CAEA,KAAA,gBACA,CAAA,KAAA,iBAAA,SAAA,KAAA,cAAA,GAEA,KAAA,MAAA,cAAA,EAAA,MAAA,EAEA,KAAA,gBAAA,CACA,EACA,gBAAA,CACA,KAAA,gBAAA,CACA,CACA,EAEA,UAAA,CACA,MAAA,CACA,MAAA,GAAA,KAAA,GAAA,0BAAA,CAAA,UACA,CACA,CACA"}