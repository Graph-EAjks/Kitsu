{"version":3,"file":"TeamSchedule-BM-FYdhj.js","sources":["../../src/components/pages/TeamSchedule.vue"],"sourcesContent":["<template>\n  <div class=\"columns fixed-page\">\n    <div class=\"column main-column\">\n      <div class=\"flexrow project-dates\">\n        <div class=\"flexrow-item\">\n          <label class=\"label\">\n            {{ $t('main.start_date') }}\n          </label>\n          <datepicker\n            wrapper-class=\"datepicker\"\n            input-class=\"date-input input short\"\n            :language=\"locale\"\n            :monday-first=\"true\"\n            :typeable=\"true\"\n            format=\"yyyy-MM-dd\"\n            @selected=\"onUpdateSelectedStartDate\"\n            v-model=\"selectedStartDate\"\n          />\n        </div>\n        <div class=\"flexrow-item\">\n          <label class=\"label\">\n            {{ $t('main.end_date') }}\n          </label>\n          <datepicker\n            wrapper-class=\"datepicker\"\n            input-class=\"date-input input short\"\n            :language=\"locale\"\n            :monday-first=\"true\"\n            :typeable=\"true\"\n            format=\"yyyy-MM-dd\"\n            @selected=\"onUpdateSelectedEndDate\"\n            v-model=\"selectedEndDate\"\n          />\n        </div>\n        <combobox-number\n          class=\"flexrow-item zoom-level\"\n          :label=\"$t('schedule.zoom_level')\"\n          :options=\"zoomOptions\"\n          v-model=\"zoomLevel\"\n        />\n        <combobox-department\n          class=\"flexrow-item\"\n          :label=\"$t('main.department')\"\n          v-model=\"selectedDepartment\"\n        />\n        <combobox-studio\n          class=\"flexrow-item\"\n          :label=\"$t('main.studio')\"\n          v-model=\"selectedStudio\"\n        />\n        <div class=\"flexrow-item people-filter\">\n          <label class=\"label\">\n            {{ $t('main.person') }}\n          </label>\n          <people-field\n            ref=\"people-field\"\n            :people=\"selectablePeople\"\n            :placeholder=\"$t('team_schedule.person_placeholder')\"\n            wide\n            v-model=\"selectedPerson\"\n          />\n        </div>\n        <div class=\"filler\"></div>\n        <div class=\"flexrow\">\n          <button-simple\n            class=\"flexrow-item\"\n            icon=\"clock\"\n            :text=\"$t('schedule.today')\"\n            @click=\"scrollScheduleToToday\"\n          />\n          <button-simple\n            :active=\"isTaskSidePanelOpen\"\n            class=\"flexrow-item\"\n            icon=\"list\"\n            :text=\"$t('tasks.unassigned_tasks')\"\n            @click=\"toggleTaskSidePanel\"\n          />\n        </div>\n      </div>\n\n      <schedule\n        ref=\"schedule\"\n        :dragged-items=\"draggedTasks\"\n        :end-date=\"endDate\"\n        :hide-man-days=\"true\"\n        :hierarchy=\"scheduleItems\"\n        :is-error=\"errors.schedule\"\n        :is-estimation-linked=\"true\"\n        :multiline=\"true\"\n        :reassignable=\"true\"\n        :start-date=\"startDate\"\n        :with-milestones=\"false\"\n        :zoom-level=\"zoomLevel\"\n        @item-assign=\"onScheduleItemAssigned\"\n        @item-changed=\"onScheduleItemChanged\"\n        @item-drop=\"onScheduleItemDropped\"\n        @item-unassign=\"onScheduleItemUnassigned\"\n        @root-element-expanded=\"expandPersonElement\"\n      />\n    </div>\n\n    <div class=\"column side-column\" v-if=\"isTaskSidePanelOpen\">\n      <task-info>\n        <a class=\"close-button\" @click=\"toggleTaskSidePanel\">x</a>\n        <h2 class=\"mt1\">\n          {{ $t('tasks.unassigned_tasks') }}\n          <template v-if=\"!loading.unassignedTasks\">\n            ({{ totalUnassignedTasks }})\n          </template>\n        </h2>\n        <div class=\"mb2\">\n          <combobox-production\n            class=\"mb05\"\n            :label=\"$t('main.production')\"\n            :production-list=\"productionList\"\n            v-model=\"filters.productionId\"\n            @input=\"loadUnassignedTasks()\"\n          />\n          <combobox-task-type\n            class=\"mb05\"\n            :label=\"$t('news.task_type')\"\n            :task-type-list=\"taskTypeList\"\n            v-model=\"filters.taskTypeId\"\n            @input=\"loadUnassignedTasks()\"\n          />\n        </div>\n        <template v-if=\"unassignedTasks.length > 0\">\n          <ul class=\"task-list\">\n            <li\n              class=\"task-item\"\n              draggable\n              :key=\"task.id\"\n              v-for=\"task in unassignedTasks\"\n              @dragstart=\"onTaskDragStart($event, task)\"\n              @drag=\"onTaskDrag\"\n              @dragend=\"onTaskDragEnd\"\n            >\n              <div\n                class=\"ui-droppable\"\n                :style=\"{ borderColor: task.type_color }\"\n              >\n                <div class=\"flexrow\">\n                  <div class=\"flexrow-item filler\">\n                    <production-name\n                      class=\"strong mb05\"\n                      :production=\"task.production\"\n                      :size=\"25\"\n                    />\n                    <div class=\"ellipsis\">{{ task.full_name }}</div>\n                    <em v-if=\"task.man_days\">\n                      {{ $t('main.estimation') }}: {{ task.man_days }}\n                      {{ $tc('main.man_days', task.man_days) }}\n                    </em>\n                  </div>\n                  <entity-thumbnail\n                    class=\"task-thumbnail flexrow-item\"\n                    :preview-file-id=\"task.entity_preview_file_id\"\n                    v-if=\"task.entity_preview_file_id\"\n                  />\n                </div>\n                <department-name\n                  class=\"task-department\"\n                  :department=\"task.department\"\n                  no-padding\n                  only-dot\n                  v-if=\"task.department\"\n                />\n              </div>\n            </li>\n          </ul>\n          <div class=\"has-text-centered\" v-if=\"loading.hasMoreUnassignedTasks\">\n            <spinner class=\"mt2\" v-if=\"loading.unassignedTasks\" />\n            <button\n              class=\"button mt2\"\n              @click=\"loadUnassignedTasks(true)\"\n              v-else\n            >\n              {{ $t('main.load_more') }}\n            </button>\n          </div>\n        </template>\n        <div v-else-if=\"loading.unassignedTasks\">\n          <spinner class=\"mt2\" />\n        </div>\n        <div v-else-if=\"errors.unassignedTasks\">\n          <table-info is-error />\n          <div class=\"has-text-centered pa1\">\n            <button-simple\n              class=\"has-text-centered\"\n              :text=\"$t('main.reload')\"\n              @click=\"loadUnassignedTasks()\"\n            />\n          </div>\n        </div>\n        <div class=\"has-text-centered\" v-else>\n          <em>{{ $t('main.no_results') }}</em>\n        </div>\n      </task-info>\n    </div>\n  </div>\n</template>\n\n<script>\n/*\n * Page to manage the schedule of all the people in the studio\n */\nimport moment from 'moment-timezone'\nimport { firstBy } from 'thenby'\nimport Datepicker from 'vuejs-datepicker'\nimport { en, fr } from 'vuejs-datepicker/dist/locale'\nimport { mapGetters, mapActions } from 'vuex'\n\nimport { getPersonTabPath } from '@/lib/path'\nimport { addBusinessDays, minutesToDays, parseSimpleDate } from '@/lib/time'\nimport colors from '@/lib/colors'\n\nimport { formatListMixin } from '@/components/mixins/format'\n\nimport ButtonSimple from '@/components/widgets/ButtonSimple.vue'\nimport ComboboxDepartment from '@/components/widgets/ComboboxDepartment.vue'\nimport ComboboxNumber from '@/components/widgets/ComboboxNumber.vue'\nimport ComboboxProduction from '@/components/widgets/ComboboxProduction.vue'\nimport ComboboxStudio from '@/components/widgets/ComboboxStudio.vue'\nimport ComboboxTaskType from '@/components/widgets/ComboboxTaskType.vue'\nimport DepartmentName from '@/components/widgets/DepartmentName.vue'\nimport EntityThumbnail from '@/components/widgets/EntityThumbnail.vue'\nimport PeopleField from '@/components/widgets/PeopleField.vue'\nimport ProductionName from '@/components/widgets/ProductionName.vue'\nimport Schedule from '@/components/widgets/Schedule.vue'\nimport Spinner from '@/components/widgets/Spinner.vue'\nimport TableInfo from '@/components/widgets/TableInfo.vue'\nimport TaskInfo from '@/components/sides/TaskInfo.vue'\n\nexport default {\n  name: 'team-schedule',\n\n  mixins: [formatListMixin],\n\n  components: {\n    ButtonSimple,\n    ComboboxDepartment,\n    ComboboxNumber,\n    ComboboxProduction,\n    ComboboxStudio,\n    ComboboxTaskType,\n    Datepicker,\n    DepartmentName,\n    EntityThumbnail,\n    PeopleField,\n    ProductionName,\n    Schedule,\n    Spinner,\n    TableInfo,\n    TaskInfo\n  },\n\n  data() {\n    return {\n      draggedTasks: [],\n      endDate: moment().add(3, 'months'),\n      isTaskSidePanelOpen: false,\n      personDates: {},\n      scheduleItems: [],\n      selectedDepartment: null,\n      selectedEndDate: null,\n      selectedPerson: null,\n      selectedStartDate: null,\n      selectedStudio: null,\n      startDate: moment(),\n      unassignedTasks: [],\n      totalUnassignedTasks: 0,\n      zoomLevel: 1,\n      zoomOptions: [\n        { label: '1', value: 1 },\n        { label: '2', value: 2 },\n        { label: '3', value: 3 },\n        { label: '4', value: 4 }\n      ],\n      loading: {\n        hasMoreUnassignedTasks: false,\n        unassignedTasks: false\n      },\n      errors: {\n        unassignedTasks: false,\n        schedule: false\n      },\n      filters: {\n        productionId: null,\n        taskTypeId: null\n      },\n      pagination: {\n        unassignedTasks: 1\n      }\n    }\n  },\n\n  mounted() {\n    this.selectedDepartment = this.$route.query.department || undefined\n    this.selectedStudio = this.$route.query.studio || undefined\n    const zoom = parseInt(this.$route.query.zoom) || 1\n    this.zoomLevel = Math.min(Math.max(zoom, 1), 4)\n\n    this.init()\n  },\n\n  computed: {\n    ...mapGetters([\n      'daysOff',\n      'departmentMap',\n      'displayedPeople',\n      'getProductionTaskTypes',\n      'openProductions',\n      'organisation',\n      'productionMap',\n      'studios',\n      'taskTypeMap',\n      'user'\n    ]),\n\n    locale() {\n      if (this.user.locale === 'fr_FR') {\n        return fr\n      } else {\n        return en\n      }\n    },\n\n    daysOffByPerson() {\n      return this.daysOff.reduce((acc, dayOff) => {\n        if (!acc[dayOff.person_id]) {\n          acc[dayOff.person_id] = []\n        }\n        acc[dayOff.person_id].push(dayOff)\n        return acc\n      }, {})\n    },\n\n    selectablePeople() {\n      let selectablePeople = this.displayedPeople.filter(\n        person => !person.is_bot\n      )\n      if (this.selectedDepartment) {\n        selectablePeople = selectablePeople.filter(person =>\n          person.departments.includes(this.selectedDepartment)\n        )\n      }\n      if (this.selectedStudio) {\n        selectablePeople = selectablePeople.filter(\n          person => person.studio_id === this.selectedStudio\n        )\n      }\n      return selectablePeople\n    },\n\n    productionList() {\n      return this.addAllValue(this.openProductions)\n    },\n\n    taskTypeList() {\n      const productionId = this.filters.productionId\n      const types = this.getProductionTaskTypes(productionId).filter(\n        type => type.for_entity !== 'Concept'\n      )\n      return this.addAllValue(types)\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      'assignSelectedTasks',\n      'fetchPersonTasks',\n      'getPersonsTasksDates',\n      'loadDaysOff',\n      'loadOpenTasks',\n      'loadPeople',\n      'unassignPersonFromTask',\n      'updateTask'\n    ]),\n\n    addAllValue(list) {\n      return [\n        {\n          id: '',\n          color: '#999',\n          name: this.$t('main.all'),\n          short_name: this.$t('main.all')\n        },\n        ...list\n      ]\n    },\n\n    async init() {\n      await this.loadPeople()\n      await this.loadPersonDates()\n      await this.loadDaysOff()\n\n      this.refreshSchedule()\n      this.scrollScheduleToToday()\n\n      this.startDate = moment()\n      this.endDate = moment().add(3, 'months')\n      Object.values(this.personDates).forEach(dates => {\n        if (dates.startDate.isBefore(this.startDate)) {\n          this.startDate = dates.startDate.clone()\n        }\n        if (dates.endDate.isAfter(this.endDate)) {\n          this.endDate = dates.endDate.clone()\n        }\n      })\n\n      this.selectedStartDate = this.startDate.toDate()\n      this.selectedEndDate = this.endDate.toDate()\n    },\n\n    toggleTaskSidePanel() {\n      this.isTaskSidePanelOpen = !this.isTaskSidePanelOpen\n\n      if (!this.isTaskSidePanelOpen) {\n        this.unassignedTasks = []\n        this.errors.unassignedTasks = false\n      }\n    },\n\n    async loadUnassignedTasks(more = false) {\n      this.loading.unassignedTasks = true\n      this.errors.unassignedTasks = false\n      const page = more ? this.pagination.unassignedTasks + 1 : 1\n      try {\n        const { data, is_more, stats } = await this.loadOpenTasks({\n          limit: 20,\n          page,\n          person_id: 'unassigned',\n          project_id: this.filters.productionId,\n          task_type_id: this.filters.taskTypeId\n        })\n        if (more) {\n          this.pagination.unassignedTasks++\n        } else {\n          this.unassignedTasks = []\n        }\n        this.unassignedTasks = this.unassignedTasks.concat(\n          // populate tasks with extra data\n          data.map(task => ({\n            ...task,\n            full_name: `${task.entity_type_name} / ${task.entity_name} / ${task.type_name}`,\n            man_days: minutesToDays(this.organisation, task.estimation),\n            department: this.departmentMap.get(\n              this.taskTypeMap.get(task.task_type_id)?.department_id\n            ),\n            production: this.productionMap.get(task.project_id)\n          }))\n        )\n        this.totalUnassignedTasks = stats.total\n        this.loading.hasMoreUnassignedTasks = is_more\n      } catch (err) {\n        this.errors.unassignedTasks = true\n        console.error(err)\n      }\n      this.loading.unassignedTasks = false\n    },\n\n    async loadPersonDates(syncSchedule = false) {\n      const personDatesList = await this.getPersonsTasksDates()\n      this.personDates = {}\n      personDatesList.forEach(p => {\n        this.personDates[p.person_id] = {\n          endDate: parseSimpleDate(p.max_date),\n          startDate: parseSimpleDate(p.min_date)\n        }\n      })\n\n      if (syncSchedule) {\n        this.scheduleItems.forEach(scheduleItem => {\n          const personDates = this.personDates[scheduleItem.id]\n          if (personDates) {\n            scheduleItem.startDate = personDates.startDate\n            scheduleItem.endDate = personDates.endDate\n          }\n        })\n      }\n    },\n\n    refreshSchedule() {\n      const people = this.selectedPerson\n        ? [this.selectedPerson]\n        : this.selectablePeople\n      this.scheduleItems = this.convertScheduleItems(people)\n    },\n\n    convertScheduleItems(scheduleItems) {\n      return scheduleItems.map(item => {\n        let startDate = moment()\n        let endDate = moment()\n        const personDates = this.personDates[item.id]\n        if (personDates && personDates.startDate && personDates.endDate) {\n          startDate = parseSimpleDate(personDates.startDate)\n          endDate = parseSimpleDate(personDates.endDate)\n        }\n        return {\n          ...item,\n          avatar: true,\n          color: item.color || colors.fromString(item.name, true),\n          startDate,\n          endDate,\n          expanded: false,\n          loading: false,\n          editable: false,\n          route: getPersonTabPath(item.id, 'schedule'),\n          children: [],\n          daysOff: this.daysOffByPerson[item.id]\n        }\n      })\n    },\n\n    buildTaskScheduleItem(parentElement, task) {\n      let startDate = moment()\n      let endDate\n\n      if (!task.start_date || !task.due_date) {\n        return null\n      }\n\n      if (task.start_date) {\n        startDate = parseSimpleDate(task.start_date)\n      }\n\n      if (task.due_date) {\n        endDate = parseSimpleDate(task.due_date)\n      } else if (task.end_date) {\n        endDate = parseSimpleDate(task.end_date)\n      } else if (task.estimation) {\n        endDate = addBusinessDays(\n          task.startDate,\n          Math.ceil(minutesToDays(this.organisation, task.estimation)) - 1,\n          task.parentElement.daysOff\n        )\n      }\n\n      if (!endDate || endDate.isBefore(startDate)) {\n        endDate = startDate.clone().add(1, 'days')\n      }\n      const taskType = this.taskTypeMap.get(task.task_type_id)\n      return {\n        ...task,\n        name: `${task.full_entity_name} / ${taskType.name}`,\n        startDate,\n        endDate,\n        man_days: task.estimation,\n        editable: true,\n        unresizable: false,\n        color: taskType.color,\n        parentElement\n      }\n    },\n\n    saveTaskScheduleItem(task) {\n      return this.updateTask({\n        taskId: task.id,\n        data: {\n          start_date: task.startDate.format('YYYY-MM-DD'),\n          due_date: task.endDate.format('YYYY-MM-DD'),\n          estimation: task.estimation\n        }\n      })\n    },\n\n    onTaskDragStart(event, task) {\n      event.stopPropagation()\n      event.target.classList.add('drag')\n      event.dataTransfer.dropEffect = 'move'\n      event.dataTransfer.effectAllowed = 'move'\n      event.dataTransfer.setData('taskId', task.id)\n      this.draggedTasks = [task]\n    },\n\n    onTaskDrag(event) {\n      event.stopPropagation()\n      event.target.classList.add('dragging')\n    },\n\n    onTaskDragEnd(event) {\n      event.target.classList.remove('drag')\n      event.target.classList.remove('dragging')\n      this.draggedTasks = []\n    },\n\n    async onScheduleItemDropped(item, person, refreshScheduleCallBack) {\n      if (item.type === 'Task') {\n        const task = this.buildTaskScheduleItem(person, item)\n        person.children.push(task)\n        person.children.sort(\n          firstBy('startDate').thenBy('project_name').thenBy('name')\n        )\n        if (refreshScheduleCallBack) {\n          refreshScheduleCallBack(person)\n        }\n        await this.assignSelectedTasks({\n          personId: person.id,\n          taskIds: [task.id]\n        })\n        await this.saveTaskScheduleItem(task)\n        await this.loadUnassignedTasks()\n      }\n    },\n\n    async onScheduleItemChanged(item) {\n      if (item.type === 'Task') {\n        if (item.estimation) {\n          item.endDate = addBusinessDays(\n            item.startDate,\n            Math.ceil(minutesToDays(this.organisation, item.estimation)) - 1,\n            item.parentElement.daysOff\n          )\n        }\n        await this.saveTaskScheduleItem(item)\n        await this.loadPersonDates(true)\n        await this.loadDaysOff()\n      }\n    },\n\n    onScheduleItemAssigned(item, person) {\n      if (item.type === 'Task') {\n        person.children.sort(\n          firstBy('startDate').thenBy('project_name').thenBy('name')\n        )\n        this.assignSelectedTasks({\n          personId: person.id,\n          taskIds: [item.id]\n        })\n      }\n    },\n\n    onScheduleItemUnassigned(item, person) {\n      if (item.type === 'Task') {\n        this.unassignPersonFromTask({\n          person,\n          task: item\n        })\n      }\n    },\n\n    async expandPersonElement(element, refreshScheduleCallBack) {\n      element.expanded = !element.expanded\n\n      if (!element.expanded) {\n        return\n      }\n\n      element.loading = true\n      element.children = []\n      try {\n        const tasks = await this.fetchPersonTasks(element.id)\n        element.children = tasks\n          .map(task => this.buildTaskScheduleItem(element, task))\n          .filter(Boolean)\n          .sort(firstBy('startDate').thenBy('project_name').thenBy('name'))\n\n        if (refreshScheduleCallBack) {\n          refreshScheduleCallBack(element)\n        }\n      } catch (err) {\n        console.error(err)\n      }\n      element.loading = false\n    },\n\n    onUpdateSelectedStartDate(date) {\n      this.startDate = parseSimpleDate(date)\n    },\n\n    onUpdateSelectedEndDate(date) {\n      this.endDate = parseSimpleDate(date)\n    },\n\n    scrollScheduleToToday() {\n      this.$refs.schedule?.scrollToToday()\n    },\n\n    updateRoute({ department, studio, zoom }) {\n      const query = { ...this.$route.query }\n\n      if (department !== undefined) {\n        query.department = department || undefined\n      }\n      if (studio !== undefined) {\n        query.studio = studio || undefined\n      }\n      if (zoom !== undefined) {\n        query.zoom = String(zoom)\n      }\n\n      if (JSON.stringify(query) !== JSON.stringify(this.$route.query)) {\n        this.$router.push({ query })\n      }\n    }\n  },\n\n  watch: {\n    selectedDepartment(value) {\n      this.updateRoute({ department: value })\n      if (\n        this.selectedPerson &&\n        !this.selectablePeople.includes(this.selectedPerson)\n      ) {\n        this.$refs['people-field'].clear()\n      }\n      this.refreshSchedule()\n    },\n\n    selectedStudio(value) {\n      this.updateRoute({ studio: value })\n      if (\n        this.selectedPerson &&\n        !this.selectablePeople.includes(this.selectedPerson)\n      ) {\n        this.$refs['people-field'].clear()\n      }\n      this.refreshSchedule()\n    },\n\n    selectedPerson() {\n      this.refreshSchedule()\n    },\n\n    zoomLevel(value) {\n      this.updateRoute({ zoom: value })\n    },\n\n    isTaskSidePanelOpen: {\n      immediate: true,\n      handler() {\n        if (this.isTaskSidePanelOpen) {\n          this.loadUnassignedTasks()\n        }\n      }\n    }\n  },\n\n  metaInfo() {\n    return {\n      title: `${this.$t('team_schedule.title_main')} - Kitsu`\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dark {\n  .project-dates {\n    color: $white-grey;\n    border-bottom: 1px solid $grey;\n  }\n}\n\n.project-dates {\n  border-bottom: 1px solid #eee;\n  padding-bottom: 1em;\n\n  .field {\n    padding-bottom: 0;\n    margin-bottom: 0;\n  }\n\n  .overall-man-days {\n    width: 120px;\n    font-size: 0.9em;\n    margin-right: 1em;\n  }\n}\n\n.fixed-page {\n  padding: 1em;\n  padding-top: 90px;\n  padding-left: 2em;\n}\n\n.main-column {\n  display: flex;\n  border: 0;\n  overflow: hidden;\n  flex-direction: column;\n}\n\n.zoom-level {\n  margin-top: -10px;\n  white-space: nowrap;\n}\n\n.people-filter {\n  min-width: 250px;\n}\n\n.side-column {\n  position: relative;\n  top: -30px;\n  right: -14px;\n  height: calc(100% + 30px + 14px);\n  margin-top: 0;\n\n  // Hide the task selection counter\n  :deep(.task-info.empty) {\n    padding-top: 0;\n    > *:not(.empty-section) {\n      display: none;\n    }\n  }\n\n  .close-button {\n    position: absolute;\n    right: 1em;\n    top: 1em;\n  }\n\n  .task-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    gap: 1em;\n\n    .task-item {\n      position: relative;\n      cursor: move;\n\n      .ui-droppable {\n        padding: 0.5em;\n        border: 1px solid;\n        border-left-width: 5px;\n        border-radius: 5px;\n        box-shadow: 4px 4px 4px var(--box-shadow);\n\n        background-color: darken(#f8f8f8, 5%);\n\n        .dark & {\n          background-color: lighten(#36393f, 5%);\n        }\n      }\n\n      &:hover .ui-droppable {\n        background-color: var(--background-selectable);\n      }\n\n      &.drag {\n        transform: translate(0, 0); // fix dragging style\n\n        .ui-droppable {\n          background-color: var(--background-selected);\n          transform: rotate(5deg) scale(0.5);\n        }\n      }\n\n      &.dragging {\n        cursor: grabbing;\n        opacity: 0.5;\n\n        .ui-droppable {\n          transform: rotate(0);\n        }\n      }\n\n      .task-thumbnail {\n        margin-right: 1em;\n      }\n\n      .task-department {\n        position: absolute;\n        top: 5px;\n        right: 0.5em;\n      }\n    }\n  }\n}\n</style>\n"],"names":["_sfc_main","formatListMixin","ButtonSimple","ComboboxDepartment","ComboboxNumber","ComboboxProduction","ComboboxStudio","ComboboxTaskType","Datepicker","DepartmentName","EntityThumbnail","PeopleField","ProductionName","Schedule","Spinner","TableInfo","TaskInfo","moment","zoom","mapGetters","fr","en","acc","dayOff","selectablePeople","person","productionId","types","type","mapActions","list","dates","more","page","data","is_more","stats","task","minutesToDays","_a","err","syncSchedule","personDatesList","p","parseSimpleDate","scheduleItem","personDates","people","scheduleItems","item","startDate","endDate","colors","getPersonTabPath","parentElement","addBusinessDays","taskType","event","refreshScheduleCallBack","firstBy","element","tasks","date","department","studio","query","value"],"mappings":"kRAyOA,MAAAA,EAAA,CACA,KAAA,gBAEA,OAAA,CAAAC,CAAA,EAEA,WAAA,CACA,aAAAC,EACA,mBAAAC,EACA,eAAAC,EACA,mBAAAC,EACA,eAAAC,EACA,iBAAAC,EACA,WAAAC,EACA,eAAAC,EACA,gBAAAC,EACA,YAAAC,EACA,eAAAC,EACA,SAAAC,EACA,QAAAC,EACA,UAAAC,EACA,SAAAC,CACA,EAEA,MAAA,CACA,MAAA,CACA,aAAA,CAAA,EACA,QAAAC,EAAA,EAAA,IAAA,EAAA,QAAA,EACA,oBAAA,GACA,YAAA,CAAA,EACA,cAAA,CAAA,EACA,mBAAA,KACA,gBAAA,KACA,eAAA,KACA,kBAAA,KACA,eAAA,KACA,UAAAA,EAAA,EACA,gBAAA,CAAA,EACA,qBAAA,EACA,UAAA,EACA,YAAA,CACA,CAAA,MAAA,IAAA,MAAA,CAAA,EACA,CAAA,MAAA,IAAA,MAAA,CAAA,EACA,CAAA,MAAA,IAAA,MAAA,CAAA,EACA,CAAA,MAAA,IAAA,MAAA,CAAA,CACA,EACA,QAAA,CACA,uBAAA,GACA,gBAAA,EACA,EACA,OAAA,CACA,gBAAA,GACA,SAAA,EACA,EACA,QAAA,CACA,aAAA,KACA,WAAA,IACA,EACA,WAAA,CACA,gBAAA,CACA,CACA,CACA,EAEA,SAAA,CACA,KAAA,mBAAA,KAAA,OAAA,MAAA,YAAA,OACA,KAAA,eAAA,KAAA,OAAA,MAAA,QAAA,OACA,MAAAC,EAAA,SAAA,KAAA,OAAA,MAAA,IAAA,GAAA,EACA,KAAA,UAAA,KAAA,IAAA,KAAA,IAAAA,EAAA,CAAA,EAAA,CAAA,EAEA,KAAA,KAAA,CACA,EAEA,SAAA,CACA,GAAAC,EAAA,CACA,UACA,gBACA,kBACA,yBACA,kBACA,eACA,gBACA,UACA,cACA,MACA,CAAA,EAEA,QAAA,CACA,OAAA,KAAA,KAAA,SAAA,QACAC,EAAA,GAEAC,EAAA,EAEA,EAEA,iBAAA,CACA,OAAA,KAAA,QAAA,OAAA,CAAAC,EAAAC,KACAD,EAAAC,EAAA,SAAA,IACAD,EAAAC,EAAA,SAAA,EAAA,CAAA,GAEAD,EAAAC,EAAA,SAAA,EAAA,KAAAA,CAAA,EACAD,GACA,EAAA,CACA,EAEA,kBAAA,CACA,IAAAE,EAAA,KAAA,gBAAA,OACAC,GAAA,CAAAA,EAAA,MACA,EACA,OAAA,KAAA,qBACAD,EAAAA,EAAA,OAAAC,GACAA,EAAA,YAAA,SAAA,KAAA,kBAAA,CACA,GAEA,KAAA,iBACAD,EAAAA,EAAA,OACAC,GAAAA,EAAA,YAAA,KAAA,cACA,GAEAD,CACA,EAEA,gBAAA,CACA,OAAA,KAAA,YAAA,KAAA,eAAA,CACA,EAEA,cAAA,CACA,MAAAE,EAAA,KAAA,QAAA,aACAC,EAAA,KAAA,uBAAAD,CAAA,EAAA,OACAE,GAAAA,EAAA,aAAA,SACA,EACA,OAAA,KAAA,YAAAD,CAAA,CACA,CACA,EAEA,QAAA,CACA,GAAAE,EAAA,CACA,sBACA,mBACA,uBACA,cACA,gBACA,aACA,yBACA,YACA,CAAA,EAEA,YAAAC,EAAA,CACA,MAAA,CACA,CACA,GAAA,GACA,MAAA,OACA,KAAA,KAAA,GAAA,UAAA,EACA,WAAA,KAAA,GAAA,UAAA,CACA,EACA,GAAAA,CACA,CACA,EAEA,MAAA,MAAA,CACA,MAAA,KAAA,WAAA,EACA,MAAA,KAAA,gBAAA,EACA,MAAA,KAAA,YAAA,EAEA,KAAA,gBAAA,EACA,KAAA,sBAAA,EAEA,KAAA,UAAAb,EAAA,EACA,KAAA,QAAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EACA,OAAA,OAAA,KAAA,WAAA,EAAA,QAAAc,GAAA,CACAA,EAAA,UAAA,SAAA,KAAA,SAAA,IACA,KAAA,UAAAA,EAAA,UAAA,MAAA,GAEAA,EAAA,QAAA,QAAA,KAAA,OAAA,IACA,KAAA,QAAAA,EAAA,QAAA,MAAA,EAEA,CAAA,EAEA,KAAA,kBAAA,KAAA,UAAA,OAAA,EACA,KAAA,gBAAA,KAAA,QAAA,OAAA,CACA,EAEA,qBAAA,CACA,KAAA,oBAAA,CAAA,KAAA,oBAEA,KAAA,sBACA,KAAA,gBAAA,CAAA,EACA,KAAA,OAAA,gBAAA,GAEA,EAEA,MAAA,oBAAAC,EAAA,GAAA,CACA,KAAA,QAAA,gBAAA,GACA,KAAA,OAAA,gBAAA,GACA,MAAAC,EAAAD,EAAA,KAAA,WAAA,gBAAA,EAAA,EACA,GAAA,CACA,KAAA,CAAA,KAAAE,EAAA,QAAAC,EAAA,MAAAC,CAAA,EAAA,MAAA,KAAA,cAAA,CACA,MAAA,GACA,KAAAH,EACA,UAAA,aACA,WAAA,KAAA,QAAA,aACA,aAAA,KAAA,QAAA,UACA,CAAA,EACAD,EACA,KAAA,WAAA,kBAEA,KAAA,gBAAA,CAAA,EAEA,KAAA,gBAAA,KAAA,gBAAA,OAEAE,EAAA,IAAAG,GAAA,OAAA,OACA,GAAAA,EACA,UAAA,GAAAA,EAAA,gBAAA,MAAAA,EAAA,WAAA,MAAAA,EAAA,SAAA,GACA,SAAAC,EAAA,KAAA,aAAAD,EAAA,UAAA,EACA,WAAA,KAAA,cAAA,KACAE,EAAA,KAAA,YAAA,IAAAF,EAAA,YAAA,IAAA,YAAAE,EAAA,aACA,EACA,WAAA,KAAA,cAAA,IAAAF,EAAA,UAAA,CACA,EAAA,CACA,EACA,KAAA,qBAAAD,EAAA,MACA,KAAA,QAAA,uBAAAD,CACA,OAAAK,EAAA,CACA,KAAA,OAAA,gBAAA,GACA,QAAA,MAAAA,CAAA,CACA,CACA,KAAA,QAAA,gBAAA,EACA,EAEA,MAAA,gBAAAC,EAAA,GAAA,CACA,MAAAC,EAAA,MAAA,KAAA,qBAAA,EACA,KAAA,YAAA,CAAA,EACAA,EAAA,QAAAC,GAAA,CACA,KAAA,YAAAA,EAAA,SAAA,EAAA,CACA,QAAAC,EAAAD,EAAA,QAAA,EACA,UAAAC,EAAAD,EAAA,QAAA,CACA,CACA,CAAA,EAEAF,GACA,KAAA,cAAA,QAAAI,GAAA,CACA,MAAAC,EAAA,KAAA,YAAAD,EAAA,EAAA,EACAC,IACAD,EAAA,UAAAC,EAAA,UACAD,EAAA,QAAAC,EAAA,QAEA,CAAA,CAEA,EAEA,iBAAA,CACA,MAAAC,EAAA,KAAA,eACA,CAAA,KAAA,cAAA,EACA,KAAA,iBACA,KAAA,cAAA,KAAA,qBAAAA,CAAA,CACA,EAEA,qBAAAC,EAAA,CACA,OAAAA,EAAA,IAAAC,GAAA,CACA,IAAAC,EAAAjC,EAAA,EACAkC,EAAAlC,EAAA,EACA,MAAA6B,EAAA,KAAA,YAAAG,EAAA,EAAA,EACA,OAAAH,GAAAA,EAAA,WAAAA,EAAA,UACAI,EAAAN,EAAAE,EAAA,SAAA,EACAK,EAAAP,EAAAE,EAAA,OAAA,GAEA,CACA,GAAAG,EACA,OAAA,GACA,MAAAA,EAAA,OAAAG,EAAA,WAAAH,EAAA,KAAA,EAAA,EACA,UAAAC,EACA,QAAAC,EACA,SAAA,GACA,QAAA,GACA,SAAA,GACA,MAAAE,EAAAJ,EAAA,GAAA,UAAA,EACA,SAAA,CAAA,EACA,QAAA,KAAA,gBAAAA,EAAA,EAAA,CACA,CACA,CAAA,CACA,EAEA,sBAAAK,EAAAjB,EAAA,CACA,IAAAa,EAAAjC,EAAA,EACAkC,EAEA,GAAA,CAAAd,EAAA,YAAA,CAAAA,EAAA,SACA,OAAA,KAGAA,EAAA,aACAa,EAAAN,EAAAP,EAAA,UAAA,GAGAA,EAAA,SACAc,EAAAP,EAAAP,EAAA,QAAA,EACAA,EAAA,SACAc,EAAAP,EAAAP,EAAA,QAAA,EACAA,EAAA,aACAc,EAAAI,EACAlB,EAAA,UACA,KAAA,KAAAC,EAAA,KAAA,aAAAD,EAAA,UAAA,CAAA,EAAA,EACAA,EAAA,cAAA,OACA,IAGA,CAAAc,GAAAA,EAAA,SAAAD,CAAA,KACAC,EAAAD,EAAA,MAAA,EAAA,IAAA,EAAA,MAAA,GAEA,MAAAM,EAAA,KAAA,YAAA,IAAAnB,EAAA,YAAA,EACA,MAAA,CACA,GAAAA,EACA,KAAA,GAAAA,EAAA,gBAAA,MAAAmB,EAAA,IAAA,GACA,UAAAN,EACA,QAAAC,EACA,SAAAd,EAAA,WACA,SAAA,GACA,YAAA,GACA,MAAAmB,EAAA,MACA,cAAAF,CACA,CACA,EAEA,qBAAAjB,EAAA,CACA,OAAA,KAAA,WAAA,CACA,OAAAA,EAAA,GACA,KAAA,CACA,WAAAA,EAAA,UAAA,OAAA,YAAA,EACA,SAAAA,EAAA,QAAA,OAAA,YAAA,EACA,WAAAA,EAAA,UACA,CACA,CAAA,CACA,EAEA,gBAAAoB,EAAApB,EAAA,CACAoB,EAAA,gBAAA,EACAA,EAAA,OAAA,UAAA,IAAA,MAAA,EACAA,EAAA,aAAA,WAAA,OACAA,EAAA,aAAA,cAAA,OACAA,EAAA,aAAA,QAAA,SAAApB,EAAA,EAAA,EACA,KAAA,aAAA,CAAAA,CAAA,CACA,EAEA,WAAAoB,EAAA,CACAA,EAAA,gBAAA,EACAA,EAAA,OAAA,UAAA,IAAA,UAAA,CACA,EAEA,cAAAA,EAAA,CACAA,EAAA,OAAA,UAAA,OAAA,MAAA,EACAA,EAAA,OAAA,UAAA,OAAA,UAAA,EACA,KAAA,aAAA,CAAA,CACA,EAEA,MAAA,sBAAAR,EAAAxB,EAAAiC,EAAA,CACA,GAAAT,EAAA,OAAA,OAAA,CACA,MAAAZ,EAAA,KAAA,sBAAAZ,EAAAwB,CAAA,EACAxB,EAAA,SAAA,KAAAY,CAAA,EACAZ,EAAA,SAAA,KACAkC,EAAA,QAAA,WAAA,EAAA,OAAA,cAAA,EAAA,OAAA,MAAA,CACA,EACAD,GACAA,EAAAjC,CAAA,EAEA,MAAA,KAAA,oBAAA,CACA,SAAAA,EAAA,GACA,QAAA,CAAAY,EAAA,EAAA,CACA,CAAA,EACA,MAAA,KAAA,qBAAAA,CAAA,EACA,MAAA,KAAA,oBAAA,CACA,CACA,EAEA,MAAA,sBAAAY,EAAA,CACAA,EAAA,OAAA,SACAA,EAAA,aACAA,EAAA,QAAAM,EACAN,EAAA,UACA,KAAA,KAAAX,EAAA,KAAA,aAAAW,EAAA,UAAA,CAAA,EAAA,EACAA,EAAA,cAAA,OACA,GAEA,MAAA,KAAA,qBAAAA,CAAA,EACA,MAAA,KAAA,gBAAA,EAAA,EACA,MAAA,KAAA,YAAA,EAEA,EAEA,uBAAAA,EAAAxB,EAAA,CACAwB,EAAA,OAAA,SACAxB,EAAA,SAAA,KACAkC,EAAA,QAAA,WAAA,EAAA,OAAA,cAAA,EAAA,OAAA,MAAA,CACA,EACA,KAAA,oBAAA,CACA,SAAAlC,EAAA,GACA,QAAA,CAAAwB,EAAA,EAAA,CACA,CAAA,EAEA,EAEA,yBAAAA,EAAAxB,EAAA,CACAwB,EAAA,OAAA,QACA,KAAA,uBAAA,CACA,OAAAxB,EACA,KAAAwB,CACA,CAAA,CAEA,EAEA,MAAA,oBAAAW,EAAAF,EAAA,CAGA,GAFAE,EAAA,SAAA,CAAAA,EAAA,SAEA,EAAAA,EAAA,SAIA,CAAAA,EAAA,QAAA,GACAA,EAAA,SAAA,CAAA,EACA,GAAA,CACA,MAAAC,EAAA,MAAA,KAAA,iBAAAD,EAAA,EAAA,EACAA,EAAA,SAAAC,EACA,IAAAxB,GAAA,KAAA,sBAAAuB,EAAAvB,CAAA,CAAA,EACA,OAAA,OAAA,EACA,KAAAsB,EAAAA,QAAA,WAAA,EAAA,OAAA,cAAA,EAAA,OAAA,MAAA,CAAA,EAEAD,GACAA,EAAAE,CAAA,CAEA,OAAApB,EAAA,CACA,QAAA,MAAAA,CAAA,CACA,CACAoB,EAAA,QAAA,GACA,EAEA,0BAAAE,EAAA,CACA,KAAA,UAAAlB,EAAAkB,CAAA,CACA,EAEA,wBAAAA,EAAA,CACA,KAAA,QAAAlB,EAAAkB,CAAA,CACA,EAEA,uBAAA,QACAvB,EAAA,KAAA,MAAA,WAAA,MAAAA,EAAA,eACA,EAEA,YAAA,CAAA,WAAAwB,EAAA,OAAAC,EAAA,KAAA9C,CAAA,EAAA,CACA,MAAA+C,EAAA,CAAA,GAAA,KAAA,OAAA,KAAA,EAEAF,IAAA,SACAE,EAAA,WAAAF,GAAA,QAEAC,IAAA,SACAC,EAAA,OAAAD,GAAA,QAEA9C,IAAA,SACA+C,EAAA,KAAA,OAAA/C,CAAA,GAGA,KAAA,UAAA+C,CAAA,IAAA,KAAA,UAAA,KAAA,OAAA,KAAA,GACA,KAAA,QAAA,KAAA,CAAA,MAAAA,CAAA,CAAA,CAEA,CACA,EAEA,MAAA,CACA,mBAAAC,EAAA,CACA,KAAA,YAAA,CAAA,WAAAA,CAAA,CAAA,EAEA,KAAA,gBACA,CAAA,KAAA,iBAAA,SAAA,KAAA,cAAA,GAEA,KAAA,MAAA,cAAA,EAAA,MAAA,EAEA,KAAA,gBAAA,CACA,EAEA,eAAAA,EAAA,CACA,KAAA,YAAA,CAAA,OAAAA,CAAA,CAAA,EAEA,KAAA,gBACA,CAAA,KAAA,iBAAA,SAAA,KAAA,cAAA,GAEA,KAAA,MAAA,cAAA,EAAA,MAAA,EAEA,KAAA,gBAAA,CACA,EAEA,gBAAA,CACA,KAAA,gBAAA,CACA,EAEA,UAAAA,EAAA,CACA,KAAA,YAAA,CAAA,KAAAA,CAAA,CAAA,CACA,EAEA,oBAAA,CACA,UAAA,GACA,SAAA,CACA,KAAA,qBACA,KAAA,oBAAA,CAEA,CACA,CACA,EAEA,UAAA,CACA,MAAA,CACA,MAAA,GAAA,KAAA,GAAA,0BAAA,CAAA,UACA,CACA,CACA"}